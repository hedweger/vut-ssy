
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800200  00000342  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000342  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016fe  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014d9  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051d  00000000  00000000  000030b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000035d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009a3  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ff  00000000  00000000  00004057  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00004256  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	ed c0       	rjmp	.+474    	; 0x26c <__vector_36>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e2 e4       	ldi	r30, 0x42	; 66
 14c:	f3 e0       	ldi	r31, 0x03	; 3
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a4 35       	cpi	r26, 0x54	; 84
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	02 d0       	rcall	.+4      	; 0x164 <main>
 160:	ee c0       	rjmp	.+476    	; 0x33e <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <main>:
#define BAUD 38400


int main(void)
{	
	DDRB |= (1 << DDB5) | (1 << DDB6);  // Set PORTB pins 5 and 6 as output
 164:	84 b1       	in	r24, 0x04	; 4
 166:	80 66       	ori	r24, 0x60	; 96
 168:	84 b9       	out	0x04, r24	; 4
    DDRE |= (1 << DDE3);  // Set PORTE pin 3 as output
 16a:	8d b1       	in	r24, 0x0d	; 13
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	8d b9       	out	0x0d, r24	; 13
	LED1OFF;
 170:	85 b1       	in	r24, 0x05	; 5
 172:	80 62       	ori	r24, 0x20	; 32
 174:	85 b9       	out	0x05, r24	; 5
	LED2OFF;
 176:	85 b1       	in	r24, 0x05	; 5
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	85 b9       	out	0x05, r24	; 5
	LED3OFF;
 17c:	8e b1       	in	r24, 0x0e	; 14
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	8e b9       	out	0x0e, r24	; 14
	int j = 0;
	UART_Init(BAUD);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	96 e9       	ldi	r25, 0x96	; 150
 186:	33 d0       	rcall	.+102    	; 0x1ee <UART_Init>
	UART_SendString("MENU:");
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	49 d0       	rcall	.+146    	; 0x220 <UART_SendString>
	DDRB |= (1 << DDB5) | (1 << DDB6);  // Set PORTB pins 5 and 6 as output
    DDRE |= (1 << DDE3);  // Set PORTE pin 3 as output
	LED1OFF;
	LED2OFF;
	LED3OFF;
	int j = 0;
 18e:	c0 e0       	ldi	r28, 0x00	; 0
	UART_Init(BAUD);
	UART_SendString("MENU:");
	while(1)
	{	
		uint8_t recv = UART_GetChar();
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	65 d0       	rcall	.+202    	; 0x25e <UART_GetChar>
		if (recv == 49) {
 194:	81 33       	cpi	r24, 0x31	; 49
			UART_SendString("abcdefghijklmnopqrstuvwxyz\r\n");	
 196:	21 f4       	brne	.+8      	; 0x1a0 <main+0x3c>
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	41 d0       	rcall	.+130    	; 0x220 <UART_SendString>
 19e:	f9 cf       	rjmp	.-14     	; 0x192 <main+0x2e>
		} else if (recv == 50) {
 1a0:	82 33       	cpi	r24, 0x32	; 50
			UART_SendString("ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n");
 1a2:	21 f4       	brne	.+8      	; 0x1ac <main+0x48>
 1a4:	83 e2       	ldi	r24, 0x23	; 35
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	3b d0       	rcall	.+118    	; 0x220 <UART_SendString>
 1aa:	f3 cf       	rjmp	.-26     	; 0x192 <main+0x2e>
		} else if (recv == 51) {
 1ac:	83 33       	cpi	r24, 0x33	; 51
 1ae:	c9 f4       	brne	.+50     	; 0x1e2 <main+0x7e>
			LED2CHANGE;
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	80 e4       	ldi	r24, 0x40	; 64
 1b4:	89 27       	eor	r24, r25
 1b6:	85 b9       	out	0x05, r24	; 5
			while(j < 10000) { j++; }
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <main+0x58>
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 31       	cpi	r28, 0x10	; 16
 1be:	87 e2       	ldi	r24, 0x27	; 39
 1c0:	d8 07       	cpc	r29, r24
 1c2:	dc f3       	brlt	.-10     	; 0x1ba <main+0x56>
			LED2CHANGE;
 1c4:	95 b1       	in	r25, 0x05	; 5
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	89 27       	eor	r24, r25
 1ca:	85 b9       	out	0x05, r24	; 5
			while(j < 10000) { j++; }
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <main+0x6c>
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	c0 31       	cpi	r28, 0x10	; 16
 1d2:	87 e2       	ldi	r24, 0x27	; 39
 1d4:	d8 07       	cpc	r29, r24
 1d6:	dc f3       	brlt	.-10     	; 0x1ce <main+0x6a>
			LED2CHANGE;
 1d8:	95 b1       	in	r25, 0x05	; 5
 1da:	80 e4       	ldi	r24, 0x40	; 64
 1dc:	89 27       	eor	r24, r25
 1de:	85 b9       	out	0x05, r24	; 5
		} else if (recv !=0) {
 1e0:	d8 cf       	rjmp	.-80     	; 0x192 <main+0x2e>
 1e2:	88 23       	and	r24, r24
			UART_SendString("unknown sequence\r\n");
 1e4:	b1 f2       	breq	.-84     	; 0x192 <main+0x2e>
 1e6:	80 e4       	ldi	r24, 0x40	; 64
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	1a d0       	rcall	.+52     	; 0x220 <UART_SendString>
 1ec:	d2 cf       	rjmp	.-92     	; 0x192 <main+0x2e>

000001ee <UART_Init>:
#include <avr/interrupt.h>
#define F_CPU 8000000 // 8 MHz internal clock

void UART_Init(uint16_t baudrate)
{
	int ubbr = ((F_CPU/16/baudrate)-1);
 1ee:	9c 01       	movw	r18, r24
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	60 e2       	ldi	r22, 0x20	; 32
 1f6:	71 ea       	ldi	r23, 0xA1	; 161
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	62 d0       	rcall	.+196    	; 0x2c2 <__divmodsi4>
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
	UBRR1H = (uint8_t)(ubbr>>8);
 202:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UBRR1L = (uint8_t)ubbr;
 206:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	// 
	UCSR1B = (1<<RXCIE1)|(1<<TXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 20a:	88 ed       	ldi	r24, 0xD8	; 216
 20c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 210:	08 95       	ret

00000212 <UART_SendChar>:
}


void UART_SendChar(uint8_t data)
{
	while ( !( UCSR1A & (1<<UDRE1)) )
 212:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 216:	95 ff       	sbrs	r25, 5
 218:	fc cf       	rjmp	.-8      	; 0x212 <UART_SendChar>
	;
	UDR1 = data;
 21a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 21e:	08 95       	ret

00000220 <UART_SendString>:
}

void UART_SendString(char* text) {
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	8c 01       	movw	r16, r24
	for (int i=0; i < strlen(text); i++) {
 22a:	c0 e0       	ldi	r28, 0x00	; 0
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	08 c0       	rjmp	.+16     	; 0x240 <UART_SendString+0x20>
		if (text[i] == 0x00) {
 230:	f8 01       	movw	r30, r16
 232:	ec 0f       	add	r30, r28
 234:	fd 1f       	adc	r31, r29
 236:	80 81       	ld	r24, Z
 238:	88 23       	and	r24, r24
 23a:	61 f0       	breq	.+24     	; 0x254 <UART_SendString+0x34>
			return;
		}
		UART_SendChar(text[i]);
 23c:	ea df       	rcall	.-44     	; 0x212 <UART_SendChar>
	;
	UDR1 = data;
}

void UART_SendString(char* text) {
	for (int i=0; i < strlen(text); i++) {
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	f8 01       	movw	r30, r16
 242:	01 90       	ld	r0, Z+
 244:	00 20       	and	r0, r0
 246:	e9 f7       	brne	.-6      	; 0x242 <UART_SendString+0x22>
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	e0 1b       	sub	r30, r16
 24c:	f1 0b       	sbc	r31, r17
 24e:	ce 17       	cp	r28, r30
 250:	df 07       	cpc	r29, r31
 252:	70 f3       	brcs	.-36     	; 0x230 <UART_SendString+0x10>
		if (text[i] == 0x00) {
			return;
		}
		UART_SendChar(text[i]);
	}
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <UART_GetChar>:

uint8_t UART_GetChar( void )
{
	while ( !(UCSR1A & (1<<RXC1)) )
 25e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 262:	88 23       	and	r24, r24
 264:	e4 f7       	brge	.-8      	; 0x25e <UART_GetChar>
	;
	return UDR1;
 266:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
}
 26a:	08 95       	ret

0000026c <__vector_36>:

ISR(USART1_RX_vect) {
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	0b b6       	in	r0, 0x3b	; 59
 278:	0f 92       	push	r0
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	uint8_t recv;
	recv = UART_GetChar();
 292:	e5 df       	rcall	.-54     	; 0x25e <UART_GetChar>
	if (recv == 1) {
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	11 f4       	brne	.+4      	; 0x29c <__vector_36+0x30>
		UART_SendChar('1');
 298:	81 e3       	ldi	r24, 0x31	; 49
 29a:	bb df       	rcall	.-138    	; 0x212 <UART_SendChar>
	}
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0b be       	out	0x3b, r0	; 59
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__divmodsi4>:
 2c2:	05 2e       	mov	r0, r21
 2c4:	97 fb       	bst	r25, 7
 2c6:	16 f4       	brtc	.+4      	; 0x2cc <__divmodsi4+0xa>
 2c8:	00 94       	com	r0
 2ca:	0f d0       	rcall	.+30     	; 0x2ea <__negsi2>
 2cc:	57 fd       	sbrc	r21, 7
 2ce:	05 d0       	rcall	.+10     	; 0x2da <__divmodsi4_neg2>
 2d0:	14 d0       	rcall	.+40     	; 0x2fa <__udivmodsi4>
 2d2:	07 fc       	sbrc	r0, 7
 2d4:	02 d0       	rcall	.+4      	; 0x2da <__divmodsi4_neg2>
 2d6:	46 f4       	brtc	.+16     	; 0x2e8 <__divmodsi4_exit>
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <__negsi2>

000002da <__divmodsi4_neg2>:
 2da:	50 95       	com	r21
 2dc:	40 95       	com	r20
 2de:	30 95       	com	r19
 2e0:	21 95       	neg	r18
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	4f 4f       	sbci	r20, 0xFF	; 255
 2e6:	5f 4f       	sbci	r21, 0xFF	; 255

000002e8 <__divmodsi4_exit>:
 2e8:	08 95       	ret

000002ea <__negsi2>:
 2ea:	90 95       	com	r25
 2ec:	80 95       	com	r24
 2ee:	70 95       	com	r23
 2f0:	61 95       	neg	r22
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	8f 4f       	sbci	r24, 0xFF	; 255
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__udivmodsi4>:
 2fa:	a1 e2       	ldi	r26, 0x21	; 33
 2fc:	1a 2e       	mov	r1, r26
 2fe:	aa 1b       	sub	r26, r26
 300:	bb 1b       	sub	r27, r27
 302:	fd 01       	movw	r30, r26
 304:	0d c0       	rjmp	.+26     	; 0x320 <__udivmodsi4_ep>

00000306 <__udivmodsi4_loop>:
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	ee 1f       	adc	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	a2 17       	cp	r26, r18
 310:	b3 07       	cpc	r27, r19
 312:	e4 07       	cpc	r30, r20
 314:	f5 07       	cpc	r31, r21
 316:	20 f0       	brcs	.+8      	; 0x320 <__udivmodsi4_ep>
 318:	a2 1b       	sub	r26, r18
 31a:	b3 0b       	sbc	r27, r19
 31c:	e4 0b       	sbc	r30, r20
 31e:	f5 0b       	sbc	r31, r21

00000320 <__udivmodsi4_ep>:
 320:	66 1f       	adc	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	1a 94       	dec	r1
 32a:	69 f7       	brne	.-38     	; 0x306 <__udivmodsi4_loop>
 32c:	60 95       	com	r22
 32e:	70 95       	com	r23
 330:	80 95       	com	r24
 332:	90 95       	com	r25
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	bd 01       	movw	r22, r26
 33a:	cf 01       	movw	r24, r30
 33c:	08 95       	ret

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>

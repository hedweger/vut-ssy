
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800200  00000456  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000196f  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000159e  00000000  00000000  0000201b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000754  00000000  00000000  000035b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00003d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a46  00000000  00000000  00003e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000257  00000000  00000000  000048ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00004b05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c1       	rjmp	.+704    	; 0x2f6 <__vector_13>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c1       	rjmp	.+652    	; 0x2d2 <__vector_17>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	68 c0       	rjmp	.+208    	; 0x162 <__bad_interrupt>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e6 e5       	ldi	r30, 0x56	; 86
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a2 3c       	cpi	r26, 0xC2	; 194
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	02 d0       	rcall	.+4      	; 0x164 <main>
 160:	78 c1       	rjmp	.+752    	; 0x452 <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <main>:

int main(void) {
	bool timer0 = false;
	bool timer1 = false;
	bool timer2 = false;
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6);
 164:	84 b1       	in	r24, 0x04	; 4
 166:	80 67       	ori	r24, 0x70	; 112
 168:	84 b9       	out	0x04, r24	; 4
	DDRE |= (1 << DDE3);
 16a:	8d b1       	in	r24, 0x0d	; 13
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	8d b9       	out	0x0d, r24	; 13
	UART_Init(BAUD);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	96 e9       	ldi	r25, 0x96	; 150
 174:	ca d0       	rcall	.+404    	; 0x30a <UART_Init>
	
	UART_SendString("MENU:\r\n");
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	e0 d0       	rcall	.+448    	; 0x33c <UART_SendString>
	UART_SendString("1: abeceda\r\n");
 17c:	89 e0       	ldi	r24, 0x09	; 9
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	dd d0       	rcall	.+442    	; 0x33c <UART_SendString>
	UART_SendString("2: ABECEDA\r\n");
 182:	86 e1       	ldi	r24, 0x16	; 22
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	da d0       	rcall	.+436    	; 0x33c <UART_SendString>
	UART_SendString("4: Timer0 ON\r\n");
 188:	83 e2       	ldi	r24, 0x23	; 35
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	d7 d0       	rcall	.+430    	; 0x33c <UART_SendString>
	UART_SendString("5: Timer1 ON\r\n");
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	d4 d0       	rcall	.+424    	; 0x33c <UART_SendString>
	UART_SendString("+: LED3 brightness up\r\n");
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	d1 d0       	rcall	.+418    	; 0x33c <UART_SendString>
	UART_SendString("-: LED3 brightness down\r\n");
 19a:	89 e5       	ldi	r24, 0x59	; 89
 19c:	92 e0       	ldi	r25, 0x02	; 2
 19e:	ce d0       	rcall	.+412    	; 0x33c <UART_SendString>
 1a0:	c0 e0       	ldi	r28, 0x00	; 0

uint8_t duty = 10;

int main(void) {
	bool timer0 = false;
	bool timer1 = false;
 1a2:	eb d0       	rcall	.+470    	; 0x37a <UART_GetChar>
	UART_SendString("-: LED3 brightness down\r\n");

	
	
	while (1) {	
		char recv = UART_GetChar();
 1a4:	81 33       	cpi	r24, 0x31	; 49
 1a6:	59 f0       	breq	.+22     	; 0x1be <main+0x5a>
		switch (recv)
 1a8:	28 f4       	brcc	.+10     	; 0x1b4 <main+0x50>
 1aa:	8b 32       	cpi	r24, 0x2B	; 43
 1ac:	c1 f0       	breq	.+48     	; 0x1de <main+0x7a>
 1ae:	8d 32       	cpi	r24, 0x2D	; 45
 1b0:	09 f1       	breq	.+66     	; 0x1f4 <main+0x90>
 1b2:	2b c0       	rjmp	.+86     	; 0x20a <main+0xa6>
 1b4:	82 33       	cpi	r24, 0x32	; 50
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <main+0x62>
 1b8:	85 33       	cpi	r24, 0x35	; 53
 1ba:	49 f0       	breq	.+18     	; 0x1ce <main+0x6a>
 1bc:	26 c0       	rjmp	.+76     	; 0x20a <main+0xa6>
		{
		case '1':
			UART_SendString("abcdefghijklmnopqrstuvwxyz\r\n");
 1be:	83 e7       	ldi	r24, 0x73	; 115
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	bc d0       	rcall	.+376    	; 0x33c <UART_SendString>
			break;
		case '2':
			UART_SendString("ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n");
 1c4:	ee cf       	rjmp	.-36     	; 0x1a2 <main+0x3e>
 1c6:	80 e9       	ldi	r24, 0x90	; 144
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	b8 d0       	rcall	.+368    	; 0x33c <UART_SendString>
			break;
 1cc:	ea cf       	rjmp	.-44     	; 0x1a2 <main+0x3e>
		case '5':
			if (timer1 == false) {
 1ce:	c1 11       	cpse	r28, r1
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <main+0x74>
				timer1 = true;
				Timer1_cmp_start();
 1d2:	33 d0       	rcall	.+102    	; 0x23a <Timer1_cmp_start>
 1d4:	c1 e0       	ldi	r28, 0x01	; 1
		case '2':
			UART_SendString("ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n");
			break;
		case '5':
			if (timer1 == false) {
				timer1 = true;
 1d6:	e5 cf       	rjmp	.-54     	; 0x1a2 <main+0x3e>
 1d8:	27 d0       	rcall	.+78     	; 0x228 <Timer1_end>
				Timer1_cmp_start();
			} else {
				timer1 = false;
				Timer1_end();
 1da:	c0 e0       	ldi	r28, 0x00	; 0
		case '5':
			if (timer1 == false) {
				timer1 = true;
				Timer1_cmp_start();
			} else {
				timer1 = false;
 1dc:	e2 cf       	rjmp	.-60     	; 0x1a2 <main+0x3e>
 1de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
				Timer1_end();
			}
			break;
		case '+':
		if (duty > 10) {
 1e2:	8b 30       	cpi	r24, 0x0B	; 11
 1e4:	18 f0       	brcs	.+6      	; 0x1ec <main+0x88>
 1e6:	8a 50       	subi	r24, 0x0A	; 10
				duty -= 10; 
 1e8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ec:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
			}
			Timer2_fastpwm_start(duty);
 1f0:	46 d0       	rcall	.+140    	; 0x27e <Timer2_fastpwm_start>
 1f2:	d7 cf       	rjmp	.-82     	; 0x1a2 <main+0x3e>
			break;
 1f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
		case '-':
			if (duty < 100) {
 1f8:	84 36       	cpi	r24, 0x64	; 100
 1fa:	18 f4       	brcc	.+6      	; 0x202 <main+0x9e>
 1fc:	86 5f       	subi	r24, 0xF6	; 246
				 duty += 10; 
 1fe:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 202:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
			}
			Timer2_fastpwm_start(duty);
 206:	3b d0       	rcall	.+118    	; 0x27e <Timer2_fastpwm_start>
 208:	cc cf       	rjmp	.-104    	; 0x1a2 <main+0x3e>
			break;
 20a:	90 e0       	ldi	r25, 0x00	; 0
		default:
			UART_SendString(strcat(recv, " unknown sequence\r\n"));
 20c:	dc 01       	movw	r26, r24
 20e:	0d 90       	ld	r0, X+
 210:	00 20       	and	r0, r0
 212:	e9 f7       	brne	.-6      	; 0x20e <main+0xaa>
 214:	11 97       	sbiw	r26, 0x01	; 1
 216:	24 e1       	ldi	r18, 0x14	; 20
 218:	ed ea       	ldi	r30, 0xAD	; 173
 21a:	f2 e0       	ldi	r31, 0x02	; 2
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	2a 95       	dec	r18
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0xb8>
 224:	8b d0       	rcall	.+278    	; 0x33c <UART_SendString>
 226:	bd cf       	rjmp	.-134    	; 0x1a2 <main+0x3e>

00000228 <Timer1_end>:
 228:	f8 94       	cli
			break;
 22a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		
	TCCR0B |= PRESCALE;
		
	TCCR0A |= (1 << COM0A0);
	TIMSK0 |= (1 << TOIE0);
	sei();
 22e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 232:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
 236:	78 94       	sei
 238:	08 95       	ret

0000023a <Timer1_cmp_start>:
}
void Timer1_cmp_start() {
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	uint16_t cmp = (F_CPU / (2*PRESCALE_VALUE*FREQ)) -1;
	cli();
 23e:	f8 94       	cli
	TCCR1A = 0;
 240:	a0 e8       	ldi	r26, 0x80	; 128
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	1c 92       	st	X, r1
	TCCR1B = 0;
 246:	e1 e8       	ldi	r30, 0x81	; 129
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	10 82       	st	Z, r1
	TIMSK1 = 0;
 24c:	cf e6       	ldi	r28, 0x6F	; 111
 24e:	d0 e0       	ldi	r29, 0x00	; 0
 250:	18 82       	st	Y, r1
	
	OCR1A = cmp;
 252:	80 ea       	ldi	r24, 0xA0	; 160
 254:	97 e0       	ldi	r25, 0x07	; 7
 256:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 25a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	TCCR1B |= (1 << WGM12);
 25e:	80 81       	ld	r24, Z
 260:	88 60       	ori	r24, 0x08	; 8
 262:	80 83       	st	Z, r24
	TCCR1B |= PRESCALE;
 264:	80 81       	ld	r24, Z
 266:	85 60       	ori	r24, 0x05	; 5
 268:	80 83       	st	Z, r24
	
	TIMSK1 |= (1 << OCIE1A);
 26a:	88 81       	ld	r24, Y
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	88 83       	st	Y, r24
	TCCR1A |= (1 << COM1A0);
 270:	8c 91       	ld	r24, X
 272:	80 64       	ori	r24, 0x40	; 64
 274:	8c 93       	st	X, r24
	sei();
 276:	78 94       	sei
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <Timer2_fastpwm_start>:

void Timer2_fastpwm_start(uint8_t duty) {
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
	cli();
 282:	f8 94       	cli
	TCCR2A = 0;
 284:	e0 eb       	ldi	r30, 0xB0	; 176
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	10 82       	st	Z, r1
	TCCR2B = 0;
 28a:	21 eb       	ldi	r18, 0xB1	; 177
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	d9 01       	movw	r26, r18
 290:	1c 92       	st	X, r1
	TIMSK2 = 0;
 292:	c0 e7       	ldi	r28, 0x70	; 112
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	18 82       	st	Y, r1
	
	uint8_t div = (255*duty)/100;
 298:	bf ef       	ldi	r27, 0xFF	; 255
 29a:	8b 9f       	mul	r24, r27
 29c:	c0 01       	movw	r24, r0
 29e:	11 24       	eor	r1, r1
 2a0:	64 e6       	ldi	r22, 0x64	; 100
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	71 d0       	rcall	.+226    	; 0x388 <__divmodhi4>
	OCR2A = div;
 2a6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	
	TCCR2A |= (1 << WGM21);
 2aa:	80 81       	ld	r24, Z
 2ac:	82 60       	ori	r24, 0x02	; 2
 2ae:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM20);
 2b0:	80 81       	ld	r24, Z
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	80 83       	st	Z, r24
	
	TCCR2B |= PRESCALE;
 2b6:	d9 01       	movw	r26, r18
 2b8:	8c 91       	ld	r24, X
 2ba:	85 60       	ori	r24, 0x05	; 5
 2bc:	8c 93       	st	X, r24
	
	TIMSK2 |= (1 << TOIE2);
 2be:	88 81       	ld	r24, Y
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	88 83       	st	Y, r24
	TCCR2A |= (1 << COM2A1);
 2c4:	80 81       	ld	r24, Z
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	80 83       	st	Z, r24
	sei();
 2ca:	78 94       	sei
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <__vector_17>:

ISR(TIMER1_COMPA_vect) {
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
	LED1CHANGE;
 2e0:	95 b1       	in	r25, 0x05	; 5
 2e2:	80 e2       	ldi	r24, 0x20	; 32
 2e4:	89 27       	eor	r24, r25
 2e6:	85 b9       	out	0x05, r24	; 5
}
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
	// LED3CHANGE;
}
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <UART_Init>:
#include <avr/io.h>
#include <stdint.h>
#define F_CPU 8000000 // 8 MHz internal clock

void UART_Init(uint16_t baudrate) {
  int ubbr = ((F_CPU / 16 / baudrate) - 1);
 30a:	9c 01       	movw	r18, r24
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	60 e2       	ldi	r22, 0x20	; 32
 312:	71 ea       	ldi	r23, 0xA1	; 161
 314:	87 e0       	ldi	r24, 0x07	; 7
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	4a d0       	rcall	.+148    	; 0x3ae <__divmodsi4>
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	31 09       	sbc	r19, r1
  UBRR1H = (uint8_t)(ubbr >> 8);
 31e:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRR1L = (uint8_t)ubbr;
 322:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSR1B = (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
 326:	88 ed       	ldi	r24, 0xD8	; 216
 328:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 32c:	08 95       	ret

0000032e <UART_SendChar>:
}

void UART_SendChar(uint8_t data) {
  while (!(UCSR1A & (1 << UDRE1)))
 32e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 332:	95 ff       	sbrs	r25, 5
 334:	fc cf       	rjmp	.-8      	; 0x32e <UART_SendChar>
    ;
  UDR1 = data;
 336:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 33a:	08 95       	ret

0000033c <UART_SendString>:
}

void UART_SendString(char *text) {
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	8c 01       	movw	r16, r24
  for (int i = 0; i < strlen(text); i++) {
 346:	c0 e0       	ldi	r28, 0x00	; 0
 348:	d0 e0       	ldi	r29, 0x00	; 0
 34a:	08 c0       	rjmp	.+16     	; 0x35c <UART_SendString+0x20>
    if (text[i] == 0x00) {
 34c:	f8 01       	movw	r30, r16
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	80 81       	ld	r24, Z
 354:	88 23       	and	r24, r24
 356:	61 f0       	breq	.+24     	; 0x370 <UART_SendString+0x34>
      return;
    }
    UART_SendChar(text[i]);
 358:	ea df       	rcall	.-44     	; 0x32e <UART_SendChar>
    ;
  UDR1 = data;
}

void UART_SendString(char *text) {
  for (int i = 0; i < strlen(text); i++) {
 35a:	21 96       	adiw	r28, 0x01	; 1
 35c:	f8 01       	movw	r30, r16
 35e:	01 90       	ld	r0, Z+
 360:	00 20       	and	r0, r0
 362:	e9 f7       	brne	.-6      	; 0x35e <UART_SendString+0x22>
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	e0 1b       	sub	r30, r16
 368:	f1 0b       	sbc	r31, r17
 36a:	ce 17       	cp	r28, r30
 36c:	df 07       	cpc	r29, r31
 36e:	70 f3       	brcs	.-36     	; 0x34c <UART_SendString+0x10>
    if (text[i] == 0x00) {
      return;
    }
    UART_SendChar(text[i]);
  }
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <UART_GetChar>:

uint8_t UART_GetChar(void) {
  while (!(UCSR1A & (1 << RXC1)))
 37a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 37e:	88 23       	and	r24, r24
 380:	e4 f7       	brge	.-8      	; 0x37a <UART_GetChar>
    ;
  return UDR1;
 382:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
}
 386:	08 95       	ret

00000388 <__divmodhi4>:
 388:	97 fb       	bst	r25, 7
 38a:	07 2e       	mov	r0, r23
 38c:	16 f4       	brtc	.+4      	; 0x392 <__divmodhi4+0xa>
 38e:	00 94       	com	r0
 390:	06 d0       	rcall	.+12     	; 0x39e <__divmodhi4_neg1>
 392:	77 fd       	sbrc	r23, 7
 394:	08 d0       	rcall	.+16     	; 0x3a6 <__divmodhi4_neg2>
 396:	27 d0       	rcall	.+78     	; 0x3e6 <__udivmodhi4>
 398:	07 fc       	sbrc	r0, 7
 39a:	05 d0       	rcall	.+10     	; 0x3a6 <__divmodhi4_neg2>
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__divmodhi4_exit>

0000039e <__divmodhi4_neg1>:
 39e:	90 95       	com	r25
 3a0:	81 95       	neg	r24
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	08 95       	ret

000003a6 <__divmodhi4_neg2>:
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255

000003ac <__divmodhi4_exit>:
 3ac:	08 95       	ret

000003ae <__divmodsi4>:
 3ae:	05 2e       	mov	r0, r21
 3b0:	97 fb       	bst	r25, 7
 3b2:	16 f4       	brtc	.+4      	; 0x3b8 <__divmodsi4+0xa>
 3b4:	00 94       	com	r0
 3b6:	0f d0       	rcall	.+30     	; 0x3d6 <__negsi2>
 3b8:	57 fd       	sbrc	r21, 7
 3ba:	05 d0       	rcall	.+10     	; 0x3c6 <__divmodsi4_neg2>
 3bc:	28 d0       	rcall	.+80     	; 0x40e <__udivmodsi4>
 3be:	07 fc       	sbrc	r0, 7
 3c0:	02 d0       	rcall	.+4      	; 0x3c6 <__divmodsi4_neg2>
 3c2:	46 f4       	brtc	.+16     	; 0x3d4 <__divmodsi4_exit>
 3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <__negsi2>

000003c6 <__divmodsi4_neg2>:
 3c6:	50 95       	com	r21
 3c8:	40 95       	com	r20
 3ca:	30 95       	com	r19
 3cc:	21 95       	neg	r18
 3ce:	3f 4f       	sbci	r19, 0xFF	; 255
 3d0:	4f 4f       	sbci	r20, 0xFF	; 255
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255

000003d4 <__divmodsi4_exit>:
 3d4:	08 95       	ret

000003d6 <__negsi2>:
 3d6:	90 95       	com	r25
 3d8:	80 95       	com	r24
 3da:	70 95       	com	r23
 3dc:	61 95       	neg	r22
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	8f 4f       	sbci	r24, 0xFF	; 255
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	08 95       	ret

000003e6 <__udivmodhi4>:
 3e6:	aa 1b       	sub	r26, r26
 3e8:	bb 1b       	sub	r27, r27
 3ea:	51 e1       	ldi	r21, 0x11	; 17
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <__udivmodhi4_ep>

000003ee <__udivmodhi4_loop>:
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	a6 17       	cp	r26, r22
 3f4:	b7 07       	cpc	r27, r23
 3f6:	10 f0       	brcs	.+4      	; 0x3fc <__udivmodhi4_ep>
 3f8:	a6 1b       	sub	r26, r22
 3fa:	b7 0b       	sbc	r27, r23

000003fc <__udivmodhi4_ep>:
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	5a 95       	dec	r21
 402:	a9 f7       	brne	.-22     	; 0x3ee <__udivmodhi4_loop>
 404:	80 95       	com	r24
 406:	90 95       	com	r25
 408:	bc 01       	movw	r22, r24
 40a:	cd 01       	movw	r24, r26
 40c:	08 95       	ret

0000040e <__udivmodsi4>:
 40e:	a1 e2       	ldi	r26, 0x21	; 33
 410:	1a 2e       	mov	r1, r26
 412:	aa 1b       	sub	r26, r26
 414:	bb 1b       	sub	r27, r27
 416:	fd 01       	movw	r30, r26
 418:	0d c0       	rjmp	.+26     	; 0x434 <__udivmodsi4_ep>

0000041a <__udivmodsi4_loop>:
 41a:	aa 1f       	adc	r26, r26
 41c:	bb 1f       	adc	r27, r27
 41e:	ee 1f       	adc	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	a2 17       	cp	r26, r18
 424:	b3 07       	cpc	r27, r19
 426:	e4 07       	cpc	r30, r20
 428:	f5 07       	cpc	r31, r21
 42a:	20 f0       	brcs	.+8      	; 0x434 <__udivmodsi4_ep>
 42c:	a2 1b       	sub	r26, r18
 42e:	b3 0b       	sbc	r27, r19
 430:	e4 0b       	sbc	r30, r20
 432:	f5 0b       	sbc	r31, r21

00000434 <__udivmodsi4_ep>:
 434:	66 1f       	adc	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	1a 94       	dec	r1
 43e:	69 f7       	brne	.-38     	; 0x41a <__udivmodsi4_loop>
 440:	60 95       	com	r22
 442:	70 95       	com	r23
 444:	80 95       	com	r24
 446:	90 95       	com	r25
 448:	9b 01       	movw	r18, r22
 44a:	ac 01       	movw	r20, r24
 44c:	bd 01       	movw	r22, r26
 44e:	cf 01       	movw	r24, r30
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>

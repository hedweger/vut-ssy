
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00001b90  00001c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000172a  00800234  00800234  00001c58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000063df  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d12  00000000  00000000  000084ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026d0  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  0000d8d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f52  00000000  00000000  0000e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000256e  00000000  00000000  00010242  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  000127b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c1       	rjmp	.+786    	; 0x348 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	10 c2       	rjmp	.+1056   	; 0x4b2 <__vector_36>
      92:	00 00       	nop
      94:	f2 c1       	rjmp	.+996    	; 0x47a <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c1       	rjmp	.+636    	; 0x326 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e0 e9       	ldi	r30, 0x90	; 144
     14c:	fb e1       	ldi	r31, 0x1B	; 27
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 33       	cpi	r26, 0x34	; 52
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	29 e1       	ldi	r18, 0x19	; 25
     160:	a4 e3       	ldi	r26, 0x34	; 52
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ae 35       	cpi	r26, 0x5E	; 94
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	9f d0       	rcall	.+318    	; 0x2ae <main>
     170:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <APP_dataConf>:
}

void APP_timerHandler(SYS_Timer_t *timer) {
	char test[] = "SYSLOG: timer is being reset";
	for (int i = 0; strlen(test); i++) {
		HAL_UartWriteByte(test[i]);
     176:	08 95       	ret

00000178 <HAL_UartBytesReceived>:
static AppMsg_t appMsg;
static uint8_t *appMsgPointer = &appMsg;
static uint8_t appMsgBuffer[NWK_MAX_PAYLOAD_SIZE - sizeof(AppMsg_t)];

void HAL_UartBytesReceived(uint16_t bytes) {
	HAL_UartWriteString(bytes);
     178:	72 c1       	rjmp	.+740    	; 0x45e <HAL_UartWriteString>
     17a:	08 95       	ret

0000017c <APP_dataRoute>:
}

void APP_dataRoute(NWK_DataInd_t *ind) {
     17c:	dc 01       	movw	r26, r24
	// if (dataReqBusy || 0 == uartBufferPtr) return;
	// just send the DATA msg back for now..
	dataReq.dstAddr = ind->srcAddr;
     17e:	8d 91       	ld	r24, X+
     180:	9c 91       	ld	r25, X
     182:	11 97       	sbiw	r26, 0x01	; 1
     184:	ec e3       	ldi	r30, 0x3C	; 60
     186:	f2 e0       	ldi	r31, 0x02	; 2
     188:	96 83       	std	Z+6, r25	; 0x06
     18a:	85 83       	std	Z+5, r24	; 0x05
	dataReq.dstEndpoint = APP_ENDPOINT;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	87 83       	std	Z+7, r24	; 0x07
	dataReq.srcEndpoint = APP_ENDPOINT;
     190:	80 87       	std	Z+8, r24	; 0x08
	dataReq.options = NWK_OPT_ENABLE_SECURITY;
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	81 87       	std	Z+9, r24	; 0x09
	dataReq.data = ind->data;
     196:	17 96       	adiw	r26, 0x07	; 7
     198:	8d 91       	ld	r24, X+
     19a:	9c 91       	ld	r25, X
     19c:	18 97       	sbiw	r26, 0x08	; 8
     19e:	93 87       	std	Z+11, r25	; 0x0b
     1a0:	82 87       	std	Z+10, r24	; 0x0a
	dataReq.size = ind->size;
     1a2:	19 96       	adiw	r26, 0x09	; 9
     1a4:	8c 91       	ld	r24, X
     1a6:	84 87       	std	Z+12, r24	; 0x0c
	dataReq.confirm = APP_dataConf;
     1a8:	8b eb       	ldi	r24, 0xBB	; 187
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	96 87       	std	Z+14, r25	; 0x0e
     1ae:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&dataReq);
     1b0:	cf 01       	movw	r24, r30
     1b2:	73 c2       	rjmp	.+1254   	; 0x69a <NWK_DataReq>
     1b4:	08 95       	ret

000001b6 <APP_dataSend>:

	uartBufferPtr = 0;
	dataReqBusy = true;
}

void APP_dataSend(AppMsgType_t msgType, uint8_t addr) {
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	1f 92       	push	r1
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
	uint8_t dummy = 69;
     1c0:	95 e4       	ldi	r25, 0x45	; 69
     1c2:	99 83       	std	Y+1, r25	; 0x01
	appMsg.msgType = msgType;
     1c4:	e4 e3       	ldi	r30, 0x34	; 52
     1c6:	f2 e0       	ldi	r31, 0x02	; 2
     1c8:	85 83       	std	Z+5, r24	; 0x05
	appMsg.data = &dummy;
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	97 83       	std	Z+7, r25	; 0x07
     1d0:	86 83       	std	Z+6, r24	; 0x06

	dataReq.dstAddr = addr;
     1d2:	8c e3       	ldi	r24, 0x3C	; 60
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	76 83       	std	Z+6, r23	; 0x06
     1dc:	65 83       	std	Z+5, r22	; 0x05
	dataReq.dstEndpoint = APP_ENDPOINT;
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	27 83       	std	Z+7, r18	; 0x07
	dataReq.srcEndpoint = APP_ENDPOINT;
     1e2:	20 87       	std	Z+8, r18	; 0x08
	dataReq.options = NWK_OPT_ENABLE_SECURITY;
     1e4:	22 e0       	ldi	r18, 0x02	; 2
     1e6:	21 87       	std	Z+9, r18	; 0x09
	dataReq.size = sizeof(appMsg);
     1e8:	28 e0       	ldi	r18, 0x08	; 8
     1ea:	24 87       	std	Z+12, r18	; 0x0c
	memcpy(dataReq.data, &appMsg, sizeof(appMsg));
     1ec:	a2 85       	ldd	r26, Z+10	; 0x0a
     1ee:	b3 85       	ldd	r27, Z+11	; 0x0b
     1f0:	e4 e3       	ldi	r30, 0x34	; 52
     1f2:	f2 e0       	ldi	r31, 0x02	; 2
     1f4:	01 90       	ld	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	2a 95       	dec	r18
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <APP_dataSend+0x3e>
	dataReq.confirm = APP_dataConf;
     1fc:	2b eb       	ldi	r18, 0xBB	; 187
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	fc 01       	movw	r30, r24
     202:	36 87       	std	Z+14, r19	; 0x0e
     204:	25 87       	std	Z+13, r18	; 0x0d
	NWK_DataReq(&dataReq);
     206:	49 d2       	rcall	.+1170   	; 0x69a <NWK_DataReq>

	uartBufferPtr = 0;
	dataReqBusy = true;
}
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <APP_dataRecv>:

bool APP_dataRecv(NWK_DataInd_t *ind) {
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	8c 01       	movw	r16, r24
	AppMsg_t *recv;
	memcpy(recv, ind->data, ind->size);
     21a:	fc 01       	movw	r30, r24
     21c:	41 85       	ldd	r20, Z+9	; 0x09
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	67 81       	ldd	r22, Z+7	; 0x07
     222:	70 85       	ldd	r23, Z+8	; 0x08
     224:	c0 e0       	ldi	r28, 0x00	; 0
     226:	d0 e0       	ldi	r29, 0x00	; 0
     228:	ce 01       	movw	r24, r28
     22a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <memcpy>

	switch (recv->msgType) {
     22e:	cd 81       	ldd	r28, Y+5	; 0x05
     230:	c6 30       	cpi	r28, 0x06	; 6
     232:	b9 f0       	breq	.+46     	; 0x262 <APP_dataRecv+0x52>
     234:	28 f4       	brcc	.+10     	; 0x240 <APP_dataRecv+0x30>
     236:	c2 30       	cpi	r28, 0x02	; 2
     238:	51 f0       	breq	.+20     	; 0x24e <APP_dataRecv+0x3e>
     23a:	c4 30       	cpi	r28, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <APP_dataRecv+0x48>
     23e:	1b c0       	rjmp	.+54     	; 0x276 <APP_dataRecv+0x66>
     240:	c7 30       	cpi	r28, 0x07	; 7
     242:	a1 f0       	breq	.+40     	; 0x26c <APP_dataRecv+0x5c>
     244:	c9 30       	cpi	r28, 0x09	; 9
     246:	b9 f4       	brne	.+46     	; 0x276 <APP_dataRecv+0x66>
		case DATA:
		APP_dataRoute(ind);
     248:	c8 01       	movw	r24, r16
     24a:	98 df       	rcall	.-208    	; 0x17c <APP_dataRoute>
		break;
     24c:	19 c0       	rjmp	.+50     	; 0x280 <APP_dataRecv+0x70>
		case DISCOVER:
		APP_dataSend(OFFER, ind->srcAddr);
     24e:	f8 01       	movw	r30, r16
     250:	60 81       	ld	r22, Z
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	b0 df       	rcall	.-160    	; 0x1b6 <APP_dataSend>
		break;
     256:	14 c0       	rjmp	.+40     	; 0x280 <APP_dataRecv+0x70>
		case DECLINE:
		APP_dataSend(OFFER, ind->srcAddr);
     258:	f8 01       	movw	r30, r16
     25a:	60 81       	ld	r22, Z
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	ab df       	rcall	.-170    	; 0x1b6 <APP_dataSend>
		break;
     260:	0f c0       	rjmp	.+30     	; 0x280 <APP_dataRecv+0x70>
		case RELEASE:
		APP_dataSend(ACK, ind->srcAddr);
     262:	f8 01       	movw	r30, r16
     264:	60 81       	ld	r22, Z
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	a6 df       	rcall	.-180    	; 0x1b6 <APP_dataSend>
		break;
		case INFORM:
		APP_dataSend(INFORM, ind->srcAddr);
     26a:	0a c0       	rjmp	.+20     	; 0x280 <APP_dataRecv+0x70>
     26c:	f8 01       	movw	r30, r16
     26e:	60 81       	ld	r22, Z
     270:	87 e0       	ldi	r24, 0x07	; 7
		break;
		default:
		HAL_UartWriteString("Unknown msg type: ");
     272:	a1 df       	rcall	.-190    	; 0x1b6 <APP_dataSend>
     274:	05 c0       	rjmp	.+10     	; 0x280 <APP_dataRecv+0x70>
     276:	81 e2       	ldi	r24, 0x21	; 33
     278:	92 e0       	ldi	r25, 0x02	; 2
		HAL_UartWriteByte(recv->msgType);
     27a:	f1 d0       	rcall	.+482    	; 0x45e <HAL_UartWriteString>
     27c:	8c 2f       	mov	r24, r28
     27e:	c8 d0       	rcall	.+400    	; 0x410 <HAL_UartWriteByte>
	}
	HAL_UartWriteByte('\n');
	#endif

	return true;
}
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <APP_init>:
	}
	(void)timer;
}

void APP_init(void) {
	NWK_SetAddr(APP_ADDR);
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	c1 d1       	rcall	.+898    	; 0x614 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
     292:	80 e8       	ldi	r24, 0x80	; 128
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	c5 d1       	rcall	.+906    	; 0x622 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	0e 94 35 0b 	call	0x166a	; 0x166a <PHY_SetChannel>
	PHY_SetRxState(true);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 31 0b 	call	0x1662	; 0x1662 <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, APP_dataRecv);
     2a4:	68 e0       	ldi	r22, 0x08	; 8
     2a6:	71 e0       	ldi	r23, 0x01	; 1
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	c2 c1       	rjmp	.+900    	; 0x630 <NWK_OpenEndpoint>
     2ac:	08 95       	ret

000002ae <main>:
		break;
	}
}

int main(void) {
	SYS_Init();
     2ae:	0e 94 06 0c 	call	0x180c	; 0x180c <SYS_Init>
	HAL_UartInit(38400);
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	76 e9       	ldi	r23, 0x96	; 150
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	55 d0       	rcall	.+170    	; 0x366 <HAL_UartInit>

static void APP_TaskHandler(void) {
	switch (appState) {
		case INIT: {
			APP_init();
			appState = IDLE;
     2bc:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	SYS_Init();
	HAL_UartInit(38400);

	while (1) {
		SYS_TaskHandler();
     2be:	0e 94 0d 0c 	call	0x181a	; 0x181a <SYS_TaskHandler>
		HAL_UartTaskHandler();
     2c2:	4e d1       	rcall	.+668    	; 0x560 <HAL_UartTaskHandler>
#include "sys.h"

static AppState_t appState;

static void APP_TaskHandler(void) {
	switch (appState) {
     2c4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <appState>
     2c8:	81 11       	cpse	r24, r1
		case INIT: {
			APP_init();
     2ca:	f9 cf       	rjmp	.-14     	; 0x2be <main+0x10>
     2cc:	df df       	rcall	.-66     	; 0x28c <APP_init>
			appState = IDLE;
     2ce:	c0 93 4d 02 	sts	0x024D, r28	; 0x80024d <appState>
     2d2:	f5 cf       	rjmp	.-22     	; 0x2be <main+0x10>

000002d4 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     2d4:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	a8 95       	wdr
     2dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     2e0:	88 61       	ori	r24, 0x18	; 24
     2e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     2e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     2ea:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     2ec:	e1 e6       	ldi	r30, 0x61	; 97
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	80 83       	st	Z, r24
  CLKPR = 0;
     2f4:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     2f6:	78 94       	sei

  HAL_TimerInit();
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <HAL_TimerInit>
     2fa:	08 95       	ret

000002fc <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     2fc:	10 92 35 19 	sts	0x1935, r1	; 0x801935 <halTimerIrqCount>
     300:	80 e1       	ldi	r24, 0x10	; 16
     302:	97 e2       	ldi	r25, 0x27	; 39
     304:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     308:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     30c:	e1 ea       	ldi	r30, 0xA1	; 161
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	88 e0       	ldi	r24, 0x08	; 8
     312:	80 83       	st	Z, r24
     314:	80 81       	ld	r24, Z
     316:	82 60       	ori	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
     31a:	e2 e7       	ldi	r30, 0x72	; 114
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	82 60       	ori	r24, 0x02	; 2
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	8f 93       	push	r24
  halTimerIrqCount++;
     332:	80 91 35 19 	lds	r24, 0x1935	; 0x801935 <halTimerIrqCount>
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 35 19 	sts	0x1935, r24	; 0x801935 <halTimerIrqCount>
}
     33c:	8f 91       	pop	r24
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	8f 93       	push	r24
  halSleepTimerEvent = true;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <halSleepTimerEvent>
}
     35a:	8f 91       	pop	r24
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <HAL_UartInit>:
    rxFifo.bytes--;
  ATOMIC_SECTION_LEAVE
  PRAGMA(diag_default=Pa082);

  return byte;
}
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	aa 1f       	adc	r26, r26
     370:	bb 1f       	adc	r27, r27
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	aa 1f       	adc	r26, r26
     378:	bb 1f       	adc	r27, r27
     37a:	9c 01       	movw	r18, r24
     37c:	ad 01       	movw	r20, r26
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	44 1f       	adc	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	22 0f       	add	r18, r18
     388:	33 1f       	adc	r19, r19
     38a:	44 1f       	adc	r20, r20
     38c:	55 1f       	adc	r21, r21
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	74 e2       	ldi	r23, 0x24	; 36
     392:	84 ef       	ldi	r24, 0xF4	; 244
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__udivmodsi4>
     39a:	ba 01       	movw	r22, r20
     39c:	a9 01       	movw	r20, r18
     39e:	41 50       	subi	r20, 0x01	; 1
     3a0:	51 09       	sbc	r21, r1
     3a2:	61 09       	sbc	r22, r1
     3a4:	71 09       	sbc	r23, r1
     3a6:	bb 27       	eor	r27, r27
     3a8:	a7 2f       	mov	r26, r23
     3aa:	96 2f       	mov	r25, r22
     3ac:	85 2f       	mov	r24, r21
     3ae:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     3b2:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     3bc:	88 e9       	ldi	r24, 0x98	; 152
     3be:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     3c8:	ed e7       	ldi	r30, 0x7D	; 125
     3ca:	f5 e0       	ldi	r31, 0x05	; 5
     3cc:	8c ee       	ldi	r24, 0xEC	; 236
     3ce:	93 e0       	ldi	r25, 0x03	; 3
     3d0:	91 87       	std	Z+9, r25	; 0x09
     3d2:	80 87       	std	Z+8, r24	; 0x08
     3d4:	80 e9       	ldi	r24, 0x90	; 144
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	95 83       	std	Z+5, r25	; 0x05
     3da:	84 83       	std	Z+4, r24	; 0x04
     3dc:	17 82       	std	Z+7, r1	; 0x07
     3de:	16 82       	std	Z+6, r1	; 0x06
     3e0:	11 82       	std	Z+1, r1	; 0x01
     3e2:	10 82       	st	Z, r1
     3e4:	13 82       	std	Z+3, r1	; 0x03
     3e6:	12 82       	std	Z+2, r1	; 0x02
     3e8:	e2 ee       	ldi	r30, 0xE2	; 226
     3ea:	f3 e0       	ldi	r31, 0x03	; 3
     3ec:	21 e5       	ldi	r18, 0x51	; 81
     3ee:	32 e0       	ldi	r19, 0x02	; 2
     3f0:	31 87       	std	Z+9, r19	; 0x09
     3f2:	20 87       	std	Z+8, r18	; 0x08
     3f4:	95 83       	std	Z+5, r25	; 0x05
     3f6:	84 83       	std	Z+4, r24	; 0x04
     3f8:	17 82       	std	Z+7, r1	; 0x07
     3fa:	16 82       	std	Z+6, r1	; 0x06
     3fc:	11 82       	std	Z+1, r1	; 0x01
     3fe:	10 82       	st	Z, r1
     400:	13 82       	std	Z+3, r1	; 0x03
     402:	12 82       	std	Z+2, r1	; 0x02
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <udrEmpty>
     40a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <newData>
     40e:	08 95       	ret

00000410 <HAL_UartWriteByte>:
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	ed e7       	ldi	r30, 0x7D	; 125
     416:	f5 e0       	ldi	r31, 0x05	; 5
     418:	26 81       	ldd	r18, Z+6	; 0x06
     41a:	37 81       	ldd	r19, Z+7	; 0x07
     41c:	64 81       	ldd	r22, Z+4	; 0x04
     41e:	75 81       	ldd	r23, Z+5	; 0x05
     420:	26 17       	cp	r18, r22
     422:	37 07       	cpc	r19, r23
     424:	c9 f0       	breq	.+50     	; 0x458 <HAL_UartWriteByte+0x48>
     426:	c0 85       	ldd	r28, Z+8	; 0x08
     428:	d1 85       	ldd	r29, Z+9	; 0x09
     42a:	42 81       	ldd	r20, Z+2	; 0x02
     42c:	53 81       	ldd	r21, Z+3	; 0x03
     42e:	da 01       	movw	r26, r20
     430:	11 96       	adiw	r26, 0x01	; 1
     432:	b3 83       	std	Z+3, r27	; 0x03
     434:	a2 83       	std	Z+2, r26	; 0x02
     436:	fe 01       	movw	r30, r28
     438:	e4 0f       	add	r30, r20
     43a:	f5 1f       	adc	r31, r21
     43c:	80 83       	st	Z, r24
     43e:	6a 17       	cp	r22, r26
     440:	7b 07       	cpc	r23, r27
     442:	21 f4       	brne	.+8      	; 0x44c <HAL_UartWriteByte+0x3c>
     444:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <txFifo+0x3>
     448:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <txFifo+0x2>
     44c:	2f 5f       	subi	r18, 0xFF	; 255
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	30 93 84 05 	sts	0x0584, r19	; 0x800584 <txFifo+0x7>
     454:	20 93 83 05 	sts	0x0583, r18	; 0x800583 <txFifo+0x6>
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <HAL_UartWriteString>:
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
     464:	88 81       	ld	r24, Y
     466:	88 23       	and	r24, r24
     468:	29 f0       	breq	.+10     	; 0x474 <HAL_UartWriteString+0x16>
     46a:	21 96       	adiw	r28, 0x01	; 1
     46c:	d1 df       	rcall	.-94     	; 0x410 <HAL_UartWriteByte>
     46e:	89 91       	ld	r24, Y+
     470:	81 11       	cpse	r24, r1
     472:	fc cf       	rjmp	.-8      	; 0x46c <HAL_UartWriteString+0xe>
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	0b b6       	in	r0, 0x3b	; 59
     486:	0f 92       	push	r0
     488:	8f 93       	push	r24
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
  udrEmpty = true;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     494:	e9 ec       	ldi	r30, 0xC9	; 201
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	8f 7d       	andi	r24, 0xDF	; 223
     49c:	80 83       	st	Z, r24
}
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	8f 91       	pop	r24
     4a4:	0f 90       	pop	r0
     4a6:	0b be       	out	0x3b, r0	; 59
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	0b b6       	in	r0, 0x3b	; 59
     4be:	0f 92       	push	r0
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     4d8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     4dc:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     4e0:	8c 71       	andi	r24, 0x1C	; 28
     4e2:	59 f5       	brne	.+86     	; 0x53a <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     4e4:	e2 ee       	ldi	r30, 0xE2	; 226
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	46 81       	ldd	r20, Z+6	; 0x06
     4ea:	57 81       	ldd	r21, Z+7	; 0x07
     4ec:	84 81       	ldd	r24, Z+4	; 0x04
     4ee:	95 81       	ldd	r25, Z+5	; 0x05
     4f0:	48 17       	cp	r20, r24
     4f2:	59 07       	cpc	r21, r25
     4f4:	11 f1       	breq	.+68     	; 0x53a <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     4f6:	40 85       	ldd	r20, Z+8	; 0x08
     4f8:	51 85       	ldd	r21, Z+9	; 0x09
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	93 81       	ldd	r25, Z+3	; 0x03
     4fe:	bc 01       	movw	r22, r24
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	73 83       	std	Z+3, r23	; 0x03
     506:	62 83       	std	Z+2, r22	; 0x02
     508:	da 01       	movw	r26, r20
     50a:	a8 0f       	add	r26, r24
     50c:	b9 1f       	adc	r27, r25
     50e:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     510:	22 81       	ldd	r18, Z+2	; 0x02
     512:	33 81       	ldd	r19, Z+3	; 0x03
     514:	84 81       	ldd	r24, Z+4	; 0x04
     516:	95 81       	ldd	r25, Z+5	; 0x05
     518:	28 17       	cp	r18, r24
     51a:	39 07       	cpc	r19, r25
     51c:	21 f4       	brne	.+8      	; 0x526 <__vector_36+0x74>
      rxFifo.tail = 0;
     51e:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <rxFifo+0x3>
     522:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <rxFifo+0x2>
    rxFifo.bytes++;
     526:	e2 ee       	ldi	r30, 0xE2	; 226
     528:	f3 e0       	ldi	r31, 0x03	; 3
     52a:	86 81       	ldd	r24, Z+6	; 0x06
     52c:	97 81       	ldd	r25, Z+7	; 0x07
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	97 83       	std	Z+7, r25	; 0x07
     532:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	7f 91       	pop	r23
     548:	6f 91       	pop	r22
     54a:	5f 91       	pop	r21
     54c:	4f 91       	pop	r20
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0b be       	out	0x3b, r0	; 59
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     560:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <txFifo+0x6>
     564:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <txFifo+0x7>
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	69 f1       	breq	.+90     	; 0x5c6 <HAL_UartTaskHandler+0x66>
     56c:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <udrEmpty>
     570:	22 23       	and	r18, r18
     572:	49 f1       	breq	.+82     	; 0x5c6 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     574:	ed e7       	ldi	r30, 0x7D	; 125
     576:	f5 e0       	ldi	r31, 0x05	; 5
     578:	60 85       	ldd	r22, Z+8	; 0x08
     57a:	71 85       	ldd	r23, Z+9	; 0x09
     57c:	20 81       	ld	r18, Z
     57e:	31 81       	ldd	r19, Z+1	; 0x01
     580:	a9 01       	movw	r20, r18
     582:	4f 5f       	subi	r20, 0xFF	; 255
     584:	5f 4f       	sbci	r21, 0xFF	; 255
     586:	51 83       	std	Z+1, r21	; 0x01
     588:	40 83       	st	Z, r20
     58a:	db 01       	movw	r26, r22
     58c:	a2 0f       	add	r26, r18
     58e:	b3 1f       	adc	r27, r19
     590:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     592:	64 81       	ldd	r22, Z+4	; 0x04
     594:	75 81       	ldd	r23, Z+5	; 0x05
     596:	46 17       	cp	r20, r22
     598:	57 07       	cpc	r21, r23
     59a:	21 f4       	brne	.+8      	; 0x5a4 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     59c:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <txFifo+0x1>
     5a0:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <txFifo>
    txFifo.bytes--;
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <txFifo+0x7>
     5aa:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     5ae:	9f b7       	in	r25, 0x3f	; 63
     5b0:	f8 94       	cli
      UDRx = byte;
     5b2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     5b6:	e9 ec       	ldi	r30, 0xC9	; 201
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	80 62       	ori	r24, 0x20	; 32
     5be:	80 83       	st	Z, r24
      udrEmpty = false;
     5c0:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     5c4:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     5c6:	2f b7       	in	r18, 0x3f	; 63
     5c8:	f8 94       	cli
      new = newData;
     5ca:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <newData>
      newData = false;
     5ce:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <newData>
      bytes = rxFifo.bytes;
     5d2:	40 91 e8 03 	lds	r20, 0x03E8	; 0x8003e8 <rxFifo+0x6>
     5d6:	50 91 e9 03 	lds	r21, 0x03E9	; 0x8003e9 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     5da:	2f bf       	out	0x3f, r18	; 63

    if (new)
     5dc:	99 23       	and	r25, r25
     5de:	11 f0       	breq	.+4      	; 0x5e4 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     5e0:	ca 01       	movw	r24, r20
     5e2:	ca cd       	rjmp	.-1132   	; 0x178 <HAL_UartBytesReceived>
     5e4:	08 95       	ret

000005e6 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     5e6:	e6 e3       	ldi	r30, 0x36	; 54
     5e8:	f9 e1       	ldi	r31, 0x19	; 25
     5ea:	14 82       	std	Z+4, r1	; 0x04
     5ec:	15 82       	std	Z+5, r1	; 0x05
     5ee:	11 82       	std	Z+1, r1	; 0x01
     5f0:	10 82       	st	Z, r1
     5f2:	17 a2       	std	Z+39, r1	; 0x27
     5f4:	16 a2       	std	Z+38, r1	; 0x26
     5f6:	ec e3       	ldi	r30, 0x3C	; 60
     5f8:	f9 e1       	ldi	r31, 0x19	; 25
     5fa:	8c e5       	ldi	r24, 0x5C	; 92
     5fc:	99 e1       	ldi	r25, 0x19	; 25
     5fe:	11 92       	st	Z+, r1
     600:	11 92       	st	Z+, r1
     602:	e8 17       	cp	r30, r24
     604:	f9 07       	cpc	r31, r25
     606:	d9 f7       	brne	.-10     	; 0x5fe <NWK_Init+0x18>
     608:	42 d6       	rcall	.+3204   	; 0x128e <nwkTxInit>
     60a:	60 d3       	rcall	.+1728   	; 0xccc <nwkRxInit>
     60c:	0d d1       	rcall	.+538    	; 0x828 <nwkFrameInit>
     60e:	40 d0       	rcall	.+128    	; 0x690 <nwkDataReqInit>
     610:	92 c1       	rjmp	.+804    	; 0x936 <nwkRouteInit>
     612:	08 95       	ret

00000614 <NWK_SetAddr>:
     614:	90 93 37 19 	sts	0x1937, r25	; 0x801937 <nwkIb+0x1>
     618:	80 93 36 19 	sts	0x1936, r24	; 0x801936 <nwkIb>
     61c:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <PHY_SetShortAddr>
     620:	08 95       	ret

00000622 <NWK_SetPanId>:
     622:	90 93 39 19 	sts	0x1939, r25	; 0x801939 <nwkIb+0x3>
     626:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <nwkIb+0x2>
     62a:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <PHY_SetPanId>
     62e:	08 95       	ret

00000630 <NWK_OpenEndpoint>:
     630:	e8 2f       	mov	r30, r24
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	e4 5c       	subi	r30, 0xC4	; 196
     63a:	f6 4e       	sbci	r31, 0xE6	; 230
     63c:	71 83       	std	Z+1, r23	; 0x01
     63e:	60 83       	st	Z, r22
     640:	08 95       	ret

00000642 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     642:	8b d3       	rcall	.+1814   	; 0xd5a <nwkRxTaskHandler>
  nwkTxTaskHandler();
     644:	20 d7       	rcall	.+3648   	; 0x1486 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     646:	4d c0       	rjmp	.+154    	; 0x6e2 <nwkDataReqTaskHandler>
     648:	08 95       	ret

0000064a <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     64a:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <nwkDataReqQueue>
     64e:	f0 91 88 05 	lds	r31, 0x0588	; 0x800588 <nwkDataReqQueue+0x1>
     652:	30 97       	sbiw	r30, 0x00	; 0
     654:	d9 f0       	breq	.+54     	; 0x68c <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     656:	22 81       	ldd	r18, Z+2	; 0x02
     658:	33 81       	ldd	r19, Z+3	; 0x03
     65a:	82 17       	cp	r24, r18
     65c:	93 07       	cpc	r25, r19
     65e:	89 f4       	brne	.+34     	; 0x682 <nwkDataReqTxConf+0x38>
     660:	05 c0       	rjmp	.+10     	; 0x66c <nwkDataReqTxConf+0x22>
     662:	22 81       	ldd	r18, Z+2	; 0x02
     664:	33 81       	ldd	r19, Z+3	; 0x03
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	59 f4       	brne	.+22     	; 0x682 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     66c:	dc 01       	movw	r26, r24
     66e:	ad 57       	subi	r26, 0x7D	; 125
     670:	bf 4f       	sbci	r27, 0xFF	; 255
     672:	2c 91       	ld	r18, X
     674:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     676:	13 96       	adiw	r26, 0x03	; 3
     678:	2c 91       	ld	r18, X
     67a:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     67c:	22 e0       	ldi	r18, 0x02	; 2
     67e:	24 83       	std	Z+4, r18	; 0x04
      break;
     680:	05 c0       	rjmp	.+10     	; 0x68c <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     682:	01 90       	ld	r0, Z+
     684:	f0 81       	ld	r31, Z
     686:	e0 2d       	mov	r30, r0
     688:	30 97       	sbiw	r30, 0x00	; 0
     68a:	59 f7       	brne	.-42     	; 0x662 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     68c:	11 c1       	rjmp	.+546    	; 0x8b0 <nwkFrameFree>
     68e:	08 95       	ret

00000690 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     690:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <nwkDataReqQueue+0x1>
     694:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <nwkDataReqQueue>
     698:	08 95       	ret

0000069a <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     69a:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     69c:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     69e:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     6a0:	13 82       	std	Z+3, r1	; 0x03
     6a2:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     6a4:	a6 e3       	ldi	r26, 0x36	; 54
     6a6:	b9 e1       	ldi	r27, 0x19	; 25
     6a8:	96 96       	adiw	r26, 0x26	; 38
     6aa:	8d 91       	ld	r24, X+
     6ac:	9c 91       	ld	r25, X
     6ae:	97 97       	sbiw	r26, 0x27	; 39
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	97 96       	adiw	r26, 0x27	; 39
     6b4:	9c 93       	st	X, r25
     6b6:	8e 93       	st	-X, r24
     6b8:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     6ba:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <nwkDataReqQueue>
     6be:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <nwkDataReqQueue+0x1>
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     6c6:	11 82       	std	Z+1, r1	; 0x01
     6c8:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     6ca:	f0 93 88 05 	sts	0x0588, r31	; 0x800588 <nwkDataReqQueue+0x1>
     6ce:	e0 93 87 05 	sts	0x0587, r30	; 0x800587 <nwkDataReqQueue>
     6d2:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     6d4:	91 83       	std	Z+1, r25	; 0x01
     6d6:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     6d8:	f0 93 88 05 	sts	0x0588, r31	; 0x800588 <nwkDataReqQueue+0x1>
     6dc:	e0 93 87 05 	sts	0x0587, r30	; 0x800587 <nwkDataReqQueue>
     6e0:	08 95       	ret

000006e2 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6ea:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <nwkDataReqQueue>
     6ee:	f0 91 88 05 	lds	r31, 0x0588	; 0x800588 <nwkDataReqQueue+0x1>
     6f2:	30 97       	sbiw	r30, 0x00	; 0
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <nwkDataReqTaskHandler+0x16>
     6f6:	93 c0       	rjmp	.+294    	; 0x81e <nwkDataReqTaskHandler+0x13c>
     6f8:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     6fa:	8c 81       	ldd	r24, Y+4	; 0x04
     6fc:	88 23       	and	r24, r24
     6fe:	21 f0       	breq	.+8      	; 0x708 <nwkDataReqTaskHandler+0x26>
     700:	82 30       	cpi	r24, 0x02	; 2
     702:	09 f4       	brne	.+2      	; 0x706 <nwkDataReqTaskHandler+0x24>
     704:	66 c0       	rjmp	.+204    	; 0x7d2 <nwkDataReqTaskHandler+0xf0>
     706:	85 c0       	rjmp	.+266    	; 0x812 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     708:	9a d0       	rcall	.+308    	; 0x83e <nwkFrameAlloc>
     70a:	8c 01       	movw	r16, r24
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	21 f4       	brne	.+8      	; 0x718 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     714:	8f 87       	std	Y+15, r24	; 0x0f
     716:	83 c0       	rjmp	.+262    	; 0x81e <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     718:	9b 83       	std	Y+3, r25	; 0x03
     71a:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     720:	f8 01       	movw	r30, r16
     722:	e9 57       	subi	r30, 0x79	; 121
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	85 e2       	ldi	r24, 0x25	; 37
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	91 83       	std	Z+1, r25	; 0x01
     72c:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     72e:	31 97       	sbiw	r30, 0x01	; 1
     730:	89 85       	ldd	r24, Y+9	; 0x09
     732:	82 fb       	bst	r24, 2
     734:	88 27       	eor	r24, r24
     736:	80 f9       	bld	r24, 0
     738:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     73a:	99 85       	ldd	r25, Y+9	; 0x09
     73c:	d8 01       	movw	r26, r16
     73e:	1b 96       	adiw	r26, 0x0b	; 11
     740:	8c 91       	ld	r24, X
     742:	1b 97       	sbiw	r26, 0x0b	; 11
     744:	90 fb       	bst	r25, 0
     746:	80 f9       	bld	r24, 0
     748:	1b 96       	adiw	r26, 0x0b	; 11
     74a:	8c 93       	st	X, r24
     74c:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     74e:	99 85       	ldd	r25, Y+9	; 0x09
     750:	93 fb       	bst	r25, 3
     752:	99 27       	eor	r25, r25
     754:	90 f9       	bld	r25, 0
     756:	90 fb       	bst	r25, 0
     758:	82 f9       	bld	r24, 2
     75a:	1b 96       	adiw	r26, 0x0b	; 11
     75c:	8c 93       	st	X, r24
     75e:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     760:	e6 e3       	ldi	r30, 0x36	; 54
     762:	f9 e1       	ldi	r31, 0x19	; 25
     764:	84 81       	ldd	r24, Z+4	; 0x04
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	84 83       	std	Z+4, r24	; 0x04
     76a:	1c 96       	adiw	r26, 0x0c	; 12
     76c:	8c 93       	st	X, r24
     76e:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	1e 96       	adiw	r26, 0x0e	; 14
     776:	9c 93       	st	X, r25
     778:	8e 93       	st	-X, r24
     77a:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     77c:	8d 81       	ldd	r24, Y+5	; 0x05
     77e:	9e 81       	ldd	r25, Y+6	; 0x06
     780:	50 96       	adiw	r26, 0x10	; 16
     782:	9c 93       	st	X, r25
     784:	8e 93       	st	-X, r24
     786:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     788:	88 85       	ldd	r24, Y+8	; 0x08
     78a:	98 2f       	mov	r25, r24
     78c:	9f 70       	andi	r25, 0x0F	; 15
     78e:	51 96       	adiw	r26, 0x11	; 17
     790:	8c 91       	ld	r24, X
     792:	51 97       	sbiw	r26, 0x11	; 17
     794:	80 7f       	andi	r24, 0xF0	; 240
     796:	89 2b       	or	r24, r25
     798:	51 96       	adiw	r26, 0x11	; 17
     79a:	8c 93       	st	X, r24
     79c:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     79e:	9f 81       	ldd	r25, Y+7	; 0x07
     7a0:	92 95       	swap	r25
     7a2:	90 7f       	andi	r25, 0xF0	; 240
     7a4:	8f 70       	andi	r24, 0x0F	; 15
     7a6:	89 2b       	or	r24, r25
     7a8:	51 96       	adiw	r26, 0x11	; 17
     7aa:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     7ac:	f8 01       	movw	r30, r16
     7ae:	ef 57       	subi	r30, 0x7F	; 127
     7b0:	ff 4f       	sbci	r31, 0xFF	; 255
     7b2:	4c 85       	ldd	r20, Y+12	; 0x0c
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	6a 85       	ldd	r22, Y+10	; 0x0a
     7b8:	7b 85       	ldd	r23, Y+11	; 0x0b
     7ba:	80 81       	ld	r24, Z
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <memcpy>
  frame->size += req->size;
     7c2:	f8 01       	movw	r30, r16
     7c4:	91 81       	ldd	r25, Z+1	; 0x01
     7c6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c8:	89 0f       	add	r24, r25
     7ca:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     7cc:	c8 01       	movw	r24, r16
     7ce:	82 d5       	rcall	.+2820   	; 0x12d4 <nwkTxFrame>
     7d0:	26 c0       	rjmp	.+76     	; 0x81e <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     7d2:	ec 17       	cp	r30, r28
     7d4:	fd 07       	cpc	r31, r29
     7d6:	41 f4       	brne	.+16     	; 0x7e8 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     7d8:	80 81       	ld	r24, Z
     7da:	91 81       	ldd	r25, Z+1	; 0x01
     7dc:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <nwkDataReqQueue+0x1>
     7e0:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <nwkDataReqQueue>
     7e4:	0a c0       	rjmp	.+20     	; 0x7fa <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     7e6:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	8c 17       	cp	r24, r28
     7ee:	9d 07       	cpc	r25, r29
     7f0:	d1 f7       	brne	.-12     	; 0x7e6 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     7f2:	88 81       	ld	r24, Y
     7f4:	99 81       	ldd	r25, Y+1	; 0x01
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     7fa:	e6 e3       	ldi	r30, 0x36	; 54
     7fc:	f9 e1       	ldi	r31, 0x19	; 25
     7fe:	86 a1       	ldd	r24, Z+38	; 0x26
     800:	97 a1       	ldd	r25, Z+39	; 0x27
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	97 a3       	std	Z+39, r25	; 0x27
     806:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     808:	ed 85       	ldd	r30, Y+13	; 0x0d
     80a:	fe 85       	ldd	r31, Y+14	; 0x0e
     80c:	ce 01       	movw	r24, r28
     80e:	19 95       	eicall
     810:	06 c0       	rjmp	.+12     	; 0x81e <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     812:	09 90       	ld	r0, Y+
     814:	d8 81       	ld	r29, Y
     816:	c0 2d       	mov	r28, r0
     818:	20 97       	sbiw	r28, 0x00	; 0
     81a:	09 f0       	breq	.+2      	; 0x81e <nwkDataReqTaskHandler+0x13c>
     81c:	6e cf       	rjmp	.-292    	; 0x6fa <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     828:	e9 e8       	ldi	r30, 0x89	; 137
     82a:	f5 e0       	ldi	r31, 0x05	; 5
     82c:	87 e9       	ldi	r24, 0x97	; 151
     82e:	95 e1       	ldi	r25, 0x15	; 21
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     830:	10 82       	st	Z, r1
     832:	e7 57       	subi	r30, 0x77	; 119
     834:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     836:	e8 17       	cp	r30, r24
     838:	f9 07       	cpc	r31, r25
     83a:	d1 f7       	brne	.-12     	; 0x830 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     83c:	08 95       	ret

0000083e <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     83e:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <nwkFrameFrames>
     842:	88 23       	and	r24, r24
     844:	59 f0       	breq	.+22     	; 0x85c <nwkFrameAlloc+0x1e>
     846:	e2 e1       	ldi	r30, 0x12	; 18
     848:	f6 e0       	ldi	r31, 0x06	; 6
     84a:	67 e9       	ldi	r22, 0x97	; 151
     84c:	75 e1       	ldi	r23, 0x15	; 21
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	ac 01       	movw	r20, r24
     854:	20 81       	ld	r18, Z
     856:	21 11       	cpse	r18, r1
     858:	22 c0       	rjmp	.+68     	; 0x89e <nwkFrameAlloc+0x60>
     85a:	02 c0       	rjmp	.+4      	; 0x860 <nwkFrameAlloc+0x22>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     860:	69 e8       	ldi	r22, 0x89	; 137
     862:	64 9f       	mul	r22, r20
     864:	90 01       	movw	r18, r0
     866:	65 9f       	mul	r22, r21
     868:	30 0d       	add	r19, r0
     86a:	11 24       	eor	r1, r1
     86c:	c9 01       	movw	r24, r18
     86e:	87 57       	subi	r24, 0x77	; 119
     870:	9a 4f       	sbci	r25, 0xFA	; 250
     872:	fc 01       	movw	r30, r24
     874:	11 92       	st	Z+, r1
     876:	6a 95       	dec	r22
     878:	e9 f7       	brne	.-6      	; 0x874 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     87a:	40 e1       	ldi	r20, 0x10	; 16
     87c:	fc 01       	movw	r30, r24
     87e:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     880:	ef 57       	subi	r30, 0x7F	; 127
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	25 56       	subi	r18, 0x65	; 101
     886:	3a 4f       	sbci	r19, 0xFA	; 250
     888:	31 83       	std	Z+1, r19	; 0x01
     88a:	20 83       	st	Z, r18
      nwkIb.lock++;
     88c:	e6 e3       	ldi	r30, 0x36	; 54
     88e:	f9 e1       	ldi	r31, 0x19	; 25
     890:	26 a1       	ldd	r18, Z+38	; 0x26
     892:	37 a1       	ldd	r19, Z+39	; 0x27
     894:	2f 5f       	subi	r18, 0xFF	; 255
     896:	3f 4f       	sbci	r19, 0xFF	; 255
     898:	37 a3       	std	Z+39, r19	; 0x27
     89a:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     89c:	08 95       	ret
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	e7 57       	subi	r30, 0x77	; 119
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8a4:	e6 17       	cp	r30, r22
     8a6:	f7 07       	cpc	r31, r23
     8a8:	a1 f6       	brne	.-88     	; 0x852 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
}
     8ae:	08 95       	ret

000008b0 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     8b0:	fc 01       	movw	r30, r24
     8b2:	10 82       	st	Z, r1
  nwkIb.lock--;
     8b4:	e6 e3       	ldi	r30, 0x36	; 54
     8b6:	f9 e1       	ldi	r31, 0x19	; 25
     8b8:	86 a1       	ldd	r24, Z+38	; 0x26
     8ba:	97 a1       	ldd	r25, Z+39	; 0x27
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	97 a3       	std	Z+39, r25	; 0x27
     8c0:	86 a3       	std	Z+38, r24	; 0x26
     8c2:	08 95       	ret

000008c4 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	41 f0       	breq	.+16     	; 0x8d8 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     8c8:	fc 01       	movw	r30, r24
     8ca:	e7 57       	subi	r30, 0x77	; 119
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     8ce:	85 e1       	ldi	r24, 0x15	; 21
     8d0:	e7 39       	cpi	r30, 0x97	; 151
     8d2:	f8 07       	cpc	r31, r24
     8d4:	18 f0       	brcs	.+6      	; 0x8dc <nwkFrameNext+0x18>
     8d6:	12 c0       	rjmp	.+36     	; 0x8fc <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     8d8:	e9 e8       	ldi	r30, 0x89	; 137
     8da:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     8dc:	80 81       	ld	r24, Z
     8de:	88 23       	and	r24, r24
     8e0:	21 f0       	breq	.+8      	; 0x8ea <nwkFrameNext+0x26>
     8e2:	0f c0       	rjmp	.+30     	; 0x902 <nwkFrameNext+0x3e>
     8e4:	80 81       	ld	r24, Z
     8e6:	81 11       	cpse	r24, r1
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     8ea:	e7 57       	subi	r30, 0x77	; 119
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	85 e1       	ldi	r24, 0x15	; 21
     8f0:	e7 39       	cpi	r30, 0x97	; 151
     8f2:	f8 07       	cpc	r31, r24
     8f4:	b8 f3       	brcs	.-18     	; 0x8e4 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	08 95       	ret
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     902:	8e 2f       	mov	r24, r30
     904:	9f 2f       	mov	r25, r31
     906:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     908:	8e 2f       	mov	r24, r30
     90a:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     90c:	08 95       	ret

0000090e <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     90e:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     910:	dc 01       	movw	r26, r24
     912:	ad 57       	subi	r26, 0x7D	; 125
     914:	bf 4f       	sbci	r27, 0xFF	; 255
     916:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     918:	a6 e3       	ldi	r26, 0x36	; 54
     91a:	b9 e1       	ldi	r27, 0x19	; 25
     91c:	14 96       	adiw	r26, 0x04	; 4
     91e:	9c 91       	ld	r25, X
     920:	14 97       	sbiw	r26, 0x04	; 4
     922:	9f 5f       	subi	r25, 0xFF	; 255
     924:	14 96       	adiw	r26, 0x04	; 4
     926:	9c 93       	st	X, r25
     928:	14 97       	sbiw	r26, 0x04	; 4
     92a:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     92c:	8d 91       	ld	r24, X+
     92e:	9c 91       	ld	r25, X
     930:	96 87       	std	Z+14, r25	; 0x0e
     932:	85 87       	std	Z+13, r24	; 0x0d
     934:	08 95       	ret

00000936 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     936:	a8 e9       	ldi	r26, 0x98	; 152
     938:	b5 e1       	ldi	r27, 0x15	; 21
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	4f ef       	ldi	r20, 0xFF	; 255
     940:	5f ef       	ldi	r21, 0xFF	; 255
     942:	11 96       	adiw	r26, 0x01	; 1
     944:	5c 93       	st	X, r21
     946:	4e 93       	st	-X, r20
     948:	fc 01       	movw	r30, r24
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	e8 1b       	sub	r30, r24
     958:	f9 0b       	sbc	r31, r25
     95a:	e9 56       	subi	r30, 0x69	; 105
     95c:	fa 4e       	sbci	r31, 0xEA	; 234
     95e:	20 81       	ld	r18, Z
     960:	2e 7f       	andi	r18, 0xFE	; 254
     962:	20 83       	st	Z, r18
     964:	14 96       	adiw	r26, 0x04	; 4
     966:	1c 92       	st	X, r1
     968:	14 97       	sbiw	r26, 0x04	; 4
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	17 96       	adiw	r26, 0x07	; 7
     96e:	84 36       	cpi	r24, 0x64	; 100
     970:	91 05       	cpc	r25, r1
     972:	39 f7       	brne	.-50     	; 0x942 <nwkRouteInit+0xc>
     974:	08 95       	ret

00000976 <NWK_RouteFindEntry>:
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	e8 e9       	ldi	r30, 0x98	; 152
     980:	f5 e1       	ldi	r31, 0x15	; 21
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	06 2f       	mov	r16, r22
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	40 81       	ld	r20, Z
     98c:	51 81       	ldd	r21, Z+1	; 0x01
     98e:	48 17       	cp	r20, r24
     990:	59 07       	cpc	r21, r25
     992:	b1 f4       	brne	.+44     	; 0x9c0 <NWK_RouteFindEntry+0x4a>
     994:	d9 01       	movw	r26, r18
     996:	aa 0f       	add	r26, r26
     998:	bb 1f       	adc	r27, r27
     99a:	aa 0f       	add	r26, r26
     99c:	bb 1f       	adc	r27, r27
     99e:	aa 0f       	add	r26, r26
     9a0:	bb 1f       	adc	r27, r27
     9a2:	a2 1b       	sub	r26, r18
     9a4:	b3 0b       	sbc	r27, r19
     9a6:	a9 56       	subi	r26, 0x69	; 105
     9a8:	ba 4e       	sbci	r27, 0xEA	; 234
     9aa:	4c 91       	ld	r20, X
     9ac:	46 95       	lsr	r20
     9ae:	41 70       	andi	r20, 0x01	; 1
     9b0:	c4 2f       	mov	r28, r20
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	d4 2f       	mov	r29, r20
     9b6:	c0 17       	cp	r28, r16
     9b8:	d1 07       	cpc	r29, r17
     9ba:	11 f4       	brne	.+4      	; 0x9c0 <NWK_RouteFindEntry+0x4a>
     9bc:	cd 01       	movw	r24, r26
     9be:	08 c0       	rjmp	.+16     	; 0x9d0 <NWK_RouteFindEntry+0x5a>
     9c0:	2f 5f       	subi	r18, 0xFF	; 255
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	37 96       	adiw	r30, 0x07	; 7
     9c6:	24 36       	cpi	r18, 0x64	; 100
     9c8:	31 05       	cpc	r19, r1
     9ca:	f9 f6       	brne	.-66     	; 0x98a <NWK_RouteFindEntry+0x14>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <NWK_RouteNewEntry>:
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	e7 e9       	ldi	r30, 0x97	; 151
     9e0:	f5 e1       	ldi	r31, 0x15	; 21
     9e2:	80 81       	ld	r24, Z
     9e4:	80 fd       	sbrc	r24, 0
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <NWK_RouteNewEntry+0x28>
     9e8:	85 81       	ldd	r24, Z+5	; 0x05
     9ea:	88 23       	and	r24, r24
     9ec:	81 f0       	breq	.+32     	; 0xa0e <NWK_RouteNewEntry+0x34>
     9ee:	10 97       	sbiw	r26, 0x00	; 0
     9f0:	39 f0       	breq	.+14     	; 0xa00 <NWK_RouteNewEntry+0x26>
     9f2:	15 96       	adiw	r26, 0x05	; 5
     9f4:	9c 91       	ld	r25, X
     9f6:	15 97       	sbiw	r26, 0x05	; 5
     9f8:	89 17       	cp	r24, r25
     9fa:	18 f4       	brcc	.+6      	; 0xa02 <NWK_RouteNewEntry+0x28>
     9fc:	df 01       	movw	r26, r30
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <NWK_RouteNewEntry+0x28>
     a00:	df 01       	movw	r26, r30
     a02:	37 96       	adiw	r30, 0x07	; 7
     a04:	88 e1       	ldi	r24, 0x18	; 24
     a06:	e3 35       	cpi	r30, 0x53	; 83
     a08:	f8 07       	cpc	r31, r24
     a0a:	59 f7       	brne	.-42     	; 0x9e2 <NWK_RouteNewEntry+0x8>
     a0c:	fd 01       	movw	r30, r26
     a0e:	80 81       	ld	r24, Z
     a10:	8d 70       	andi	r24, 0x0D	; 13
     a12:	80 63       	ori	r24, 0x30	; 48
     a14:	80 83       	st	Z, r24
     a16:	80 e8       	ldi	r24, 0x80	; 128
     a18:	85 83       	std	Z+5, r24	; 0x05
     a1a:	cf 01       	movw	r24, r30
     a1c:	08 95       	ret

00000a1e <NWK_RouteFreeEntry>:
     a1e:	fc 01       	movw	r30, r24
     a20:	80 81       	ld	r24, Z
     a22:	80 fd       	sbrc	r24, 0
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <NWK_RouteFreeEntry+0x12>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	9f ef       	ldi	r25, 0xFF	; 255
     a2a:	92 83       	std	Z+2, r25	; 0x02
     a2c:	81 83       	std	Z+1, r24	; 0x01
     a2e:	15 82       	std	Z+5, r1	; 0x05
     a30:	08 95       	ret

00000a32 <NWK_RouteNextHop>:
     a32:	a1 df       	rcall	.-190    	; 0x976 <NWK_RouteFindEntry>
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	21 f0       	breq	.+8      	; 0xa40 <NWK_RouteNextHop+0xe>
     a38:	fc 01       	movw	r30, r24
     a3a:	83 81       	ldd	r24, Z+3	; 0x03
     a3c:	94 81       	ldd	r25, Z+4	; 0x04
     a3e:	08 95       	ret
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	9f ef       	ldi	r25, 0xFF	; 255
     a44:	08 95       	ret

00000a46 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     a46:	97 df       	rcall	.-210    	; 0x976 <NWK_RouteFindEntry>
  if (entry)
     a48:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     a4a:	09 f0       	breq	.+2      	; 0xa4e <nwkRouteRemove+0x8>
     a4c:	e8 cf       	rjmp	.-48     	; 0xa1e <NWK_RouteFreeEntry>
     a4e:	08 95       	ret

00000a50 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     a5a:	01 85       	ldd	r16, Z+9	; 0x09
     a5c:	12 85       	ldd	r17, Z+10	; 0x0a
     a5e:	11 23       	and	r17, r17
     a60:	2c f4       	brge	.+10     	; 0xa6c <nwkRouteFrameReceived+0x1c>
     a62:	85 85       	ldd	r24, Z+13	; 0x0d
     a64:	96 85       	ldd	r25, Z+14	; 0x0e
     a66:	08 17       	cp	r16, r24
     a68:	19 07       	cpc	r17, r25
     a6a:	e1 f5       	brne	.+120    	; 0xae4 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     a6c:	85 81       	ldd	r24, Z+5	; 0x05
     a6e:	96 81       	ldd	r25, Z+6	; 0x06
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	c1 f1       	breq	.+112    	; 0xae4 <nwkRouteFrameReceived+0x94>
     a74:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	85 85       	ldd	r24, Z+13	; 0x0d
     a7a:	96 85       	ldd	r25, Z+14	; 0x0e
     a7c:	7c df       	rcall	.-264    	; 0x976 <NWK_RouteFindEntry>
     a7e:	fc 01       	movw	r30, r24

  if (entry)
     a80:	89 2b       	or	r24, r25
     a82:	a1 f0       	breq	.+40     	; 0xaac <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     a84:	8f 81       	ldd	r24, Y+7	; 0x07
     a86:	98 85       	ldd	r25, Y+8	; 0x08
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	f9 f4       	brne	.+62     	; 0xaca <nwkRouteFrameReceived+0x7a>
     a8c:	20 91 36 19 	lds	r18, 0x1936	; 0x801936 <nwkIb>
     a90:	30 91 37 19 	lds	r19, 0x1937	; 0x801937 <nwkIb+0x1>
     a94:	8f 85       	ldd	r24, Y+15	; 0x0f
     a96:	98 89       	ldd	r25, Y+16	; 0x10
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	b1 f4       	brne	.+44     	; 0xaca <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     a9e:	14 83       	std	Z+4, r17	; 0x04
     aa0:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     aa2:	80 81       	ld	r24, Z
     aa4:	8f 70       	andi	r24, 0x0F	; 15
     aa6:	80 63       	ori	r24, 0x30	; 48
     aa8:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     aaa:	0a c0       	rjmp	.+20     	; 0xac0 <nwkRouteFrameReceived+0x70>
     aac:	96 df       	rcall	.-212    	; 0x9da <NWK_RouteNewEntry>
     aae:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab4:	92 83       	std	Z+2, r25	; 0x02
     ab6:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     ab8:	89 85       	ldd	r24, Y+9	; 0x09
     aba:	9a 85       	ldd	r25, Y+10	; 0x0a
     abc:	94 83       	std	Z+4, r25	; 0x04
     abe:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     ac0:	cd 57       	subi	r28, 0x7D	; 125
     ac2:	df 4f       	sbci	r29, 0xFF	; 255
     ac4:	88 81       	ld	r24, Y
     ac6:	86 83       	std	Z+6, r24	; 0x06
     ac8:	0d c0       	rjmp	.+26     	; 0xae4 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     aca:	83 81       	ldd	r24, Z+3	; 0x03
     acc:	94 81       	ldd	r25, Z+4	; 0x04
     ace:	08 17       	cp	r16, r24
     ad0:	19 07       	cpc	r17, r25
     ad2:	b1 f3       	breq	.-20     	; 0xac0 <nwkRouteFrameReceived+0x70>
     ad4:	96 81       	ldd	r25, Z+6	; 0x06
     ad6:	de 01       	movw	r26, r28
     ad8:	ad 57       	subi	r26, 0x7D	; 125
     ada:	bf 4f       	sbci	r27, 0xFF	; 255
     adc:	8c 91       	ld	r24, X
     ade:	98 17       	cp	r25, r24
     ae0:	f0 f2       	brcs	.-68     	; 0xa9e <nwkRouteFrameReceived+0x4e>
     ae2:	ee cf       	rjmp	.-36     	; 0xac0 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     af4:	87 85       	ldd	r24, Z+15	; 0x0f
     af6:	90 89       	ldd	r25, Z+16	; 0x10
     af8:	8f 3f       	cpi	r24, 0xFF	; 255
     afa:	2f ef       	ldi	r18, 0xFF	; 255
     afc:	92 07       	cpc	r25, r18
     afe:	d9 f1       	breq	.+118    	; 0xb76 <nwkRouteFrameSent+0x88>
     b00:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     b02:	63 85       	ldd	r22, Z+11	; 0x0b
     b04:	63 fb       	bst	r22, 3
     b06:	66 27       	eor	r22, r22
     b08:	60 f9       	bld	r22, 0
     b0a:	35 df       	rcall	.-406    	; 0x976 <NWK_RouteFindEntry>
     b0c:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     b0e:	89 2b       	or	r24, r25
     b10:	91 f1       	breq	.+100    	; 0xb76 <nwkRouteFrameSent+0x88>
     b12:	8c 91       	ld	r24, X
     b14:	80 fd       	sbrc	r24, 0
     b16:	2f c0       	rjmp	.+94     	; 0xb76 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     b18:	fe 01       	movw	r30, r28
     b1a:	ed 57       	subi	r30, 0x7D	; 125
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	80 81       	ld	r24, Z
     b20:	81 11       	cpse	r24, r1
     b22:	19 c0       	rjmp	.+50     	; 0xb56 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b24:	8c 91       	ld	r24, X
     b26:	8f 70       	andi	r24, 0x0F	; 15
     b28:	80 63       	ori	r24, 0x30	; 48
     b2a:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     b2c:	15 96       	adiw	r26, 0x05	; 5
     b2e:	8c 91       	ld	r24, X
     b30:	15 97       	sbiw	r26, 0x05	; 5
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	15 96       	adiw	r26, 0x05	; 5
     b36:	8c 93       	st	X, r24
     b38:	8f 3f       	cpi	r24, 0xFF	; 255
     b3a:	e9 f4       	brne	.+58     	; 0xb76 <nwkRouteFrameSent+0x88>
     b3c:	ec e9       	ldi	r30, 0x9C	; 156
     b3e:	f5 e1       	ldi	r31, 0x15	; 21
     b40:	28 e5       	ldi	r18, 0x58	; 88
     b42:	38 e1       	ldi	r19, 0x18	; 24
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     b44:	80 81       	ld	r24, Z
     b46:	86 95       	lsr	r24
     b48:	8f 5f       	subi	r24, 0xFF	; 255
     b4a:	80 83       	st	Z, r24
     b4c:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     b4e:	e2 17       	cp	r30, r18
     b50:	f3 07       	cpc	r31, r19
     b52:	c1 f7       	brne	.-16     	; 0xb44 <nwkRouteFrameSent+0x56>
     b54:	10 c0       	rjmp	.+32     	; 0xb76 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     b56:	9c 91       	ld	r25, X
     b58:	89 2f       	mov	r24, r25
     b5a:	82 95       	swap	r24
     b5c:	8f 70       	andi	r24, 0x0F	; 15
     b5e:	81 5f       	subi	r24, 0xF1	; 241
     b60:	8f 70       	andi	r24, 0x0F	; 15
     b62:	28 2f       	mov	r18, r24
     b64:	22 95       	swap	r18
     b66:	20 7f       	andi	r18, 0xF0	; 240
     b68:	9f 70       	andi	r25, 0x0F	; 15
     b6a:	92 2b       	or	r25, r18
     b6c:	9c 93       	st	X, r25
     b6e:	81 11       	cpse	r24, r1
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     b72:	cd 01       	movw	r24, r26
     b74:	54 df       	rcall	.-344    	; 0xa1e <NWK_RouteFreeEntry>
  }
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     b82:	87 85       	ldd	r24, Z+15	; 0x0f
     b84:	90 89       	ldd	r25, Z+16	; 0x10
     b86:	8f 3f       	cpi	r24, 0xFF	; 255
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	92 07       	cpc	r25, r18
     b8c:	29 f4       	brne	.+10     	; 0xb98 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	90 87       	std	Z+8, r25	; 0x08
     b94:	87 83       	std	Z+7, r24	; 0x07
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     b98:	23 85       	ldd	r18, Z+11	; 0x0b
     b9a:	22 ff       	sbrs	r18, 2
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     b9e:	90 87       	std	Z+8, r25	; 0x08
     ba0:	87 83       	std	Z+7, r24	; 0x07
     ba2:	08 c0       	rjmp	.+16     	; 0xbb4 <nwkRoutePrepareTx+0x38>
     ba4:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     ba6:	63 85       	ldd	r22, Z+11	; 0x0b
     ba8:	63 fb       	bst	r22, 3
     baa:	66 27       	eor	r22, r22
     bac:	60 f9       	bld	r22, 0
     bae:	41 df       	rcall	.-382    	; 0xa32 <NWK_RouteNextHop>
     bb0:	98 87       	std	Y+8, r25	; 0x08
     bb2:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     bce:	1b 85       	ldd	r17, Y+11	; 0x0b
     bd0:	13 fb       	bst	r17, 3
     bd2:	11 27       	eor	r17, r17
     bd4:	10 f9       	bld	r17, 0
     bd6:	cf 84       	ldd	r12, Y+15	; 0x0f
     bd8:	d8 88       	ldd	r13, Y+16	; 0x10
     bda:	61 2f       	mov	r22, r17
     bdc:	c6 01       	movw	r24, r12
     bde:	29 df       	rcall	.-430    	; 0xa32 <NWK_RouteNextHop>
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	59 f0       	breq	.+22     	; 0xbfa <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     be4:	fe 01       	movw	r30, r28
     be6:	e9 57       	subi	r30, 0x79	; 121
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	11 82       	std	Z+1, r1	; 0x01
     bec:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     bf4:	ce 01       	movw	r24, r28
     bf6:	6e d3       	rcall	.+1756   	; 0x12d4 <nwkTxFrame>
     bf8:	22 c0       	rjmp	.+68     	; 0xc3e <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     bfa:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     bfc:	be 84       	ldd	r11, Y+14	; 0x0e
     bfe:	1f de       	rcall	.-962    	; 0x83e <nwkFrameAlloc>
     c00:	7c 01       	movw	r14, r24
     c02:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     c04:	d1 f0       	breq	.+52     	; 0xc3a <nwkRouteFrame+0x80>
     c06:	83 de       	rcall	.-762    	; 0x90e <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     c08:	f7 01       	movw	r30, r14
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	8a 5f       	subi	r24, 0xFA	; 250
     c0e:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     c10:	e9 57       	subi	r30, 0x79	; 121
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	11 82       	std	Z+1, r1	; 0x01
     c16:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     c18:	f7 01       	movw	r30, r14
     c1a:	b0 8a       	std	Z+16, r11	; 0x10
     c1c:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     c1e:	ef 57       	subi	r30, 0x7F	; 127
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	01 90       	ld	r0, Z+
     c24:	f0 81       	ld	r31, Z
     c26:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 83       	st	Z, r24
  command->srcAddr = src;
     c2c:	b2 82       	std	Z+2, r11	; 0x02
     c2e:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     c30:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     c32:	c3 82       	std	Z+3, r12	; 0x03
     c34:	15 83       	std	Z+5, r17	; 0x05
     c36:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     c38:	4d d3       	rcall	.+1690   	; 0x12d4 <nwkTxFrame>
     c3a:	ce 01       	movw	r24, r28
     c3c:	39 de       	rcall	.-910    	; 0x8b0 <nwkFrameFree>
  }
}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	08 95       	ret

00000c52 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     c52:	fc 01       	movw	r30, r24
     c54:	21 85       	ldd	r18, Z+9	; 0x09
     c56:	26 30       	cpi	r18, 0x06	; 6
     c58:	49 f4       	brne	.+18     	; 0xc6c <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     c5a:	07 80       	ldd	r0, Z+7	; 0x07
     c5c:	f0 85       	ldd	r31, Z+8	; 0x08
     c5e:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     c60:	65 81       	ldd	r22, Z+5	; 0x05
     c62:	83 81       	ldd	r24, Z+3	; 0x03
     c64:	94 81       	ldd	r25, Z+4	; 0x04
     c66:	ef de       	rcall	.-546    	; 0xa46 <nwkRouteRemove>

  return true;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     c6c:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     c6e:	08 95       	ret

00000c70 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     c70:	dc 01       	movw	r26, r24
     c72:	19 96       	adiw	r26, 0x09	; 9
     c74:	2c 91       	ld	r18, X
     c76:	19 97       	sbiw	r26, 0x09	; 9
     c78:	22 23       	and	r18, r18
     c7a:	71 f0       	breq	.+28     	; 0xc98 <nwkRxServiceDataInd+0x28>
     c7c:	17 96       	adiw	r26, 0x07	; 7
     c7e:	ed 91       	ld	r30, X+
     c80:	fc 91       	ld	r31, X
     c82:	18 97       	sbiw	r26, 0x08	; 8
     c84:	20 81       	ld	r18, Z
     c86:	22 23       	and	r18, r18
     c88:	19 f0       	breq	.+6      	; 0xc90 <nwkRxServiceDataInd+0x20>
     c8a:	21 30       	cpi	r18, 0x01	; 1
     c8c:	19 f0       	breq	.+6      	; 0xc94 <nwkRxServiceDataInd+0x24>
     c8e:	06 c0       	rjmp	.+12     	; 0xc9c <nwkRxServiceDataInd+0x2c>
     c90:	b2 c3       	rjmp	.+1892   	; 0x13f6 <nwkTxAckReceived>
     c92:	08 95       	ret
     c94:	de cf       	rjmp	.-68     	; 0xc52 <nwkRouteErrorReceived>
     c96:	08 95       	ret
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	08 95       	ret
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	08 95       	ret

00000ca0 <nwkRxDuplicateRejectionTimerHandler>:
     ca0:	bc 01       	movw	r22, r24
     ca2:	e5 e6       	ldi	r30, 0x65	; 101
     ca4:	f8 e1       	ldi	r31, 0x18	; 24
     ca6:	27 e9       	ldi	r18, 0x97	; 151
     ca8:	38 e1       	ldi	r19, 0x18	; 24
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	51 e0       	ldi	r21, 0x01	; 1
     cae:	90 81       	ld	r25, Z
     cb0:	99 23       	and	r25, r25
     cb2:	19 f0       	breq	.+6      	; 0xcba <nwkRxDuplicateRejectionTimerHandler+0x1a>
     cb4:	91 50       	subi	r25, 0x01	; 1
     cb6:	90 83       	st	Z, r25
     cb8:	45 2f       	mov	r20, r21
     cba:	35 96       	adiw	r30, 0x05	; 5
     cbc:	e2 17       	cp	r30, r18
     cbe:	f3 07       	cpc	r31, r19
     cc0:	b1 f7       	brne	.-20     	; 0xcae <nwkRxDuplicateRejectionTimerHandler+0xe>
     cc2:	44 23       	and	r20, r20
     cc4:	11 f0       	breq	.+4      	; 0xcca <nwkRxDuplicateRejectionTimerHandler+0x2a>
     cc6:	cb 01       	movw	r24, r22
     cc8:	30 c6       	rjmp	.+3168   	; 0x192a <SYS_TimerStart>
     cca:	08 95       	ret

00000ccc <nwkRxInit>:
     ccc:	e5 e6       	ldi	r30, 0x65	; 101
     cce:	f8 e1       	ldi	r31, 0x18	; 24
     cd0:	87 e9       	ldi	r24, 0x97	; 151
     cd2:	98 e1       	ldi	r25, 0x18	; 24
     cd4:	10 82       	st	Z, r1
     cd6:	35 96       	adiw	r30, 0x05	; 5
     cd8:	e8 17       	cp	r30, r24
     cda:	f9 07       	cpc	r31, r25
     cdc:	d9 f7       	brne	.-10     	; 0xcd4 <nwkRxInit+0x8>
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f8 e1       	ldi	r31, 0x18	; 24
     ce2:	84 e6       	ldi	r24, 0x64	; 100
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	86 83       	std	Z+6, r24	; 0x06
     cec:	97 83       	std	Z+7, r25	; 0x07
     cee:	a0 87       	std	Z+8, r26	; 0x08
     cf0:	b1 87       	std	Z+9, r27	; 0x09
     cf2:	12 86       	std	Z+10, r1	; 0x0a
     cf4:	80 e5       	ldi	r24, 0x50	; 80
     cf6:	96 e0       	ldi	r25, 0x06	; 6
     cf8:	94 87       	std	Z+12, r25	; 0x0c
     cfa:	83 87       	std	Z+11, r24	; 0x0b
     cfc:	68 e3       	ldi	r22, 0x38	; 56
     cfe:	76 e0       	ldi	r23, 0x06	; 6
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	96 cc       	rjmp	.-1748   	; 0x630 <NWK_OpenEndpoint>
     d04:	08 95       	ret

00000d06 <PHY_DataInd>:
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	dc 01       	movw	r26, r24
     d0c:	ed 91       	ld	r30, X+
     d0e:	fc 91       	ld	r31, X
     d10:	11 97       	sbiw	r26, 0x01	; 1
     d12:	21 81       	ldd	r18, Z+1	; 0x01
     d14:	28 38       	cpi	r18, 0x88	; 136
     d16:	f1 f4       	brne	.+60     	; 0xd54 <PHY_DataInd+0x4e>
     d18:	20 81       	ld	r18, Z
     d1a:	2f 7d       	andi	r18, 0xDF	; 223
     d1c:	21 34       	cpi	r18, 0x41	; 65
     d1e:	d1 f4       	brne	.+52     	; 0xd54 <PHY_DataInd+0x4e>
     d20:	12 96       	adiw	r26, 0x02	; 2
     d22:	2c 91       	ld	r18, X
     d24:	20 31       	cpi	r18, 0x10	; 16
     d26:	b0 f0       	brcs	.+44     	; 0xd54 <PHY_DataInd+0x4e>
     d28:	ec 01       	movw	r28, r24
     d2a:	89 dd       	rcall	.-1262   	; 0x83e <nwkFrameAlloc>
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	91 f0       	breq	.+36     	; 0xd54 <PHY_DataInd+0x4e>
     d30:	20 e2       	ldi	r18, 0x20	; 32
     d32:	fc 01       	movw	r30, r24
     d34:	20 83       	st	Z, r18
     d36:	2a 81       	ldd	r18, Y+2	; 0x02
     d38:	21 83       	std	Z+1, r18	; 0x01
     d3a:	2b 81       	ldd	r18, Y+3	; 0x03
     d3c:	ed 57       	subi	r30, 0x7D	; 125
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	20 83       	st	Z, r18
     d42:	2c 81       	ldd	r18, Y+4	; 0x04
     d44:	31 96       	adiw	r30, 0x01	; 1
     d46:	20 83       	st	Z, r18
     d48:	4a 81       	ldd	r20, Y+2	; 0x02
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	68 81       	ld	r22, Y
     d4e:	79 81       	ldd	r23, Y+1	; 0x01
     d50:	02 96       	adiw	r24, 0x02	; 2
     d52:	d8 d6       	rcall	.+3504   	; 0x1b04 <memcpy>
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     d5a:	2f 92       	push	r2
     d5c:	3f 92       	push	r3
     d5e:	4f 92       	push	r4
     d60:	5f 92       	push	r5
     d62:	6f 92       	push	r6
     d64:	7f 92       	push	r7
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	2c 97       	sbiw	r28, 0x0c	; 12
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     d8e:	00 e0       	ldi	r16, 0x00	; 0
     d90:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     d92:	0f 2e       	mov	r0, r31
     d94:	f4 e2       	ldi	r31, 0x24	; 36
     d96:	bf 2e       	mov	r11, r31
     d98:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     d9a:	0f 2e       	mov	r0, r31
     d9c:	f6 e3       	ldi	r31, 0x36	; 54
     d9e:	ef 2e       	mov	r14, r31
     da0:	f9 e1       	ldi	r31, 0x19	; 25
     da2:	ff 2e       	mov	r15, r31
     da4:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     da6:	55 24       	eor	r5, r5
     da8:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     daa:	68 94       	set
     dac:	aa 24       	eor	r10, r10
     dae:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     db0:	68 94       	set
     db2:	77 24       	eor	r7, r7
     db4:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     db6:	68 94       	set
     db8:	66 24       	eor	r6, r6
     dba:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     dbc:	31 2c       	mov	r3, r1
     dbe:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     dc0:	0f 2e       	mov	r0, r31
     dc2:	ff e1       	ldi	r31, 0x1F	; 31
     dc4:	4f 2e       	mov	r4, r31
     dc6:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     dc8:	cc 24       	eor	r12, r12
     dca:	c3 94       	inc	r12
     dcc:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     dce:	da c1       	rjmp	.+948    	; 0x1184 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     dd0:	d8 01       	movw	r26, r16
     dd2:	8c 91       	ld	r24, X
     dd4:	82 32       	cpi	r24, 0x22	; 34
     dd6:	09 f4       	brne	.+2      	; 0xdda <nwkRxTaskHandler+0x80>
     dd8:	05 c1       	rjmp	.+522    	; 0xfe4 <nwkRxTaskHandler+0x28a>
     dda:	18 f4       	brcc	.+6      	; 0xde2 <nwkRxTaskHandler+0x88>
     ddc:	80 32       	cpi	r24, 0x20	; 32
     dde:	41 f0       	breq	.+16     	; 0xdf0 <nwkRxTaskHandler+0x96>
     de0:	d1 c1       	rjmp	.+930    	; 0x1184 <nwkRxTaskHandler+0x42a>
     de2:	83 32       	cpi	r24, 0x23	; 35
     de4:	09 f4       	brne	.+2      	; 0xde8 <nwkRxTaskHandler+0x8e>
     de6:	c9 c1       	rjmp	.+914    	; 0x117a <nwkRxTaskHandler+0x420>
     de8:	84 32       	cpi	r24, 0x24	; 36
     dea:	09 f4       	brne	.+2      	; 0xdee <nwkRxTaskHandler+0x94>
     dec:	c9 c1       	rjmp	.+914    	; 0x1180 <nwkRxTaskHandler+0x426>
     dee:	ca c1       	rjmp	.+916    	; 0x1184 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     df0:	f8 01       	movw	r30, r16
     df2:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     df4:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     df6:	98 2f       	mov	r25, r24
     df8:	9a 70       	andi	r25, 0x0A	; 10
     dfa:	09 f0       	breq	.+2      	; 0xdfe <nwkRxTaskHandler+0xa4>
     dfc:	c3 c1       	rjmp	.+902    	; 0x1184 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     dfe:	25 81       	ldd	r18, Z+5	; 0x05
     e00:	36 81       	ldd	r19, Z+6	; 0x06
     e02:	2f 3f       	cpi	r18, 0xFF	; 255
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	91 f4       	brne	.+36     	; 0xe2c <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     e08:	d8 01       	movw	r26, r16
     e0a:	1f 96       	adiw	r26, 0x0f	; 15
     e0c:	8d 91       	ld	r24, X+
     e0e:	9c 91       	ld	r25, X
     e10:	50 97       	sbiw	r26, 0x10	; 16
     e12:	f7 01       	movw	r30, r14
     e14:	20 81       	ld	r18, Z
     e16:	31 81       	ldd	r19, Z+1	; 0x01
     e18:	28 17       	cp	r18, r24
     e1a:	39 07       	cpc	r19, r25
     e1c:	19 f0       	breq	.+6      	; 0xe24 <nwkRxTaskHandler+0xca>
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	09 f0       	breq	.+2      	; 0xe24 <nwkRxTaskHandler+0xca>
     e22:	b0 c1       	rjmp	.+864    	; 0x1184 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     e24:	e2 e2       	ldi	r30, 0x22	; 34
     e26:	d8 01       	movw	r26, r16
     e28:	ec 93       	st	X, r30
     e2a:	ac c1       	rjmp	.+856    	; 0x1184 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     e2c:	d8 01       	movw	r26, r16
     e2e:	1f 96       	adiw	r26, 0x0f	; 15
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	50 97       	sbiw	r26, 0x10	; 16
     e36:	2f 3f       	cpi	r18, 0xFF	; 255
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	11 f4       	brne	.+4      	; 0xe40 <nwkRxTaskHandler+0xe6>
     e3c:	80 fd       	sbrc	r24, 0
     e3e:	a2 c1       	rjmp	.+836    	; 0x1184 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     e40:	f7 01       	movw	r30, r14
     e42:	20 81       	ld	r18, Z
     e44:	31 81       	ldd	r19, Z+1	; 0x01
     e46:	d8 01       	movw	r26, r16
     e48:	1d 96       	adiw	r26, 0x0d	; 13
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	1e 97       	sbiw	r26, 0x0e	; 14
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	09 f4       	brne	.+2      	; 0xe58 <nwkRxTaskHandler+0xfe>
     e56:	96 c1       	rjmp	.+812    	; 0x1184 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     e58:	c8 01       	movw	r24, r16
     e5a:	fa dd       	rcall	.-1036   	; 0xa50 <nwkRouteFrameReceived>
     e5c:	e1 e6       	ldi	r30, 0x61	; 97
     e5e:	f8 e1       	ldi	r31, 0x18	; 24
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     e64:	83 2c       	mov	r8, r3
     e66:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     e68:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     e6a:	44 81       	ldd	r20, Z+4	; 0x04
     e6c:	44 23       	and	r20, r20
     e6e:	09 f4       	brne	.+2      	; 0xe72 <nwkRxTaskHandler+0x118>
     e70:	74 c0       	rjmp	.+232    	; 0xf5a <nwkRxTaskHandler+0x200>
     e72:	d8 01       	movw	r26, r16
     e74:	1d 96       	adiw	r26, 0x0d	; 13
     e76:	6d 91       	ld	r22, X+
     e78:	7c 91       	ld	r23, X
     e7a:	1e 97       	sbiw	r26, 0x0e	; 14
     e7c:	40 81       	ld	r20, Z
     e7e:	51 81       	ldd	r21, Z+1	; 0x01
     e80:	64 17       	cp	r22, r20
     e82:	75 07       	cpc	r23, r21
     e84:	09 f0       	breq	.+2      	; 0xe88 <nwkRxTaskHandler+0x12e>
     e86:	6a c0       	rjmp	.+212    	; 0xf5c <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     e88:	1c 96       	adiw	r26, 0x0c	; 12
     e8a:	8c 91       	ld	r24, X
     e8c:	1c 97       	sbiw	r26, 0x0c	; 12
     e8e:	f9 01       	movw	r30, r18
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	ef 59       	subi	r30, 0x9F	; 159
     e9e:	f7 4e       	sbci	r31, 0xE7	; 231
     ea0:	92 81       	ldd	r25, Z+2	; 0x02
     ea2:	98 1b       	sub	r25, r24

      if (diff < 8)
     ea4:	98 30       	cpi	r25, 0x08	; 8
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <nwkRxTaskHandler+0x150>
     ea8:	3e c0       	rjmp	.+124    	; 0xf26 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     eaa:	f9 01       	movw	r30, r18
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	ef 59       	subi	r30, 0x9F	; 159
     eba:	f7 4e       	sbci	r31, 0xE7	; 231
     ebc:	83 81       	ldd	r24, Z+3	; 0x03
     ebe:	48 2f       	mov	r20, r24
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	09 2e       	mov	r0, r25
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <nwkRxTaskHandler+0x170>
     ec6:	55 95       	asr	r21
     ec8:	47 95       	ror	r20
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <nwkRxTaskHandler+0x16c>
     ece:	40 ff       	sbrs	r20, 0
     ed0:	17 c0       	rjmp	.+46     	; 0xf00 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     ed2:	f7 01       	movw	r30, r14
     ed4:	20 81       	ld	r18, Z
     ed6:	31 81       	ldd	r19, Z+1	; 0x01
     ed8:	17 96       	adiw	r26, 0x07	; 7
     eda:	8d 91       	ld	r24, X+
     edc:	9c 91       	ld	r25, X
     ede:	18 97       	sbiw	r26, 0x08	; 8
     ee0:	28 17       	cp	r18, r24
     ee2:	39 07       	cpc	r19, r25
     ee4:	09 f0       	breq	.+2      	; 0xee8 <nwkRxTaskHandler+0x18e>
     ee6:	4e c1       	rjmp	.+668    	; 0x1184 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     ee8:	1b 96       	adiw	r26, 0x0b	; 11
     eea:	6c 91       	ld	r22, X
     eec:	1b 97       	sbiw	r26, 0x0b	; 11
     eee:	63 fb       	bst	r22, 3
     ef0:	66 27       	eor	r22, r22
     ef2:	60 f9       	bld	r22, 0
     ef4:	1f 96       	adiw	r26, 0x0f	; 15
     ef6:	8d 91       	ld	r24, X+
     ef8:	9c 91       	ld	r25, X
     efa:	50 97       	sbiw	r26, 0x10	; 16
     efc:	a4 dd       	rcall	.-1208   	; 0xa46 <nwkRouteRemove>
     efe:	42 c1       	rjmp	.+644    	; 0x1184 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     f00:	f9 01       	movw	r30, r18
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	2e 0f       	add	r18, r30
     f0c:	3f 1f       	adc	r19, r31
     f0e:	f9 01       	movw	r30, r18
     f10:	ef 59       	subi	r30, 0x9F	; 159
     f12:	f7 4e       	sbci	r31, 0xE7	; 231
     f14:	96 01       	movw	r18, r12
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <nwkRxTaskHandler+0x1c2>
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	9a 95       	dec	r25
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <nwkRxTaskHandler+0x1be>
     f20:	82 2b       	or	r24, r18
     f22:	83 83       	std	Z+3, r24	; 0x03
     f24:	36 c1       	rjmp	.+620    	; 0x1192 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     f26:	f9 01       	movw	r30, r18
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	2e 0f       	add	r18, r30
     f32:	3f 1f       	adc	r19, r31
     f34:	f9 01       	movw	r30, r18
     f36:	ef 59       	subi	r30, 0x9F	; 159
     f38:	f7 4e       	sbci	r31, 0xE7	; 231
     f3a:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     f3c:	83 81       	ldd	r24, Z+3	; 0x03
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	91 95       	neg	r25
     f44:	a9 01       	movw	r20, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <nwkRxTaskHandler+0x1f2>
     f48:	44 0f       	add	r20, r20
     f4a:	55 1f       	adc	r21, r21
     f4c:	9a 95       	dec	r25
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <nwkRxTaskHandler+0x1ee>
     f50:	ca 01       	movw	r24, r20
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     f56:	44 82       	std	Z+4, r4	; 0x04
     f58:	1c c1       	rjmp	.+568    	; 0x1192 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
     f5a:	4f 01       	movw	r8, r30
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     f60:	8a 30       	cpi	r24, 0x0A	; 10
     f62:	91 05       	cpc	r25, r1
     f64:	09 f0       	breq	.+2      	; 0xf68 <nwkRxTaskHandler+0x20e>
     f66:	80 cf       	rjmp	.-256    	; 0xe68 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     f68:	81 14       	cp	r8, r1
     f6a:	91 04       	cpc	r9, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <nwkRxTaskHandler+0x216>
     f6e:	0a c1       	rjmp	.+532    	; 0x1184 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     f70:	d8 01       	movw	r26, r16
     f72:	1d 96       	adiw	r26, 0x0d	; 13
     f74:	8d 91       	ld	r24, X+
     f76:	9c 91       	ld	r25, X
     f78:	1e 97       	sbiw	r26, 0x0e	; 14
     f7a:	f4 01       	movw	r30, r8
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
     f80:	1c 96       	adiw	r26, 0x0c	; 12
     f82:	8c 91       	ld	r24, X
     f84:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
     f86:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     f88:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     f8a:	83 e5       	ldi	r24, 0x53	; 83
     f8c:	98 e1       	ldi	r25, 0x18	; 24
     f8e:	cd d4       	rcall	.+2458   	; 0x192a <SYS_TimerStart>
     f90:	00 c1       	rjmp	.+512    	; 0x1192 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     f92:	d7 01       	movw	r26, r14
     f94:	2d 91       	ld	r18, X+
     f96:	3c 91       	ld	r19, X
     f98:	f8 01       	movw	r30, r16
     f9a:	87 85       	ldd	r24, Z+15	; 0x0f
     f9c:	90 89       	ldd	r25, Z+16	; 0x10
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	81 f0       	breq	.+32     	; 0xfc4 <nwkRxTaskHandler+0x26a>
     fa4:	43 85       	ldd	r20, Z+11	; 0x0b
     fa6:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     fa8:	0b c0       	rjmp	.+22     	; 0xfc0 <nwkRxTaskHandler+0x266>
     faa:	c8 01       	movw	r24, r16
     fac:	e1 d1       	rcall	.+962    	; 0x1370 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     fae:	d7 01       	movw	r26, r14
     fb0:	2d 91       	ld	r18, X+
     fb2:	3c 91       	ld	r19, X
     fb4:	f8 01       	movw	r30, r16
     fb6:	87 85       	ldd	r24, Z+15	; 0x0f
     fb8:	90 89       	ldd	r25, Z+16	; 0x10
     fba:	28 17       	cp	r18, r24
     fbc:	39 07       	cpc	r19, r25
     fbe:	11 f0       	breq	.+4      	; 0xfc4 <nwkRxTaskHandler+0x26a>
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	21 f4       	brne	.+8      	; 0xfcc <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     fc4:	e2 e2       	ldi	r30, 0x22	; 34
     fc6:	d8 01       	movw	r26, r16
     fc8:	ec 93       	st	X, r30
     fca:	dc c0       	rjmp	.+440    	; 0x1184 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
     fcc:	d8 01       	movw	r26, r16
     fce:	17 96       	adiw	r26, 0x07	; 7
     fd0:	8d 91       	ld	r24, X+
     fd2:	9c 91       	ld	r25, X
     fd4:	18 97       	sbiw	r26, 0x08	; 8
     fd6:	82 17       	cp	r24, r18
     fd8:	93 07       	cpc	r25, r19
     fda:	09 f0       	breq	.+2      	; 0xfde <nwkRxTaskHandler+0x284>
     fdc:	d3 c0       	rjmp	.+422    	; 0x1184 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
     fde:	e3 e2       	ldi	r30, 0x23	; 35
     fe0:	ec 93       	st	X, r30
     fe2:	d0 c0       	rjmp	.+416    	; 0x1184 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     fe4:	10 92 60 18 	sts	0x1860, r1	; 0x801860 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     fe8:	d8 01       	movw	r26, r16
     fea:	51 96       	adiw	r26, 0x11	; 17
     fec:	8c 91       	ld	r24, X
     fee:	51 97       	sbiw	r26, 0x11	; 17
     ff0:	82 95       	swap	r24
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	e8 2f       	mov	r30, r24
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	e4 5c       	subi	r30, 0xC4	; 196
     ffe:	f6 4e       	sbci	r31, 0xE6	; 230
    1000:	01 90       	ld	r0, Z+
    1002:	f0 81       	ld	r31, Z
    1004:	e0 2d       	mov	r30, r0
    1006:	30 97       	sbiw	r30, 0x00	; 0
    1008:	09 f4       	brne	.+2      	; 0x100c <nwkRxTaskHandler+0x2b2>
    100a:	60 c0       	rjmp	.+192    	; 0x10cc <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    100c:	1d 96       	adiw	r26, 0x0d	; 13
    100e:	2d 91       	ld	r18, X+
    1010:	3c 91       	ld	r19, X
    1012:	1e 97       	sbiw	r26, 0x0e	; 14
    1014:	3a 83       	std	Y+2, r19	; 0x02
    1016:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1018:	1f 96       	adiw	r26, 0x0f	; 15
    101a:	4d 91       	ld	r20, X+
    101c:	5c 91       	ld	r21, X
    101e:	50 97       	sbiw	r26, 0x10	; 16
    1020:	5c 83       	std	Y+4, r21	; 0x04
    1022:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1024:	51 96       	adiw	r26, 0x11	; 17
    1026:	9c 91       	ld	r25, X
    1028:	51 97       	sbiw	r26, 0x11	; 17
    102a:	9f 70       	andi	r25, 0x0F	; 15
    102c:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    102e:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    1030:	af 57       	subi	r26, 0x7F	; 127
    1032:	bf 4f       	sbci	r27, 0xFF	; 255
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	99 87       	std	Y+9, r25	; 0x09
    103a:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    103c:	b8 01       	movw	r22, r16
    103e:	6e 5f       	subi	r22, 0xFE	; 254
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1042:	86 1b       	sub	r24, r22
    1044:	97 0b       	sbc	r25, r23
    1046:	d8 01       	movw	r26, r16
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	9c 91       	ld	r25, X
    104c:	11 97       	sbiw	r26, 0x01	; 1
    104e:	98 1b       	sub	r25, r24
    1050:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1052:	ad 57       	subi	r26, 0x7D	; 125
    1054:	bf 4f       	sbci	r27, 0xFF	; 255
    1056:	8c 91       	ld	r24, X
    1058:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	8c 91       	ld	r24, X
    105e:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1060:	d8 01       	movw	r26, r16
    1062:	1b 96       	adiw	r26, 0x0b	; 11
    1064:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1066:	69 2f       	mov	r22, r25
    1068:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    106a:	92 fd       	sbrc	r25, 2
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <nwkRxTaskHandler+0x318>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <nwkRxTaskHandler+0x31a>
    1072:	80 e2       	ldi	r24, 0x20	; 32
    1074:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1076:	93 fd       	sbrc	r25, 3
    1078:	02 c0       	rjmp	.+4      	; 0x107e <nwkRxTaskHandler+0x324>
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <nwkRxTaskHandler+0x326>
    107e:	90 e4       	ldi	r25, 0x40	; 64
    1080:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1082:	4f 3f       	cpi	r20, 0xFF	; 255
    1084:	5f 4f       	sbci	r21, 0xFF	; 255
    1086:	11 f0       	breq	.+4      	; 0x108c <nwkRxTaskHandler+0x332>
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	01 c0       	rjmp	.+2      	; 0x108e <nwkRxTaskHandler+0x334>
    108c:	96 2d       	mov	r25, r6
    108e:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1090:	d8 01       	movw	r26, r16
    1092:	19 96       	adiw	r26, 0x09	; 9
    1094:	4d 91       	ld	r20, X+
    1096:	5c 91       	ld	r21, X
    1098:	1a 97       	sbiw	r26, 0x0a	; 10
    109a:	24 17       	cp	r18, r20
    109c:	35 07       	cpc	r19, r21
    109e:	11 f0       	breq	.+4      	; 0x10a4 <nwkRxTaskHandler+0x34a>
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <nwkRxTaskHandler+0x34c>
    10a4:	97 2d       	mov	r25, r7
    10a6:	89 2b       	or	r24, r25
    10a8:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    10aa:	d8 01       	movw	r26, r16
    10ac:	15 96       	adiw	r26, 0x05	; 5
    10ae:	2d 91       	ld	r18, X+
    10b0:	3c 91       	ld	r19, X
    10b2:	16 97       	sbiw	r26, 0x06	; 6
    10b4:	2f 3f       	cpi	r18, 0xFF	; 255
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	11 f0       	breq	.+4      	; 0x10be <nwkRxTaskHandler+0x364>
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <nwkRxTaskHandler+0x366>
    10be:	9a 2d       	mov	r25, r10
    10c0:	89 2b       	or	r24, r25
    10c2:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	19 95       	eicall
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    10cc:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    10ce:	f8 01       	movw	r30, r16
    10d0:	93 85       	ldd	r25, Z+11	; 0x0b
    10d2:	90 ff       	sbrs	r25, 0
    ack = false;
    10d4:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    10d6:	d8 01       	movw	r26, r16
    10d8:	17 96       	adiw	r26, 0x07	; 7
    10da:	2d 91       	ld	r18, X+
    10dc:	3c 91       	ld	r19, X
    10de:	18 97       	sbiw	r26, 0x08	; 8
    10e0:	2f 3f       	cpi	r18, 0xFF	; 255
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	69 f4       	brne	.+26     	; 0x1100 <nwkRxTaskHandler+0x3a6>
    10e6:	f7 01       	movw	r30, r14
    10e8:	40 81       	ld	r20, Z
    10ea:	51 81       	ldd	r21, Z+1	; 0x01
    10ec:	d8 01       	movw	r26, r16
    10ee:	1f 96       	adiw	r26, 0x0f	; 15
    10f0:	2d 91       	ld	r18, X+
    10f2:	3c 91       	ld	r19, X
    10f4:	50 97       	sbiw	r26, 0x10	; 16
    10f6:	42 17       	cp	r20, r18
    10f8:	53 07       	cpc	r21, r19
    10fa:	11 f4       	brne	.+4      	; 0x1100 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    10fc:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    10fe:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1100:	f8 01       	movw	r30, r16
    1102:	25 81       	ldd	r18, Z+5	; 0x05
    1104:	36 81       	ldd	r19, Z+6	; 0x06
    1106:	2f 3f       	cpi	r18, 0xFF	; 255
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	a1 f1       	breq	.+104    	; 0x1174 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    110c:	d7 01       	movw	r26, r14
    110e:	2d 91       	ld	r18, X+
    1110:	3c 91       	ld	r19, X
    1112:	2f 3f       	cpi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    1116:	71 f1       	breq	.+92     	; 0x1174 <nwkRxTaskHandler+0x41a>
    1118:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    111a:	61 f1       	breq	.+88     	; 0x1174 <nwkRxTaskHandler+0x41a>
    111c:	90 db       	rcall	.-2272   	; 0x83e <nwkFrameAlloc>
    111e:	4c 01       	movw	r8, r24
    1120:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    1122:	41 f1       	breq	.+80     	; 0x1174 <nwkRxTaskHandler+0x41a>
    1124:	f4 db       	rcall	.-2072   	; 0x90e <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1126:	f4 01       	movw	r30, r8
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	8d 5f       	subi	r24, 0xFD	; 253
    112c:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    112e:	e9 57       	subi	r30, 0x79	; 121
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	11 82       	std	Z+1, r1	; 0x01
    1134:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1136:	d8 01       	movw	r26, r16
    1138:	1b 96       	adiw	r26, 0x0b	; 11
    113a:	8c 91       	ld	r24, X
    113c:	1b 97       	sbiw	r26, 0x0b	; 11
    113e:	86 95       	lsr	r24
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	f4 01       	movw	r30, r8
    1144:	93 85       	ldd	r25, Z+11	; 0x0b
    1146:	80 fb       	bst	r24, 0
    1148:	91 f9       	bld	r25, 1
    114a:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    114c:	1d 96       	adiw	r26, 0x0d	; 13
    114e:	8d 91       	ld	r24, X+
    1150:	9c 91       	ld	r25, X
    1152:	1e 97       	sbiw	r26, 0x0e	; 14
    1154:	90 8b       	std	Z+16, r25	; 0x10
    1156:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1158:	ef 57       	subi	r30, 0x7F	; 127
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	01 90       	ld	r0, Z+
    115e:	f0 81       	ld	r31, Z
    1160:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1162:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1164:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    1168:	82 83       	std	Z+2, r24	; 0x02
    116a:	1c 96       	adiw	r26, 0x0c	; 12
    116c:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    116e:	81 83       	std	Z+1, r24	; 0x01
    1170:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1172:	b0 d0       	rcall	.+352    	; 0x12d4 <nwkTxFrame>
    1174:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1176:	bc 92       	st	X, r11
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <nwkRxTaskHandler+0x42a>
    117a:	c8 01       	movw	r24, r16
      } break;
    117c:	1e dd       	rcall	.-1476   	; 0xbba <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <nwkRxTaskHandler+0x42a>
    1180:	c8 01       	movw	r24, r16
    1182:	96 db       	rcall	.-2260   	; 0x8b0 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1184:	c8 01       	movw	r24, r16
    1186:	9e db       	rcall	.-2244   	; 0x8c4 <nwkFrameNext>
    1188:	8c 01       	movw	r16, r24
    118a:	89 2b       	or	r24, r25
    118c:	09 f0       	breq	.+2      	; 0x1190 <nwkRxTaskHandler+0x436>
    118e:	20 ce       	rjmp	.-960    	; 0xdd0 <nwkRxTaskHandler+0x76>
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <nwkRxTaskHandler+0x446>
    1192:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1194:	87 81       	ldd	r24, Z+7	; 0x07
    1196:	90 85       	ldd	r25, Z+8	; 0x08
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	09 f0       	breq	.+2      	; 0x119e <nwkRxTaskHandler+0x444>
    119c:	08 cf       	rjmp	.-496    	; 0xfae <nwkRxTaskHandler+0x254>
    119e:	f9 ce       	rjmp	.-526    	; 0xf92 <nwkRxTaskHandler+0x238>
    11a0:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	9f 90       	pop	r9
    11c2:	8f 90       	pop	r8
    11c4:	7f 90       	pop	r7
    11c6:	6f 90       	pop	r6
    11c8:	5f 90       	pop	r5
    11ca:	4f 90       	pop	r4
    11cc:	3f 90       	pop	r3
    11ce:	2f 90       	pop	r2
    11d0:	08 95       	ret

000011d2 <nwkTxDelayTimerHandler>:
    11d2:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	7c 01       	movw	r14, r24
    11de:	10 e0       	ldi	r17, 0x00	; 0
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	01 e0       	ldi	r16, 0x01	; 1
    11e6:	c3 e1       	ldi	r28, 0x13	; 19
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <nwkTxDelayTimerHandler+0x3e>
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 81       	ld	r18, Z
    11ee:	21 31       	cpi	r18, 0x11	; 17
    11f0:	79 f4       	brne	.+30     	; 0x1210 <nwkTxDelayTimerHandler+0x3e>
    11f2:	ec 57       	subi	r30, 0x7C	; 124
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	20 81       	ld	r18, Z
    11f8:	31 81       	ldd	r19, Z+1	; 0x01
    11fa:	21 50       	subi	r18, 0x01	; 1
    11fc:	31 09       	sbc	r19, r1
    11fe:	31 83       	std	Z+1, r19	; 0x01
    1200:	20 83       	st	Z, r18
    1202:	23 2b       	or	r18, r19
    1204:	21 f4       	brne	.+8      	; 0x120e <nwkTxDelayTimerHandler+0x3c>
    1206:	fc 01       	movw	r30, r24
    1208:	c0 83       	st	Z, r28
    120a:	10 2f       	mov	r17, r16
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <nwkTxDelayTimerHandler+0x3e>
    120e:	10 2f       	mov	r17, r16
    1210:	59 db       	rcall	.-2382   	; 0x8c4 <nwkFrameNext>
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	51 f7       	brne	.-44     	; 0x11ea <nwkTxDelayTimerHandler+0x18>
    1216:	11 23       	and	r17, r17
    1218:	11 f0       	breq	.+4      	; 0x121e <nwkTxDelayTimerHandler+0x4c>
    121a:	c7 01       	movw	r24, r14
    121c:	86 d3       	rcall	.+1804   	; 0x192a <SYS_TimerStart>
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	08 95       	ret

0000122a <nwkTxAckWaitTimerHandler>:
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	7c 01       	movw	r14, r24
    1238:	10 e0       	ldi	r17, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	01 e0       	ldi	r16, 0x01	; 1
    1240:	d7 e1       	ldi	r29, 0x17	; 23
    1242:	c0 e1       	ldi	r28, 0x10	; 16
    1244:	16 c0       	rjmp	.+44     	; 0x1272 <nwkTxAckWaitTimerHandler+0x48>
    1246:	fc 01       	movw	r30, r24
    1248:	20 81       	ld	r18, Z
    124a:	26 31       	cpi	r18, 0x16	; 22
    124c:	91 f4       	brne	.+36     	; 0x1272 <nwkTxAckWaitTimerHandler+0x48>
    124e:	ec 57       	subi	r30, 0x7C	; 124
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	20 81       	ld	r18, Z
    1254:	31 81       	ldd	r19, Z+1	; 0x01
    1256:	21 50       	subi	r18, 0x01	; 1
    1258:	31 09       	sbc	r19, r1
    125a:	31 83       	std	Z+1, r19	; 0x01
    125c:	20 83       	st	Z, r18
    125e:	23 2b       	or	r18, r19
    1260:	39 f4       	brne	.+14     	; 0x1270 <nwkTxAckWaitTimerHandler+0x46>
    1262:	fc 01       	movw	r30, r24
    1264:	d0 83       	st	Z, r29
    1266:	ed 57       	subi	r30, 0x7D	; 125
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	c0 83       	st	Z, r28
    126c:	10 2f       	mov	r17, r16
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <nwkTxAckWaitTimerHandler+0x48>
    1270:	10 2f       	mov	r17, r16
    1272:	28 db       	rcall	.-2480   	; 0x8c4 <nwkFrameNext>
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	39 f7       	brne	.-50     	; 0x1246 <nwkTxAckWaitTimerHandler+0x1c>
    1278:	11 23       	and	r17, r17
    127a:	11 f0       	breq	.+4      	; 0x1280 <nwkTxAckWaitTimerHandler+0x56>
    127c:	c7 01       	movw	r24, r14
    127e:	55 d3       	rcall	.+1706   	; 0x192a <SYS_TimerStart>
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	08 95       	ret

0000128e <nwkTxInit>:
    128e:	10 92 ae 18 	sts	0x18AE, r1	; 0x8018ae <nwkTxPhyActiveFrame+0x1>
    1292:	10 92 ad 18 	sts	0x18AD, r1	; 0x8018ad <nwkTxPhyActiveFrame>
    1296:	e0 ea       	ldi	r30, 0xA0	; 160
    1298:	f8 e1       	ldi	r31, 0x18	; 24
    129a:	82 e3       	ldi	r24, 0x32	; 50
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	86 83       	std	Z+6, r24	; 0x06
    12a4:	97 83       	std	Z+7, r25	; 0x07
    12a6:	a0 87       	std	Z+8, r26	; 0x08
    12a8:	b1 87       	std	Z+9, r27	; 0x09
    12aa:	12 86       	std	Z+10, r1	; 0x0a
    12ac:	85 e1       	ldi	r24, 0x15	; 21
    12ae:	99 e0       	ldi	r25, 0x09	; 9
    12b0:	94 87       	std	Z+12, r25	; 0x0c
    12b2:	83 87       	std	Z+11, r24	; 0x0b
    12b4:	e3 e9       	ldi	r30, 0x93	; 147
    12b6:	f8 e1       	ldi	r31, 0x18	; 24
    12b8:	8a e0       	ldi	r24, 0x0A	; 10
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a0 e0       	ldi	r26, 0x00	; 0
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	86 83       	std	Z+6, r24	; 0x06
    12c2:	97 83       	std	Z+7, r25	; 0x07
    12c4:	a0 87       	std	Z+8, r26	; 0x08
    12c6:	b1 87       	std	Z+9, r27	; 0x09
    12c8:	12 86       	std	Z+10, r1	; 0x0a
    12ca:	89 ee       	ldi	r24, 0xE9	; 233
    12cc:	98 e0       	ldi	r25, 0x08	; 8
    12ce:	94 87       	std	Z+12, r25	; 0x0c
    12d0:	83 87       	std	Z+11, r24	; 0x0b
    12d2:	08 95       	ret

000012d4 <nwkTxFrame>:
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
    12da:	fc 01       	movw	r30, r24
    12dc:	ea 57       	subi	r30, 0x7A	; 122
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	80 81       	ld	r24, Z
    12e2:	81 ff       	sbrs	r24, 1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <nwkTxFrame+0x18>
    12e6:	92 e1       	ldi	r25, 0x12	; 18
    12e8:	98 83       	st	Y, r25
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <nwkTxFrame+0x1c>
    12ec:	92 e1       	ldi	r25, 0x12	; 18
    12ee:	98 83       	st	Y, r25
    12f0:	fe 01       	movw	r30, r28
    12f2:	ed 57       	subi	r30, 0x7D	; 125
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	10 82       	st	Z, r1
    12f8:	80 ff       	sbrs	r24, 0
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <nwkTxFrame+0x32>
    12fc:	2f ef       	ldi	r18, 0xFF	; 255
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	3e 83       	std	Y+6, r19	; 0x06
    1302:	2d 83       	std	Y+5, r18	; 0x05
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <nwkTxFrame+0x3e>
    1306:	20 91 38 19 	lds	r18, 0x1938	; 0x801938 <nwkIb+0x2>
    130a:	30 91 39 19 	lds	r19, 0x1939	; 0x801939 <nwkIb+0x3>
    130e:	3e 83       	std	Y+6, r19	; 0x06
    1310:	2d 83       	std	Y+5, r18	; 0x05
    1312:	85 70       	andi	r24, 0x05	; 5
    1314:	19 f4       	brne	.+6      	; 0x131c <nwkTxFrame+0x48>
    1316:	ce 01       	movw	r24, r28
    1318:	31 dc       	rcall	.-1950   	; 0xb7c <nwkRoutePrepareTx>
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <nwkTxFrame+0x50>
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	98 89       	ldd	r25, Y+16	; 0x10
    1320:	98 87       	std	Y+8, r25	; 0x08
    1322:	8f 83       	std	Y+7, r24	; 0x07
    1324:	e6 e3       	ldi	r30, 0x36	; 54
    1326:	f9 e1       	ldi	r31, 0x19	; 25
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	9a 87       	std	Y+10, r25	; 0x0a
    132e:	89 87       	std	Y+9, r24	; 0x09
    1330:	85 81       	ldd	r24, Z+5	; 0x05
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	85 83       	std	Z+5, r24	; 0x05
    1336:	8c 83       	std	Y+4, r24	; 0x04
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	69 f4       	brne	.+26     	; 0x135a <nwkTxFrame+0x86>
    1340:	81 e4       	ldi	r24, 0x41	; 65
    1342:	98 e8       	ldi	r25, 0x88	; 136
    1344:	9b 83       	std	Y+3, r25	; 0x03
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	cf d3       	rcall	.+1950   	; 0x1ae8 <rand>
    134a:	cc 57       	subi	r28, 0x7C	; 124
    134c:	df 4f       	sbci	r29, 0xFF	; 255
    134e:	87 70       	andi	r24, 0x07	; 7
    1350:	99 27       	eor	r25, r25
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	99 83       	std	Y+1, r25	; 0x01
    1356:	88 83       	st	Y, r24
    1358:	08 c0       	rjmp	.+16     	; 0x136a <nwkTxFrame+0x96>
    135a:	81 e6       	ldi	r24, 0x61	; 97
    135c:	98 e8       	ldi	r25, 0x88	; 136
    135e:	9b 83       	std	Y+3, r25	; 0x03
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	cc 57       	subi	r28, 0x7C	; 124
    1364:	df 4f       	sbci	r29, 0xFF	; 255
    1366:	19 82       	std	Y+1, r1	; 0x01
    1368:	18 82       	st	Y, r1
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <nwkTxBroadcastFrame>:
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	8c 01       	movw	r16, r24
    137a:	61 da       	rcall	.-2878   	; 0x83e <nwkFrameAlloc>
    137c:	ec 01       	movw	r28, r24
    137e:	89 2b       	or	r24, r25
    1380:	a9 f1       	breq	.+106    	; 0x13ec <nwkTxBroadcastFrame+0x7c>
    1382:	82 e1       	ldi	r24, 0x12	; 18
    1384:	88 83       	st	Y, r24
    1386:	f8 01       	movw	r30, r16
    1388:	81 81       	ldd	r24, Z+1	; 0x01
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	fe 01       	movw	r30, r28
    138e:	ed 57       	subi	r30, 0x7D	; 125
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	10 82       	st	Z, r1
    1394:	a9 d3       	rcall	.+1874   	; 0x1ae8 <rand>
    1396:	fe 01       	movw	r30, r28
    1398:	ec 57       	subi	r30, 0x7C	; 124
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	87 70       	andi	r24, 0x07	; 7
    139e:	99 27       	eor	r25, r25
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
    13a6:	33 96       	adiw	r30, 0x03	; 3
    13a8:	11 82       	std	Z+1, r1	; 0x01
    13aa:	10 82       	st	Z, r1
    13ac:	f8 01       	movw	r30, r16
    13ae:	41 81       	ldd	r20, Z+1	; 0x01
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	b8 01       	movw	r22, r16
    13b4:	6e 5f       	subi	r22, 0xFE	; 254
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	ce 01       	movw	r24, r28
    13ba:	02 96       	adiw	r24, 0x02	; 2
    13bc:	a3 d3       	rcall	.+1862   	; 0x1b04 <memcpy>
    13be:	81 e4       	ldi	r24, 0x41	; 65
    13c0:	98 e8       	ldi	r25, 0x88	; 136
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	98 87       	std	Y+8, r25	; 0x08
    13cc:	8f 83       	std	Y+7, r24	; 0x07
    13ce:	f8 01       	movw	r30, r16
    13d0:	85 81       	ldd	r24, Z+5	; 0x05
    13d2:	96 81       	ldd	r25, Z+6	; 0x06
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	e6 e3       	ldi	r30, 0x36	; 54
    13da:	f9 e1       	ldi	r31, 0x19	; 25
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	9a 87       	std	Y+10, r25	; 0x0a
    13e2:	89 87       	std	Y+9, r24	; 0x09
    13e4:	85 81       	ldd	r24, Z+5	; 0x05
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	85 83       	std	Z+5, r24	; 0x05
    13ea:	8c 83       	std	Y+4, r24	; 0x04
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <nwkTxAckReceived>:
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	fc 01       	movw	r30, r24
    13fc:	21 85       	ldd	r18, Z+9	; 0x09
    13fe:	23 30       	cpi	r18, 0x03	; 3
    1400:	d9 f4       	brne	.+54     	; 0x1438 <nwkTxAckReceived+0x42>
    1402:	10 c0       	rjmp	.+32     	; 0x1424 <nwkTxAckReceived+0x2e>
    1404:	fc 01       	movw	r30, r24
    1406:	20 81       	ld	r18, Z
    1408:	26 31       	cpi	r18, 0x16	; 22
    140a:	89 f4       	brne	.+34     	; 0x142e <nwkTxAckReceived+0x38>
    140c:	34 85       	ldd	r19, Z+12	; 0x0c
    140e:	29 81       	ldd	r18, Y+1	; 0x01
    1410:	32 13       	cpse	r19, r18
    1412:	0d c0       	rjmp	.+26     	; 0x142e <nwkTxAckReceived+0x38>
    1414:	27 e1       	ldi	r18, 0x17	; 23
    1416:	20 83       	st	Z, r18
    1418:	2a 81       	ldd	r18, Y+2	; 0x02
    141a:	ea 57       	subi	r30, 0x7A	; 122
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	20 83       	st	Z, r18
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	0b c0       	rjmp	.+22     	; 0x143a <nwkTxAckReceived+0x44>
    1424:	fc 01       	movw	r30, r24
    1426:	c7 81       	ldd	r28, Z+7	; 0x07
    1428:	d0 85       	ldd	r29, Z+8	; 0x08
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	4a da       	rcall	.-2924   	; 0x8c4 <nwkFrameNext>
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	41 f7       	brne	.-48     	; 0x1404 <nwkTxAckReceived+0xe>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	01 c0       	rjmp	.+2      	; 0x143a <nwkTxAckReceived+0x44>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1440:	e0 91 ad 18 	lds	r30, 0x18AD	; 0x8018ad <nwkTxPhyActiveFrame>
    1444:	f0 91 ae 18 	lds	r31, 0x18AE	; 0x8018ae <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	21 f0       	breq	.+8      	; 0x1454 <PHY_DataConf+0x14>
    144c:	48 f0       	brcs	.+18     	; 0x1460 <PHY_DataConf+0x20>
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	19 f0       	breq	.+6      	; 0x1458 <PHY_DataConf+0x18>
    1452:	04 c0       	rjmp	.+8      	; 0x145c <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1458:	81 e2       	ldi	r24, 0x21	; 33
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1460:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1462:	df 01       	movw	r26, r30
    1464:	ad 57       	subi	r26, 0x7D	; 125
    1466:	bf 4f       	sbci	r27, 0xFF	; 255
    1468:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    146a:	85 e1       	ldi	r24, 0x15	; 21
    146c:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    146e:	10 92 ae 18 	sts	0x18AE, r1	; 0x8018ae <nwkTxPhyActiveFrame+0x1>
    1472:	10 92 ad 18 	sts	0x18AD, r1	; 0x8018ad <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1476:	e6 e3       	ldi	r30, 0x36	; 54
    1478:	f9 e1       	ldi	r31, 0x19	; 25
    147a:	86 a1       	ldd	r24, Z+38	; 0x26
    147c:	97 a1       	ldd	r25, Z+39	; 0x27
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	97 a3       	std	Z+39, r25	; 0x27
    1482:	86 a3       	std	Z+38, r24	; 0x26
    1484:	08 95       	ret

00001486 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1486:	9f 92       	push	r9
    1488:	af 92       	push	r10
    148a:	bf 92       	push	r11
    148c:	cf 92       	push	r12
    148e:	df 92       	push	r13
    1490:	ef 92       	push	r14
    1492:	ff 92       	push	r15
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    149c:	c0 e0       	ldi	r28, 0x00	; 0
    149e:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    14a0:	0f 2e       	mov	r0, r31
    14a2:	f4 e1       	ldi	r31, 0x14	; 20
    14a4:	af 2e       	mov	r10, r31
    14a6:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    14a8:	06 e3       	ldi	r16, 0x36	; 54
    14aa:	19 e1       	ldi	r17, 0x19	; 25
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    14ac:	0f 2e       	mov	r0, r31
    14ae:	f7 e1       	ldi	r31, 0x17	; 23
    14b0:	df 2e       	mov	r13, r31
    14b2:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    14b4:	0f 2e       	mov	r0, r31
    14b6:	f6 e1       	ldi	r31, 0x16	; 22
    14b8:	9f 2e       	mov	r9, r31
    14ba:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    14bc:	0f 2e       	mov	r0, r31
    14be:	f9 e2       	ldi	r31, 0x29	; 41
    14c0:	ef 2e       	mov	r14, r31
    14c2:	f1 2c       	mov	r15, r1
    14c4:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    14c6:	0f 2e       	mov	r0, r31
    14c8:	f3 e1       	ldi	r31, 0x13	; 19
    14ca:	cf 2e       	mov	r12, r31
    14cc:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    14ce:	0f 2e       	mov	r0, r31
    14d0:	f1 e1       	ldi	r31, 0x11	; 17
    14d2:	bf 2e       	mov	r11, r31
    14d4:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    14d6:	60 c0       	rjmp	.+192    	; 0x1598 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    14d8:	88 81       	ld	r24, Y
    14da:	83 31       	cpi	r24, 0x13	; 19
    14dc:	c1 f0       	breq	.+48     	; 0x150e <nwkTxTaskHandler+0x88>
    14de:	18 f4       	brcc	.+6      	; 0x14e6 <nwkTxTaskHandler+0x60>
    14e0:	82 31       	cpi	r24, 0x12	; 18
    14e2:	39 f0       	breq	.+14     	; 0x14f2 <nwkTxTaskHandler+0x6c>
    14e4:	59 c0       	rjmp	.+178    	; 0x1598 <nwkTxTaskHandler+0x112>
    14e6:	85 31       	cpi	r24, 0x15	; 21
    14e8:	49 f1       	breq	.+82     	; 0x153c <nwkTxTaskHandler+0xb6>
    14ea:	87 31       	cpi	r24, 0x17	; 23
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <nwkTxTaskHandler+0x6a>
    14ee:	45 c0       	rjmp	.+138    	; 0x157a <nwkTxTaskHandler+0xf4>
    14f0:	53 c0       	rjmp	.+166    	; 0x1598 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    14f2:	fe 01       	movw	r30, r28
    14f4:	ec 57       	subi	r30, 0x7C	; 124
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	89 2b       	or	r24, r25
    14fe:	29 f0       	breq	.+10     	; 0x150a <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1500:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1502:	83 e9       	ldi	r24, 0x93	; 147
    1504:	98 e1       	ldi	r25, 0x18	; 24
    1506:	11 d2       	rcall	.+1058   	; 0x192a <SYS_TimerStart>
    1508:	47 c0       	rjmp	.+142    	; 0x1598 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    150a:	c8 82       	st	Y, r12
    150c:	45 c0       	rjmp	.+138    	; 0x1598 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    150e:	80 91 ad 18 	lds	r24, 0x18AD	; 0x8018ad <nwkTxPhyActiveFrame>
    1512:	90 91 ae 18 	lds	r25, 0x18AE	; 0x8018ae <nwkTxPhyActiveFrame+0x1>
    1516:	89 2b       	or	r24, r25
    1518:	09 f0       	breq	.+2      	; 0x151c <nwkTxTaskHandler+0x96>
    151a:	3e c0       	rjmp	.+124    	; 0x1598 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    151c:	d0 93 ae 18 	sts	0x18AE, r29	; 0x8018ae <nwkTxPhyActiveFrame+0x1>
    1520:	c0 93 ad 18 	sts	0x18AD, r28	; 0x8018ad <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1524:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1526:	69 81       	ldd	r22, Y+1	; 0x01
    1528:	ce 01       	movw	r24, r28
    152a:	02 96       	adiw	r24, 0x02	; 2
    152c:	cb d0       	rcall	.+406    	; 0x16c4 <PHY_DataReq>
          nwkIb.lock++;
    152e:	f8 01       	movw	r30, r16
    1530:	86 a1       	ldd	r24, Z+38	; 0x26
    1532:	97 a1       	ldd	r25, Z+39	; 0x27
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	97 a3       	std	Z+39, r25	; 0x27
    1538:	86 a3       	std	Z+38, r24	; 0x26
    153a:	2e c0       	rjmp	.+92     	; 0x1598 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    153c:	fe 01       	movw	r30, r28
    153e:	ed 57       	subi	r30, 0x7D	; 125
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	81 11       	cpse	r24, r1
    1546:	17 c0       	rjmp	.+46     	; 0x1576 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    1548:	2d 85       	ldd	r18, Y+13	; 0x0d
    154a:	3e 85       	ldd	r19, Y+14	; 0x0e
    154c:	f8 01       	movw	r30, r16
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	28 17       	cp	r18, r24
    1554:	39 07       	cpc	r19, r25
    1556:	69 f4       	brne	.+26     	; 0x1572 <nwkTxTaskHandler+0xec>
    1558:	8b 85       	ldd	r24, Y+11	; 0x0b
    155a:	80 ff       	sbrs	r24, 0
    155c:	0a c0       	rjmp	.+20     	; 0x1572 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    155e:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1560:	fe 01       	movw	r30, r28
    1562:	ec 57       	subi	r30, 0x7C	; 124
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	f1 82       	std	Z+1, r15	; 0x01
    1568:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    156a:	80 ea       	ldi	r24, 0xA0	; 160
    156c:	98 e1       	ldi	r25, 0x18	; 24
    156e:	dd d1       	rcall	.+954    	; 0x192a <SYS_TimerStart>
    1570:	13 c0       	rjmp	.+38     	; 0x1598 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1572:	d8 82       	st	Y, r13
    1574:	11 c0       	rjmp	.+34     	; 0x1598 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1576:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <nwkTxTaskHandler+0x112>
    157a:	ce 01       	movw	r24, r28
    157c:	b8 da       	rcall	.-2704   	; 0xaee <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    157e:	fe 01       	movw	r30, r28
    1580:	e9 57       	subi	r30, 0x79	; 121
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	01 90       	ld	r0, Z+
    1586:	f0 81       	ld	r31, Z
    1588:	e0 2d       	mov	r30, r0
    158a:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    158c:	19 f4       	brne	.+6      	; 0x1594 <nwkTxTaskHandler+0x10e>
    158e:	ce 01       	movw	r24, r28
    1590:	8f d9       	rcall	.-3298   	; 0x8b0 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <nwkTxTaskHandler+0x112>
    1594:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1596:	19 95       	eicall
    1598:	ce 01       	movw	r24, r28
    159a:	94 d9       	rcall	.-3288   	; 0x8c4 <nwkFrameNext>
    159c:	ec 01       	movw	r28, r24
    159e:	89 2b       	or	r24, r25
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <nwkTxTaskHandler+0x11e>
    15a2:	9a cf       	rjmp	.-204    	; 0x14d8 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	9f 90       	pop	r9
    15ba:	08 95       	ret

000015bc <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    15bc:	80 91 af 18 	lds	r24, 0x18AF	; 0x8018af <phyBand>
    15c0:	98 2f       	mov	r25, r24
    15c2:	9f 70       	andi	r25, 0x0F	; 15
    15c4:	e4 e5       	ldi	r30, 0x54	; 84
    15c6:	f1 e0       	ldi	r31, 0x01	; 1
    15c8:	80 81       	ld	r24, Z
    15ca:	80 7f       	andi	r24, 0xF0	; 240
    15cc:	89 2b       	or	r24, r25
    15ce:	80 83       	st	Z, r24
    15d0:	80 91 af 18 	lds	r24, 0x18AF	; 0x8018af <phyBand>
    15d4:	88 23       	and	r24, r24
    15d6:	29 f0       	breq	.+10     	; 0x15e2 <phySetChannel+0x26>
    15d8:	80 91 b0 18 	lds	r24, 0x18B0	; 0x8018b0 <phyChannel>
    15dc:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    15e0:	08 95       	ret
    15e2:	80 91 b0 18 	lds	r24, 0x18B0	; 0x8018b0 <phyChannel>
    15e6:	98 2f       	mov	r25, r24
    15e8:	9f 71       	andi	r25, 0x1F	; 31
    15ea:	e8 e4       	ldi	r30, 0x48	; 72
    15ec:	f1 e0       	ldi	r31, 0x01	; 1
    15ee:	80 81       	ld	r24, Z
    15f0:	80 7e       	andi	r24, 0xE0	; 224
    15f2:	89 2b       	or	r24, r25
    15f4:	80 83       	st	Z, r24
    15f6:	08 95       	ret

000015f8 <phyTrxSetState>:
    15f8:	93 e0       	ldi	r25, 0x03	; 3
    15fa:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    15fe:	e1 e4       	ldi	r30, 0x41	; 65
    1600:	f1 e0       	ldi	r31, 0x01	; 1
    1602:	90 81       	ld	r25, Z
    1604:	9f 71       	andi	r25, 0x1F	; 31
    1606:	98 30       	cpi	r25, 0x08	; 8
    1608:	e1 f7       	brne	.-8      	; 0x1602 <phyTrxSetState+0xa>
    160a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    160e:	e1 e4       	ldi	r30, 0x41	; 65
    1610:	f1 e0       	ldi	r31, 0x01	; 1
    1612:	90 81       	ld	r25, Z
    1614:	9f 71       	andi	r25, 0x1F	; 31
    1616:	89 13       	cpse	r24, r25
    1618:	fc cf       	rjmp	.-8      	; 0x1612 <phyTrxSetState+0x1a>
    161a:	08 95       	ret

0000161c <phySetRxState>:
    161c:	88 e0       	ldi	r24, 0x08	; 8
    161e:	ec df       	rcall	.-40     	; 0x15f8 <phyTrxSetState>
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1626:	80 91 b1 18 	lds	r24, 0x18B1	; 0x8018b1 <phyRxState>
    162a:	88 23       	and	r24, r24
    162c:	11 f0       	breq	.+4      	; 0x1632 <phySetRxState+0x16>
    162e:	86 e1       	ldi	r24, 0x16	; 22
    1630:	e3 cf       	rjmp	.-58     	; 0x15f8 <phyTrxSetState>
    1632:	08 95       	ret

00001634 <PHY_Init>:
    1634:	e9 e3       	ldi	r30, 0x39	; 57
    1636:	f1 e0       	ldi	r31, 0x01	; 1
    1638:	80 81       	ld	r24, Z
    163a:	81 60       	ori	r24, 0x01	; 1
    163c:	80 83       	st	Z, r24
    163e:	10 92 b1 18 	sts	0x18B1, r1	; 0x8018b1 <phyRxState>
    1642:	10 92 af 18 	sts	0x18AF, r1	; 0x8018af <phyBand>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	80 93 32 19 	sts	0x1932, r24	; 0x801932 <phyState>
    164c:	88 e0       	ldi	r24, 0x08	; 8
    164e:	d4 df       	rcall	.-88     	; 0x15f8 <phyTrxSetState>
    1650:	8b ee       	ldi	r24, 0xEB	; 235
    1652:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    1656:	ec e4       	ldi	r30, 0x4C	; 76
    1658:	f1 e0       	ldi	r31, 0x01	; 1
    165a:	80 81       	ld	r24, Z
    165c:	80 68       	ori	r24, 0x80	; 128
    165e:	80 83       	st	Z, r24
    1660:	08 95       	ret

00001662 <PHY_SetRxState>:
    1662:	80 93 b1 18 	sts	0x18B1, r24	; 0x8018b1 <phyRxState>
    1666:	da cf       	rjmp	.-76     	; 0x161c <phySetRxState>
    1668:	08 95       	ret

0000166a <PHY_SetChannel>:
    166a:	80 93 b0 18 	sts	0x18B0, r24	; 0x8018b0 <phyChannel>
    166e:	a6 cf       	rjmp	.-180    	; 0x15bc <phySetChannel>
    1670:	08 95       	ret

00001672 <PHY_SetPanId>:
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	1f 92       	push	r1
    1678:	1f 92       	push	r1
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <PHY_SetShortAddr>:
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	1f 92       	push	r1
    169c:	1f 92       	push	r1
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    16b0:	99 81       	ldd	r25, Y+1	; 0x01
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	89 0f       	add	r24, r25
    16b6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

000016c4 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	18 2f       	mov	r17, r24
    16cc:	d9 2f       	mov	r29, r25
    16ce:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    16d0:	89 e1       	ldi	r24, 0x19	; 25
    16d2:	92 df       	rcall	.-220    	; 0x15f8 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	8c 0f       	add	r24, r28
    16de:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    16e2:	cc 23       	and	r28, r28
    16e4:	71 f0       	breq	.+28     	; 0x1702 <PHY_DataReq+0x3e>
    16e6:	a1 2f       	mov	r26, r17
    16e8:	bd 2f       	mov	r27, r29
    16ea:	c1 50       	subi	r28, 0x01	; 1
    16ec:	6c 2f       	mov	r22, r28
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	6e 57       	subi	r22, 0x7E	; 126
    16f2:	7e 4f       	sbci	r23, 0xFE	; 254
    16f4:	e1 e8       	ldi	r30, 0x81	; 129
    16f6:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    16f8:	8d 91       	ld	r24, X+
    16fa:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    16fc:	e6 17       	cp	r30, r22
    16fe:	f7 07       	cpc	r31, r23
    1700:	d9 f7       	brne	.-10     	; 0x16f8 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	80 93 32 19 	sts	0x1932, r24	; 0x801932 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	08 95       	ret

00001716 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	00 d0       	rcall	.+0      	; 0x171e <PHY_TaskHandler+0x8>
    171e:	1f 92       	push	r1
    1720:	1f 92       	push	r1
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1726:	80 91 32 19 	lds	r24, 0x1932	; 0x801932 <phyState>
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	09 f4       	brne	.+2      	; 0x1730 <PHY_TaskHandler+0x1a>
    172e:	65 c0       	rjmp	.+202    	; 0x17fa <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1730:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1734:	83 ff       	sbrs	r24, 3
    1736:	3e c0       	rjmp	.+124    	; 0x17b4 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    1738:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    173c:	6a 2f       	mov	r22, r26
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	ab 01       	movw	r20, r22
    1742:	4f 5f       	subi	r20, 0xFF	; 255
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    174c:	fc 01       	movw	r30, r24
    174e:	e0 58       	subi	r30, 0x80	; 128
    1750:	fe 4f       	sbci	r31, 0xFE	; 254
    1752:	30 81       	ld	r19, Z
    1754:	fc 01       	movw	r30, r24
    1756:	ee 54       	subi	r30, 0x4E	; 78
    1758:	f7 4e       	sbci	r31, 0xE7	; 231
    175a:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	82 2f       	mov	r24, r18
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	84 17       	cp	r24, r20
    1764:	95 07       	cpc	r25, r21
    1766:	94 f3       	brlt	.-28     	; 0x174c <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1768:	82 eb       	ldi	r24, 0xB2	; 178
    176a:	98 e1       	ldi	r25, 0x18	; 24
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1770:	a2 50       	subi	r26, 0x02	; 2
    1772:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1774:	fb 01       	movw	r30, r22
    1776:	ee 54       	subi	r30, 0x4E	; 78
    1778:	f7 4e       	sbci	r31, 0xE7	; 231
    177a:	80 81       	ld	r24, Z
    177c:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    177e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1782:	8a 55       	subi	r24, 0x5A	; 90
    1784:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	bd da       	rcall	.-2694   	; 0xd06 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    178c:	e1 e4       	ldi	r30, 0x41	; 65
    178e:	f1 e0       	ldi	r31, 0x01	; 1
    1790:	80 81       	ld	r24, Z
    1792:	8f 71       	andi	r24, 0x1F	; 31
    1794:	86 31       	cpi	r24, 0x16	; 22
    1796:	e1 f7       	brne	.-8      	; 0x1790 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1798:	ef e4       	ldi	r30, 0x4F	; 79
    179a:	f1 e0       	ldi	r31, 0x01	; 1
    179c:	80 81       	ld	r24, Z
    179e:	88 60       	ori	r24, 0x08	; 8
    17a0:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    17a2:	ec e4       	ldi	r30, 0x4C	; 76
    17a4:	f1 e0       	ldi	r31, 0x01	; 1
    17a6:	80 81       	ld	r24, Z
    17a8:	8f 77       	andi	r24, 0x7F	; 127
    17aa:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    17ac:	80 81       	ld	r24, Z
    17ae:	80 68       	ori	r24, 0x80	; 128
    17b0:	80 83       	st	Z, r24
    17b2:	23 c0       	rjmp	.+70     	; 0x17fa <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    17b4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    17b8:	86 ff       	sbrs	r24, 6
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    17bc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    17c0:	8f 71       	andi	r24, 0x1F	; 31
    17c2:	89 31       	cpi	r24, 0x19	; 25
    17c4:	a9 f4       	brne	.+42     	; 0x17f0 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    17c6:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    17ca:	12 95       	swap	r17
    17cc:	16 95       	lsr	r17
    17ce:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    17d2:	13 30       	cpi	r17, 0x03	; 3
    17d4:	21 f0       	breq	.+8      	; 0x17de <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    17d6:	15 30       	cpi	r17, 0x05	; 5
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    17da:	13 e0       	ldi	r17, 0x03	; 3
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    17de:	11 e0       	ldi	r17, 0x01	; 1
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    17e2:	12 e0       	ldi	r17, 0x02	; 2
    17e4:	1b df       	rcall	.-458    	; 0x161c <phySetRxState>
      phyState = PHY_STATE_IDLE;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	80 93 32 19 	sts	0x1932, r24	; 0x801932 <phyState>

      PHY_DataConf(status);
    17ec:	81 2f       	mov	r24, r17
    17ee:	28 de       	rcall	.-944    	; 0x1440 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    17f0:	ef e4       	ldi	r30, 0x4F	; 79
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	80 81       	ld	r24, Z
    17f6:	80 64       	ori	r24, 0x40	; 64
    17f8:	80 83       	st	Z, r24
  }
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	08 95       	ret

0000180c <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    180c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <HAL_Init>
  SYS_TimerInit();
    1810:	6d d0       	rcall	.+218    	; 0x18ec <SYS_TimerInit>
  PHY_Init();
    1812:	10 df       	rcall	.-480    	; 0x1634 <PHY_Init>
    1814:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <NWK_Init>
  NWK_Init();
    1818:	08 95       	ret

0000181a <SYS_TaskHandler>:
    181a:	7d df       	rcall	.-262    	; 0x1716 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    181c:	0e 94 21 03 	call	0x642	; 0x642 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1820:	8f c0       	rjmp	.+286    	; 0x1940 <SYS_TimerTaskHandler>
    1822:	08 95       	ret

00001824 <placeTimer>:

      break;
    }
    prev = t;
  }
}
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	ec 01       	movw	r28, r24
    182e:	80 91 33 19 	lds	r24, 0x1933	; 0x801933 <timers>
    1832:	90 91 34 19 	lds	r25, 0x1934	; 0x801934 <timers+0x1>
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	09 f4       	brne	.+2      	; 0x183c <placeTimer+0x18>
    183a:	45 c0       	rjmp	.+138    	; 0x18c6 <placeTimer+0xa2>
    183c:	4e 81       	ldd	r20, Y+6	; 0x06
    183e:	5f 81       	ldd	r21, Y+7	; 0x07
    1840:	68 85       	ldd	r22, Y+8	; 0x08
    1842:	79 85       	ldd	r23, Y+9	; 0x09
    1844:	fc 01       	movw	r30, r24
    1846:	02 81       	ldd	r16, Z+2	; 0x02
    1848:	13 81       	ldd	r17, Z+3	; 0x03
    184a:	24 81       	ldd	r18, Z+4	; 0x04
    184c:	35 81       	ldd	r19, Z+5	; 0x05
    184e:	40 17       	cp	r20, r16
    1850:	51 07       	cpc	r21, r17
    1852:	62 07       	cpc	r22, r18
    1854:	73 07       	cpc	r23, r19
    1856:	60 f0       	brcs	.+24     	; 0x1870 <placeTimer+0x4c>
    1858:	dc 01       	movw	r26, r24
    185a:	17 c0       	rjmp	.+46     	; 0x188a <placeTimer+0x66>
    185c:	02 81       	ldd	r16, Z+2	; 0x02
    185e:	13 81       	ldd	r17, Z+3	; 0x03
    1860:	24 81       	ldd	r18, Z+4	; 0x04
    1862:	35 81       	ldd	r19, Z+5	; 0x05
    1864:	40 17       	cp	r20, r16
    1866:	51 07       	cpc	r21, r17
    1868:	62 07       	cpc	r22, r18
    186a:	73 07       	cpc	r23, r19
    186c:	68 f4       	brcc	.+26     	; 0x1888 <placeTimer+0x64>
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <placeTimer+0x52>
    1870:	fc 01       	movw	r30, r24
    1872:	a0 e0       	ldi	r26, 0x00	; 0
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	04 1b       	sub	r16, r20
    1878:	15 0b       	sbc	r17, r21
    187a:	26 0b       	sbc	r18, r22
    187c:	37 0b       	sbc	r19, r23
    187e:	02 83       	std	Z+2, r16	; 0x02
    1880:	13 83       	std	Z+3, r17	; 0x03
    1882:	24 83       	std	Z+4, r18	; 0x04
    1884:	35 83       	std	Z+5, r19	; 0x05
    1886:	0a c0       	rjmp	.+20     	; 0x189c <placeTimer+0x78>
    1888:	df 01       	movw	r26, r30
    188a:	40 1b       	sub	r20, r16
    188c:	51 0b       	sbc	r21, r17
    188e:	62 0b       	sbc	r22, r18
    1890:	73 0b       	sbc	r23, r19
    1892:	ed 91       	ld	r30, X+
    1894:	fc 91       	ld	r31, X
    1896:	11 97       	sbiw	r26, 0x01	; 1
    1898:	30 97       	sbiw	r30, 0x00	; 0
    189a:	01 f7       	brne	.-64     	; 0x185c <placeTimer+0x38>
    189c:	4a 83       	std	Y+2, r20	; 0x02
    189e:	5b 83       	std	Y+3, r21	; 0x03
    18a0:	6c 83       	std	Y+4, r22	; 0x04
    18a2:	7d 83       	std	Y+5, r23	; 0x05
    18a4:	10 97       	sbiw	r26, 0x00	; 0
    18a6:	41 f0       	breq	.+16     	; 0x18b8 <placeTimer+0x94>
    18a8:	8d 91       	ld	r24, X+
    18aa:	9c 91       	ld	r25, X
    18ac:	11 97       	sbiw	r26, 0x01	; 1
    18ae:	99 83       	std	Y+1, r25	; 0x01
    18b0:	88 83       	st	Y, r24
    18b2:	cd 93       	st	X+, r28
    18b4:	dc 93       	st	X, r29
    18b6:	15 c0       	rjmp	.+42     	; 0x18e2 <placeTimer+0xbe>
    18b8:	99 83       	std	Y+1, r25	; 0x01
    18ba:	88 83       	st	Y, r24
    18bc:	d0 93 34 19 	sts	0x1934, r29	; 0x801934 <timers+0x1>
    18c0:	c0 93 33 19 	sts	0x1933, r28	; 0x801933 <timers>
    18c4:	0e c0       	rjmp	.+28     	; 0x18e2 <placeTimer+0xbe>
    18c6:	19 82       	std	Y+1, r1	; 0x01
    18c8:	18 82       	st	Y, r1
    18ca:	8e 81       	ldd	r24, Y+6	; 0x06
    18cc:	9f 81       	ldd	r25, Y+7	; 0x07
    18ce:	a8 85       	ldd	r26, Y+8	; 0x08
    18d0:	b9 85       	ldd	r27, Y+9	; 0x09
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	9b 83       	std	Y+3, r25	; 0x03
    18d6:	ac 83       	std	Y+4, r26	; 0x04
    18d8:	bd 83       	std	Y+5, r27	; 0x05
    18da:	d0 93 34 19 	sts	0x1934, r29	; 0x801934 <timers+0x1>
    18de:	c0 93 33 19 	sts	0x1933, r28	; 0x801933 <timers>
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <SYS_TimerInit>:
    18ec:	10 92 34 19 	sts	0x1934, r1	; 0x801934 <timers+0x1>
    18f0:	10 92 33 19 	sts	0x1933, r1	; 0x801933 <timers>
    18f4:	08 95       	ret

000018f6 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    18f6:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <timers>
    18fa:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <timers+0x1>
    18fe:	30 97       	sbiw	r30, 0x00	; 0
    1900:	71 f0       	breq	.+28     	; 0x191e <SYS_TimerStarted+0x28>
    if (t == timer)
    1902:	e8 17       	cp	r30, r24
    1904:	f9 07       	cpc	r31, r25
    1906:	21 f4       	brne	.+8      	; 0x1910 <SYS_TimerStarted+0x1a>
    1908:	0c c0       	rjmp	.+24     	; 0x1922 <SYS_TimerStarted+0x2c>
    190a:	8e 17       	cp	r24, r30
    190c:	9f 07       	cpc	r25, r31
    190e:	59 f0       	breq	.+22     	; 0x1926 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1910:	01 90       	ld	r0, Z+
    1912:	f0 81       	ld	r31, Z
    1914:	e0 2d       	mov	r30, r0
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	c1 f7       	brne	.-16     	; 0x190a <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	08 95       	ret
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	08 95       	ret
    1926:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1928:	08 95       	ret

0000192a <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1930:	e2 df       	rcall	.-60     	; 0x18f6 <SYS_TimerStarted>
    1932:	81 11       	cpse	r24, r1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <SYS_TimerStart+0x10>
    placeTimer(timer);
    1936:	ce 01       	movw	r24, r28
    1938:	75 df       	rcall	.-278    	; 0x1824 <placeTimer>
}
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    194c:	80 91 35 19 	lds	r24, 0x1935	; 0x801935 <halTimerIrqCount>
    1950:	88 23       	and	r24, r24
    1952:	09 f4       	brne	.+2      	; 0x1956 <SYS_TimerTaskHandler+0x16>
    1954:	59 c0       	rjmp	.+178    	; 0x1a08 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1956:	8f b7       	in	r24, 0x3f	; 63
    1958:	f8 94       	cli
    cnt = halTimerIrqCount;
    195a:	c0 90 35 19 	lds	r12, 0x1935	; 0x801935 <halTimerIrqCount>
    halTimerIrqCount = 0;
    195e:	10 92 35 19 	sts	0x1935, r1	; 0x801935 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1962:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1964:	d1 2c       	mov	r13, r1
    1966:	e1 2c       	mov	r14, r1
    1968:	f1 2c       	mov	r15, r1
    196a:	cc 0c       	add	r12, r12
    196c:	dd 1c       	adc	r13, r13
    196e:	ee 1c       	adc	r14, r14
    1970:	ff 1c       	adc	r15, r15
    1972:	d7 01       	movw	r26, r14
    1974:	c6 01       	movw	r24, r12
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	aa 1f       	adc	r26, r26
    197c:	bb 1f       	adc	r27, r27
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	aa 1f       	adc	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	c8 0e       	add	r12, r24
    1988:	d9 1e       	adc	r13, r25
    198a:	ea 1e       	adc	r14, r26
    198c:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    198e:	c0 91 33 19 	lds	r28, 0x1933	; 0x801933 <timers>
    1992:	d0 91 34 19 	lds	r29, 0x1934	; 0x801934 <timers+0x1>
    1996:	20 97       	sbiw	r28, 0x00	; 0
    1998:	b9 f1       	breq	.+110    	; 0x1a08 <SYS_TimerTaskHandler+0xc8>
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	9b 81       	ldd	r25, Y+3	; 0x03
    199e:	ac 81       	ldd	r26, Y+4	; 0x04
    19a0:	bd 81       	ldd	r27, Y+5	; 0x05
    19a2:	c8 16       	cp	r12, r24
    19a4:	d9 06       	cpc	r13, r25
    19a6:	ea 06       	cpc	r14, r26
    19a8:	fb 06       	cpc	r15, r27
    19aa:	10 f1       	brcs	.+68     	; 0x19f0 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    19ac:	c8 1a       	sub	r12, r24
    19ae:	d9 0a       	sbc	r13, r25
    19b0:	ea 0a       	sbc	r14, r26
    19b2:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    19b4:	88 81       	ld	r24, Y
    19b6:	99 81       	ldd	r25, Y+1	; 0x01
    19b8:	90 93 34 19 	sts	0x1934, r25	; 0x801934 <timers+0x1>
    19bc:	80 93 33 19 	sts	0x1933, r24	; 0x801933 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    19c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	11 f4       	brne	.+4      	; 0x19ca <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    19c6:	ce 01       	movw	r24, r28
    19c8:	2d df       	rcall	.-422    	; 0x1824 <placeTimer>
    timer->handler(timer);
    19ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    19cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    19ce:	ce 01       	movw	r24, r28
    19d0:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    19d2:	c0 91 33 19 	lds	r28, 0x1933	; 0x801933 <timers>
    19d6:	d0 91 34 19 	lds	r29, 0x1934	; 0x801934 <timers+0x1>
    19da:	20 97       	sbiw	r28, 0x00	; 0
    19dc:	a9 f0       	breq	.+42     	; 0x1a08 <SYS_TimerTaskHandler+0xc8>
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	ac 81       	ldd	r26, Y+4	; 0x04
    19e4:	bd 81       	ldd	r27, Y+5	; 0x05
    19e6:	c8 16       	cp	r12, r24
    19e8:	d9 06       	cpc	r13, r25
    19ea:	ea 06       	cpc	r14, r26
    19ec:	fb 06       	cpc	r15, r27
    19ee:	f0 f6       	brcc	.-68     	; 0x19ac <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	ac 81       	ldd	r26, Y+4	; 0x04
    19f6:	bd 81       	ldd	r27, Y+5	; 0x05
    19f8:	8c 19       	sub	r24, r12
    19fa:	9d 09       	sbc	r25, r13
    19fc:	ae 09       	sbc	r26, r14
    19fe:	bf 09       	sbc	r27, r15
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	9b 83       	std	Y+3, r25	; 0x03
    1a04:	ac 83       	std	Y+4, r26	; 0x04
    1a06:	bd 83       	std	Y+5, r27	; 0x05
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	08 95       	ret

00001a16 <__udivmodsi4>:
    1a16:	a1 e2       	ldi	r26, 0x21	; 33
    1a18:	1a 2e       	mov	r1, r26
    1a1a:	aa 1b       	sub	r26, r26
    1a1c:	bb 1b       	sub	r27, r27
    1a1e:	fd 01       	movw	r30, r26
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <__udivmodsi4_ep>

00001a22 <__udivmodsi4_loop>:
    1a22:	aa 1f       	adc	r26, r26
    1a24:	bb 1f       	adc	r27, r27
    1a26:	ee 1f       	adc	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	a2 17       	cp	r26, r18
    1a2c:	b3 07       	cpc	r27, r19
    1a2e:	e4 07       	cpc	r30, r20
    1a30:	f5 07       	cpc	r31, r21
    1a32:	20 f0       	brcs	.+8      	; 0x1a3c <__udivmodsi4_ep>
    1a34:	a2 1b       	sub	r26, r18
    1a36:	b3 0b       	sbc	r27, r19
    1a38:	e4 0b       	sbc	r30, r20
    1a3a:	f5 0b       	sbc	r31, r21

00001a3c <__udivmodsi4_ep>:
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	1a 94       	dec	r1
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <__udivmodsi4_loop>
    1a48:	60 95       	com	r22
    1a4a:	70 95       	com	r23
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	9b 01       	movw	r18, r22
    1a52:	ac 01       	movw	r20, r24
    1a54:	bd 01       	movw	r22, r26
    1a56:	cf 01       	movw	r24, r30
    1a58:	08 95       	ret

00001a5a <do_rand>:
    1a5a:	8f 92       	push	r8
    1a5c:	9f 92       	push	r9
    1a5e:	af 92       	push	r10
    1a60:	bf 92       	push	r11
    1a62:	cf 92       	push	r12
    1a64:	df 92       	push	r13
    1a66:	ef 92       	push	r14
    1a68:	ff 92       	push	r15
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    1a70:	68 81       	ld	r22, Y
    1a72:	79 81       	ldd	r23, Y+1	; 0x01
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	9b 81       	ldd	r25, Y+3	; 0x03
    1a78:	61 15       	cp	r22, r1
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	81 05       	cpc	r24, r1
    1a7e:	91 05       	cpc	r25, r1
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <do_rand+0x30>
    1a82:	64 e2       	ldi	r22, 0x24	; 36
    1a84:	79 ed       	ldi	r23, 0xD9	; 217
    1a86:	8b e5       	ldi	r24, 0x5B	; 91
    1a88:	97 e0       	ldi	r25, 0x07	; 7
    1a8a:	2d e1       	ldi	r18, 0x1D	; 29
    1a8c:	33 ef       	ldi	r19, 0xF3	; 243
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	41 d0       	rcall	.+130    	; 0x1b16 <__divmodsi4>
    1a94:	49 01       	movw	r8, r18
    1a96:	5a 01       	movw	r10, r20
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	a7 ea       	ldi	r26, 0xA7	; 167
    1a9e:	b1 e4       	ldi	r27, 0x41	; 65
    1aa0:	56 d0       	rcall	.+172    	; 0x1b4e <__muluhisi3>
    1aa2:	6b 01       	movw	r12, r22
    1aa4:	7c 01       	movw	r14, r24
    1aa6:	ac ee       	ldi	r26, 0xEC	; 236
    1aa8:	b4 ef       	ldi	r27, 0xF4	; 244
    1aaa:	a5 01       	movw	r20, r10
    1aac:	94 01       	movw	r18, r8
    1aae:	5b d0       	rcall	.+182    	; 0x1b66 <__mulohisi3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8c 0d       	add	r24, r12
    1ab6:	9d 1d       	adc	r25, r13
    1ab8:	ae 1d       	adc	r26, r14
    1aba:	bf 1d       	adc	r27, r15
    1abc:	b7 ff       	sbrs	r27, 7
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <do_rand+0x6c>
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	a1 09       	sbc	r26, r1
    1ac4:	b0 48       	sbci	r27, 0x80	; 128
    1ac6:	88 83       	st	Y, r24
    1ac8:	99 83       	std	Y+1, r25	; 0x01
    1aca:	aa 83       	std	Y+2, r26	; 0x02
    1acc:	bb 83       	std	Y+3, r27	; 0x03
    1ace:	9f 77       	andi	r25, 0x7F	; 127
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	bf 90       	pop	r11
    1ade:	af 90       	pop	r10
    1ae0:	9f 90       	pop	r9
    1ae2:	8f 90       	pop	r8
    1ae4:	08 95       	ret

00001ae6 <rand_r>:
    1ae6:	b9 cf       	rjmp	.-142    	; 0x1a5a <do_rand>

00001ae8 <rand>:
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	92 e0       	ldi	r25, 0x02	; 2
    1aec:	b6 cf       	rjmp	.-148    	; 0x1a5a <do_rand>

00001aee <srand>:
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1af6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1afa:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1afe:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1b02:	08 95       	ret

00001b04 <memcpy>:
    1b04:	fb 01       	movw	r30, r22
    1b06:	dc 01       	movw	r26, r24
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <memcpy+0xa>
    1b0a:	01 90       	ld	r0, Z+
    1b0c:	0d 92       	st	X+, r0
    1b0e:	41 50       	subi	r20, 0x01	; 1
    1b10:	50 40       	sbci	r21, 0x00	; 0
    1b12:	d8 f7       	brcc	.-10     	; 0x1b0a <memcpy+0x6>
    1b14:	08 95       	ret

00001b16 <__divmodsi4>:
    1b16:	05 2e       	mov	r0, r21
    1b18:	97 fb       	bst	r25, 7
    1b1a:	16 f4       	brtc	.+4      	; 0x1b20 <__divmodsi4+0xa>
    1b1c:	00 94       	com	r0
    1b1e:	0f d0       	rcall	.+30     	; 0x1b3e <__negsi2>
    1b20:	57 fd       	sbrc	r21, 7
    1b22:	05 d0       	rcall	.+10     	; 0x1b2e <__divmodsi4_neg2>
    1b24:	78 df       	rcall	.-272    	; 0x1a16 <__udivmodsi4>
    1b26:	07 fc       	sbrc	r0, 7
    1b28:	02 d0       	rcall	.+4      	; 0x1b2e <__divmodsi4_neg2>
    1b2a:	46 f4       	brtc	.+16     	; 0x1b3c <__divmodsi4_exit>
    1b2c:	08 c0       	rjmp	.+16     	; 0x1b3e <__negsi2>

00001b2e <__divmodsi4_neg2>:
    1b2e:	50 95       	com	r21
    1b30:	40 95       	com	r20
    1b32:	30 95       	com	r19
    1b34:	21 95       	neg	r18
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
    1b38:	4f 4f       	sbci	r20, 0xFF	; 255
    1b3a:	5f 4f       	sbci	r21, 0xFF	; 255

00001b3c <__divmodsi4_exit>:
    1b3c:	08 95       	ret

00001b3e <__negsi2>:
    1b3e:	90 95       	com	r25
    1b40:	80 95       	com	r24
    1b42:	70 95       	com	r23
    1b44:	61 95       	neg	r22
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255
    1b48:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	08 95       	ret

00001b4e <__muluhisi3>:
    1b4e:	0f d0       	rcall	.+30     	; 0x1b6e <__umulhisi3>
    1b50:	a5 9f       	mul	r26, r21
    1b52:	90 0d       	add	r25, r0
    1b54:	b4 9f       	mul	r27, r20
    1b56:	90 0d       	add	r25, r0
    1b58:	a4 9f       	mul	r26, r20
    1b5a:	80 0d       	add	r24, r0
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	11 24       	eor	r1, r1
    1b60:	08 95       	ret

00001b62 <__mulshisi3>:
    1b62:	b7 ff       	sbrs	r27, 7
    1b64:	f4 cf       	rjmp	.-24     	; 0x1b4e <__muluhisi3>

00001b66 <__mulohisi3>:
    1b66:	f3 df       	rcall	.-26     	; 0x1b4e <__muluhisi3>
    1b68:	82 1b       	sub	r24, r18
    1b6a:	93 0b       	sbc	r25, r19
    1b6c:	08 95       	ret

00001b6e <__umulhisi3>:
    1b6e:	a2 9f       	mul	r26, r18
    1b70:	b0 01       	movw	r22, r0
    1b72:	b3 9f       	mul	r27, r19
    1b74:	c0 01       	movw	r24, r0
    1b76:	a3 9f       	mul	r26, r19
    1b78:	70 0d       	add	r23, r0
    1b7a:	81 1d       	adc	r24, r1
    1b7c:	11 24       	eor	r1, r1
    1b7e:	91 1d       	adc	r25, r1
    1b80:	b2 9f       	mul	r27, r18
    1b82:	70 0d       	add	r23, r0
    1b84:	81 1d       	adc	r24, r1
    1b86:	11 24       	eor	r1, r1
    1b88:	91 1d       	adc	r25, r1
    1b8a:	08 95       	ret

00001b8c <_exit>:
    1b8c:	f8 94       	cli

00001b8e <__stop_program>:
    1b8e:	ff cf       	rjmp	.-2      	; 0x1b8e <__stop_program>

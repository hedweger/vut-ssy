
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000033a2  00003436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000180b  00800204  00800204  0000343a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000343a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000346c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005474  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002760  00000000  00000000  00008db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b53  00000000  00000000  0000b510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ec0  00000000  00000000  0000e064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ecf  00000000  00000000  0000ef24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d90  00000000  00000000  00010df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  00012b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	64 c2       	rjmp	.+1224   	; 0x4fe <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	99 c3       	rjmp	.+1842   	; 0x7c4 <__vector_36>
      92:	00 00       	nop
      94:	66 c3       	rjmp	.+1740   	; 0x762 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	10 c2       	rjmp	.+1056   	; 0x4ca <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e2 ea       	ldi	r30, 0xA2	; 162
     14c:	f3 e3       	ldi	r31, 0x33	; 51
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	af 30       	cpi	r26, 0x0F	; 15
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	51 d1       	rcall	.+674    	; 0x412 <main>
     170:	0c 94 cf 19 	jmp	0x339e	; 0x339e <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	1f 92       	push	r1
     17c:	1f 92       	push	r1
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	9a 83       	std	Y+2, r25	; 0x02
     184:	89 83       	std	Y+1, r24	; 0x01
appDataReqBusy = false;
     186:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <appDataReqBusy>
(void)req;
}
     18a:	00 00       	nop
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <appSendData>:

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
if (appDataReqBusy || 0 == appUartBufferPtr)
     19e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <appDataReqBusy>
     1a2:	88 23       	and	r24, r24
     1a4:	a9 f5       	brne	.+106    	; 0x210 <appSendData+0x7a>
     1a6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     1aa:	88 23       	and	r24, r24
     1ac:	89 f1       	breq	.+98     	; 0x210 <appSendData+0x7a>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     1ae:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     1b2:	88 2f       	mov	r24, r24
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	ac 01       	movw	r20, r24
     1b8:	61 e9       	ldi	r22, 0x91	; 145
     1ba:	72 e0       	ldi	r23, 0x02	; 2
     1bc:	84 e2       	ldi	r24, 0x24	; 36
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	0e 94 84 19 	call	0x3308	; 0x3308 <memcpy>

appDataReq.dstAddr = 1-APP_ADDR;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <appDataReq+0x6>
     1cc:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <appDataReq+0x5>
appDataReq.dstEndpoint = APP_ENDPOINT;
     1d0:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <appDataReq+0x7>
appDataReq.srcEndpoint = APP_ENDPOINT;
     1d4:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <appDataReq+0x8>
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <appDataReq+0x9>
appDataReq.data = appDataReqBuffer;
     1de:	84 e2       	ldi	r24, 0x24	; 36
     1e0:	92 e0       	ldi	r25, 0x02	; 2
     1e2:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <appDataReq+0xb>
     1e6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <appDataReq+0xa>
appDataReq.size = appUartBufferPtr;
     1ea:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     1ee:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <appDataReq+0xc>
appDataReq.confirm = appDataConf;
     1f2:	8b eb       	ldi	r24, 0xBB	; 187
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <appDataReq+0xe>
     1fa:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <appDataReq+0xd>
NWK_DataReq(&appDataReq);
     1fe:	82 e1       	ldi	r24, 0x12	; 18
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	6c d4       	rcall	.+2264   	; 0xadc <NWK_DataReq>

appUartBufferPtr = 0;
     204:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <appUartBufferPtr>
appDataReqBusy = true;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <appDataReqBusy>
     20e:	01 c0       	rjmp	.+2      	; 0x212 <appSendData+0x7c>
/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
if (appDataReqBusy || 0 == appUartBufferPtr)
return;
     210:	00 00       	nop
appDataReq.confirm = appDataConf;
NWK_DataReq(&appDataReq);

appUartBufferPtr = 0;
appDataReqBusy = true;
}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <appSendDataRecv>:

static void appSendDataRecv(void)
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	1f 92       	push	r1
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
	char ack = 06;
     222:	86 e0       	ldi	r24, 0x06	; 6
     224:	89 83       	std	Y+1, r24	; 0x01
	appDataReq.dstAddr = 1-APP_ADDR;
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <appDataReq+0x6>
     22e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <appDataReq+0x5>
	appDataReq.dstEndpoint = APP_ENDPOINT;
     232:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <appDataReq+0x7>
	appDataReq.srcEndpoint = APP_ENDPOINT;
     236:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <appDataReq+0x8>
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <appDataReq+0x9>
	appDataReq.data = &ack;
     240:	ce 01       	movw	r24, r28
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <appDataReq+0xb>
     248:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <appDataReq+0xa>
	appDataReq.size = sizeof(ack);
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <appDataReq+0xc>
	appDataReq.confirm = appDataConf;
     252:	8b eb       	ldi	r24, 0xBB	; 187
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <appDataReq+0xe>
     25a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <appDataReq+0xd>
	NWK_DataReq(&appDataReq);
     25e:	82 e1       	ldi	r24, 0x12	; 18
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	3c d4       	rcall	.+2168   	; 0xadc <NWK_DataReq>

	appUartBufferPtr = 0;
     264:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <appUartBufferPtr>
	appDataReqBusy = true;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <appDataReqBusy>
}
     26e:	00 00       	nop
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <HAL_UartBytesReceived>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	00 d0       	rcall	.+0      	; 0x27e <HAL_UartBytesReceived+0x6>
     27e:	1f 92       	push	r1
     280:	1f 92       	push	r1
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	9d 83       	std	Y+5, r25	; 0x05
     288:	8c 83       	std	Y+4, r24	; 0x04
for (uint16_t i = 0; i < bytes; i++)
     28a:	1a 82       	std	Y+2, r1	; 0x02
     28c:	19 82       	std	Y+1, r1	; 0x01
     28e:	1d c0       	rjmp	.+58     	; 0x2ca <HAL_UartBytesReceived+0x52>
{
uint8_t byte = HAL_UartReadByte();
     290:	25 d2       	rcall	.+1098   	; 0x6dc <HAL_UartReadByte>
     292:	8b 83       	std	Y+3, r24	; 0x03

if (appUartBufferPtr == sizeof(appUartBuffer))
     294:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     298:	8d 36       	cpi	r24, 0x6D	; 109
appSendData();
     29a:	09 f4       	brne	.+2      	; 0x29e <HAL_UartBytesReceived+0x26>
     29c:	7c df       	rcall	.-264    	; 0x196 <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     29e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     2a2:	8d 36       	cpi	r24, 0x6D	; 109
     2a4:	68 f4       	brcc	.+26     	; 0x2c0 <HAL_UartBytesReceived+0x48>
appUartBuffer[appUartBufferPtr++] = byte;
     2a6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	98 0f       	add	r25, r24
     2ae:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <appUartBufferPtr>
     2b2:	88 2f       	mov	r24, r24
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	8f 56       	subi	r24, 0x6F	; 111
     2b8:	9d 4f       	sbci	r25, 0xFD	; 253
     2ba:	2b 81       	ldd	r18, Y+3	; 0x03
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	9a 83       	std	Y+2, r25	; 0x02
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	29 81       	ldd	r18, Y+1	; 0x01
     2cc:	3a 81       	ldd	r19, Y+2	; 0x02
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	9d 81       	ldd	r25, Y+5	; 0x05
     2d2:	28 17       	cp	r18, r24
     2d4:	39 07       	cpc	r19, r25
     2d6:	e0 f2       	brcs	.-72     	; 0x290 <HAL_UartBytesReceived+0x18>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <SYS_TimerStart>
}
     2e8:	00 00       	nop
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	1f 92       	push	r1
     300:	1f 92       	push	r1
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	9a 83       	std	Y+2, r25	; 0x02
     308:	89 83       	std	Y+1, r24	; 0x01
appSendData();
     30a:	45 df       	rcall	.-374    	; 0x196 <appSendData>
(void)timer;
}
     30c:	00 00       	nop
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <appDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	00 d0       	rcall	.+0      	; 0x31e <appDataInd+0x6>
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9b 83       	std	Y+3, r25	; 0x03
     324:	8a 83       	std	Y+2, r24	; 0x02
	if (ind->data[0] == 06 && ind->size == 1) {
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	9b 81       	ldd	r25, Y+3	; 0x03
     32a:	fc 01       	movw	r30, r24
     32c:	87 81       	ldd	r24, Z+7	; 0x07
     32e:	90 85       	ldd	r25, Z+8	; 0x08
     330:	fc 01       	movw	r30, r24
     332:	80 81       	ld	r24, Z
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	49 f4       	brne	.+18     	; 0x34a <appDataInd+0x32>
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	9b 81       	ldd	r25, Y+3	; 0x03
     33c:	fc 01       	movw	r30, r24
     33e:	81 85       	ldd	r24, Z+9	; 0x09
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	19 f4       	brne	.+6      	; 0x34a <appDataInd+0x32>
		HAL_UartWriteByte('X');
     344:	88 e5       	ldi	r24, 0x58	; 88
     346:	87 d1       	rcall	.+782    	; 0x656 <HAL_UartWriteByte>
     348:	1a c0       	rjmp	.+52     	; 0x37e <appDataInd+0x66>
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     34a:	19 82       	std	Y+1, r1	; 0x01
     34c:	10 c0       	rjmp	.+32     	; 0x36e <appDataInd+0x56>
			HAL_UartWriteByte(ind->data[i]);
     34e:	8a 81       	ldd	r24, Y+2	; 0x02
     350:	9b 81       	ldd	r25, Y+3	; 0x03
     352:	fc 01       	movw	r30, r24
     354:	27 81       	ldd	r18, Z+7	; 0x07
     356:	30 85       	ldd	r19, Z+8	; 0x08
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	88 2f       	mov	r24, r24
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	77 d1       	rcall	.+750    	; 0x656 <HAL_UartWriteByte>
static bool appDataInd(NWK_DataInd_t *ind)
{
	if (ind->data[0] == 06 && ind->size == 1) {
		HAL_UartWriteByte('X');
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	89 83       	std	Y+1, r24	; 0x01
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	9b 81       	ldd	r25, Y+3	; 0x03
     372:	fc 01       	movw	r30, r24
     374:	91 85       	ldd	r25, Z+9	; 0x09
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	89 17       	cp	r24, r25
			HAL_UartWriteByte(ind->data[i]);
		}
		appSendDataRecv();
     37a:	48 f3       	brcs	.-46     	; 0x34e <appDataInd+0x36>
     37c:	4d df       	rcall	.-358    	; 0x218 <appSendDataRecv>
	}
	return true;
     37e:	81 e0       	ldi	r24, 0x01	; 1
}
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <appInit>:

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
NWK_SetAddr(APP_ADDR);
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	3c d3       	rcall	.+1656   	; 0xa12 <NWK_SetAddr>
NWK_SetPanId(APP_PANID);
     39a:	80 e8       	ldi	r24, 0x80	; 128
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	51 d3       	rcall	.+1698   	; 0xa42 <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     3a0:	8f e1       	ldi	r24, 0x1F	; 31
     3a2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 c2 14 	call	0x2984	; 0x2984 <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     3ac:	6c e8       	ldi	r22, 0x8C	; 140
     3ae:	71 e0       	ldi	r23, 0x01	; 1
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	5f d3       	rcall	.+1726   	; 0xa72 <NWK_OpenEndpoint>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     3b4:	84 e1       	ldi	r24, 0x14	; 20
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <appTimer+0x6>
     3c0:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <appTimer+0x7>
     3c4:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <appTimer+0x8>
     3c8:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <appTimer+0x9>
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     3cc:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <appTimer+0xa>
appTimer.handler = appTimerHandler;
     3d0:	8d e7       	ldi	r24, 0x7D	; 125
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <appTimer+0xc>
     3d8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <appTimer+0xb>
}
     3dc:	00 00       	nop
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <APP_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
switch (appState)
     3ec:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	19 f0       	breq	.+6      	; 0x3fe <APP_TaskHandler+0x1a>
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	31 f0       	breq	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		// nic
	break;

	default:
	
	break;
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
{
switch (appState)
{
	case APP_STATE_INITIAL: 
		{
		appInit();
     3fe:	c6 df       	rcall	.-116    	; 0x38c <appInit>
		appState = APP_STATE_IDLE;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
		} 
	break;
     406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

	case APP_STATE_IDLE:
		// nic
	break;
     408:	00 00       	nop

	default:
	
	break;
}
}
     40a:	00 00       	nop
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
SYS_Init();
     41a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <SYS_Init>
HAL_UartInit(38400);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	76 e9       	ldi	r23, 0x96	; 150
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	83 d0       	rcall	.+262    	; 0x52e <HAL_UartInit>
HAL_UartWriteByte('j');
     428:	8a e6       	ldi	r24, 0x6A	; 106
     42a:	15 d1       	rcall	.+554    	; 0x656 <HAL_UartWriteByte>

while (1)
{
SYS_TaskHandler();
     42c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <SYS_TaskHandler>
HAL_UartTaskHandler();
     430:	42 d2       	rcall	.+1156   	; 0x8b6 <HAL_UartTaskHandler>
APP_TaskHandler();
     432:	d8 df       	rcall	.-80     	; 0x3e4 <APP_TaskHandler>
     434:	fb cf       	rjmp	.-10     	; 0x42c <main+0x1a>

00000436 <HAL_Init>:
}
     436:	cf 93       	push	r28
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
     438:	df 93       	push	r29
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
  MCUSR = 0;
     43e:	84 e5       	ldi	r24, 0x54	; 84
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	fc 01       	movw	r30, r24
     444:	10 82       	st	Z, r1
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	a8 95       	wdr
     44c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     450:	88 61       	ori	r24, 0x18	; 24
     452:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     456:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     45a:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     45c:	81 e6       	ldi	r24, 0x61	; 97
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	20 e8       	ldi	r18, 0x80	; 128
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
  CLKPR = 0;
     466:	81 e6       	ldi	r24, 0x61	; 97
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     46e:	78 94       	sei

  HAL_TimerInit();
     470:	04 d0       	rcall	.+8      	; 0x47a <HAL_TimerInit>
}
     472:	00 00       	nop
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
     486:	88 ea       	ldi	r24, 0xA8	; 168
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	20 e1       	ldi	r18, 0x10	; 16
     48c:	37 e2       	ldi	r19, 0x27	; 39
     48e:	fc 01       	movw	r30, r24
     490:	31 83       	std	Z+1, r19	; 0x01
     492:	20 83       	st	Z, r18
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	28 e0       	ldi	r18, 0x08	; 8
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
     49e:	81 ea       	ldi	r24, 0xA1	; 161
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	21 ea       	ldi	r18, 0xA1	; 161
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	f9 01       	movw	r30, r18
     4a8:	20 81       	ld	r18, Z
     4aa:	22 60       	ori	r18, 0x02	; 2
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 83       	st	Z, r18
     4b0:	82 e7       	ldi	r24, 0x72	; 114
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	22 e7       	ldi	r18, 0x72	; 114
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	22 60       	ori	r18, 0x02	; 2
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18
     4c2:	00 00       	nop
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8f 93       	push	r24
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount++;
     4e0:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <halTimerIrqCount>
}
     4ea:	00 00       	nop
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	8f 91       	pop	r24
     4f2:	0f 90       	pop	r0
     4f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	8f 93       	push	r24
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
  halSleepTimerEvent = true;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <halSleepTimerEvent>
}
     51a:	00 00       	nop
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	8f 91       	pop	r24
     522:	0f 90       	pop	r0
     524:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <HAL_UartInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	28 97       	sbiw	r28, 0x08	; 8
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	6d 83       	std	Y+5, r22	; 0x05
     544:	7e 83       	std	Y+6, r23	; 0x06
     546:	8f 83       	std	Y+7, r24	; 0x07
     548:	98 87       	std	Y+8, r25	; 0x08
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	9e 81       	ldd	r25, Y+6	; 0x06
     54e:	af 81       	ldd	r26, Y+7	; 0x07
     550:	b8 85       	ldd	r27, Y+8	; 0x08
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	aa 1f       	adc	r26, r26
     558:	bb 1f       	adc	r27, r27
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	aa 1f       	adc	r26, r26
     560:	bb 1f       	adc	r27, r27
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	aa 1f       	adc	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	aa 1f       	adc	r26, r26
     570:	bb 1f       	adc	r27, r27
     572:	9c 01       	movw	r18, r24
     574:	ad 01       	movw	r20, r26
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	94 e2       	ldi	r25, 0x24	; 36
     57a:	a4 ef       	ldi	r26, 0xF4	; 244
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	bc 01       	movw	r22, r24
     580:	cd 01       	movw	r24, r26
     582:	0e 94 0d 19 	call	0x321a	; 0x321a <__udivmodsi4>
     586:	da 01       	movw	r26, r20
     588:	c9 01       	movw	r24, r18
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	a1 09       	sbc	r26, r1
     58e:	b1 09       	sbc	r27, r1
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	9a 83       	std	Y+2, r25	; 0x02
     594:	ab 83       	std	Y+3, r26	; 0x03
     596:	bc 83       	std	Y+4, r27	; 0x04

  UBRRxH = (brr >> 8) & 0xff;
     598:	2d ec       	ldi	r18, 0xCD	; 205
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	9a 81       	ldd	r25, Y+2	; 0x02
     5a0:	ab 81       	ldd	r26, Y+3	; 0x03
     5a2:	bc 81       	ldd	r27, Y+4	; 0x04
     5a4:	89 2f       	mov	r24, r25
     5a6:	9a 2f       	mov	r25, r26
     5a8:	ab 2f       	mov	r26, r27
     5aa:	bb 27       	eor	r27, r27
     5ac:	f9 01       	movw	r30, r18
     5ae:	80 83       	st	Z, r24
  UBRRxL = (brr & 0xff);
     5b0:	8c ec       	ldi	r24, 0xCC	; 204
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	29 81       	ldd	r18, Y+1	; 0x01
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
  UCSRxA = (1 << U2X1);
     5ba:	88 ec       	ldi	r24, 0xC8	; 200
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	22 e0       	ldi	r18, 0x02	; 2
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     5c4:	89 ec       	ldi	r24, 0xC9	; 201
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	28 e9       	ldi	r18, 0x98	; 152
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
  UCSRxC = (3 << UCSZ10);
     5ce:	8a ec       	ldi	r24, 0xCA	; 202
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	26 e0       	ldi	r18, 0x06	; 6
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18

  txFifo.data = txData;
     5d8:	8a e0       	ldi	r24, 0x0A	; 10
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <txFifo+0x9>
     5e0:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <txFifo+0x8>
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     5e4:	80 e9       	ldi	r24, 0x90	; 144
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <txFifo+0x5>
     5ec:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <txFifo+0x4>
  txFifo.bytes = 0;
     5f0:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <txFifo+0x7>
     5f4:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <txFifo+0x6>
  txFifo.head = 0;
     5f8:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <txFifo+0x1>
     5fc:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <txFifo>
  txFifo.tail = 0;
     600:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <txFifo+0x3>
     604:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <txFifo+0x2>

  rxFifo.data = rxData;
     608:	85 ea       	ldi	r24, 0xA5	; 165
     60a:	94 e0       	ldi	r25, 0x04	; 4
     60c:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <rxFifo+0x9>
     610:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <rxFifo+0x8>
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     614:	80 e9       	ldi	r24, 0x90	; 144
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <rxFifo+0x5>
     61c:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <rxFifo+0x4>
  rxFifo.bytes = 0;
     620:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <rxFifo+0x7>
     624:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <rxFifo+0x6>
  rxFifo.head = 0;
     628:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <rxFifo+0x1>
     62c:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <rxFifo>
  rxFifo.tail = 0;
     630:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <rxFifo+0x3>
     634:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <rxFifo+0x2>

  udrEmpty = true;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <udrEmpty>
  newData = false;
     63e:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <newData>
}
     642:	00 00       	nop
     644:	28 96       	adiw	r28, 0x08	; 8
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <HAL_UartWriteByte>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	89 83       	std	Y+1, r24	; 0x01
  if (txFifo.bytes == txFifo.size)
     662:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <txFifo+0x6>
     666:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <txFifo+0x7>
     66a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <txFifo+0x4>
     66e:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <txFifo+0x5>
     672:	28 17       	cp	r18, r24
     674:	39 07       	cpc	r19, r25
     676:	69 f1       	breq	.+90     	; 0x6d2 <HAL_UartWriteByte+0x7c>
    return;

  txFifo.data[txFifo.tail++] = byte;
     678:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <txFifo+0x8>
     67c:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <txFifo+0x9>
     680:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <txFifo+0x2>
     684:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <txFifo+0x3>
     688:	ac 01       	movw	r20, r24
     68a:	4f 5f       	subi	r20, 0xFF	; 255
     68c:	5f 4f       	sbci	r21, 0xFF	; 255
     68e:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <txFifo+0x3>
     692:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <txFifo+0x2>
     696:	82 0f       	add	r24, r18
     698:	93 1f       	adc	r25, r19
     69a:	29 81       	ldd	r18, Y+1	; 0x01
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
  if (txFifo.tail == txFifo.size)
     6a0:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <txFifo+0x2>
     6a4:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <txFifo+0x3>
     6a8:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <txFifo+0x4>
     6ac:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <txFifo+0x5>
     6b0:	28 17       	cp	r18, r24
     6b2:	39 07       	cpc	r19, r25
     6b4:	21 f4       	brne	.+8      	; 0x6be <HAL_UartWriteByte+0x68>
    txFifo.tail = 0;
     6b6:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <txFifo+0x3>
     6ba:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <txFifo+0x2>
  txFifo.bytes++;
     6be:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <txFifo+0x6>
     6c2:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <txFifo+0x7>
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <txFifo+0x7>
     6cc:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <txFifo+0x6>
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <HAL_UartWriteByte+0x7e>
/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
  if (txFifo.bytes == txFifo.size)
    return;
     6d2:	00 00       	nop

  txFifo.data[txFifo.tail++] = byte;
  if (txFifo.tail == txFifo.size)
    txFifo.tail = 0;
  txFifo.bytes++;
}
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <HAL_UartReadByte>:

/*************************************************************************//**
*****************************************************************************/
uint8_t HAL_UartReadByte(void)
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	1f 92       	push	r1
     6e2:	1f 92       	push	r1
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     6e8:	8f e5       	ldi	r24, 0x5F	; 95
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	fc 01       	movw	r30, r24
     6ee:	80 81       	ld	r24, Z
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     6f4:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <rxFifo+0x8>
     6f8:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <rxFifo+0x9>
     6fc:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <rxFifo>
     700:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <rxFifo+0x1>
     704:	ac 01       	movw	r20, r24
     706:	4f 5f       	subi	r20, 0xFF	; 255
     708:	5f 4f       	sbci	r21, 0xFF	; 255
     70a:	50 93 9c 04 	sts	0x049C, r21	; 0x80049c <rxFifo+0x1>
     70e:	40 93 9b 04 	sts	0x049B, r20	; 0x80049b <rxFifo>
     712:	82 0f       	add	r24, r18
     714:	93 1f       	adc	r25, r19
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	8a 83       	std	Y+2, r24	; 0x02
    if (rxFifo.head == rxFifo.size)
     71c:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <rxFifo>
     720:	30 91 9c 04 	lds	r19, 0x049C	; 0x80049c <rxFifo+0x1>
     724:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <rxFifo+0x4>
     728:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <rxFifo+0x5>
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	21 f4       	brne	.+8      	; 0x73a <HAL_UartReadByte+0x5e>
      rxFifo.head = 0;
     732:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <rxFifo+0x1>
     736:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <rxFifo>
    rxFifo.bytes--;
     73a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     73e:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <rxFifo+0x7>
     748:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <rxFifo+0x6>
  ATOMIC_SECTION_LEAVE
     74c:	8f e5       	ldi	r24, 0x5F	; 95
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	29 81       	ldd	r18, Y+1	; 0x01
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
  PRAGMA(diag_default=Pa082);

  return byte;
     756:	8a 81       	ldd	r24, Y+2	; 0x02
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     772:	0f 92       	push	r0
     774:	2f 93       	push	r18
     776:	3f 93       	push	r19
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	ef 93       	push	r30
     77e:	ff 93       	push	r31
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
  udrEmpty = true;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     78e:	89 ec       	ldi	r24, 0xC9	; 201
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	29 ec       	ldi	r18, 0xC9	; 201
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	2f 7d       	andi	r18, 0xDF	; 223
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
}
     7a0:	00 00       	nop
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	9f 91       	pop	r25
     7ac:	8f 91       	pop	r24
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7b8:	0f 90       	pop	r0
     7ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7d4:	0f 92       	push	r0
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	ef 93       	push	r30
     7e4:	ff 93       	push	r31
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	1f 92       	push	r1
     7ec:	1f 92       	push	r1
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     7f2:	88 ec       	ldi	r24, 0xC8	; 200
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	fc 01       	movw	r30, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	89 83       	std	Y+1, r24	; 0x01
  uint8_t byte = UDRx;
     7fc:	8e ec       	ldi	r24, 0xCE	; 206
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	fc 01       	movw	r30, r24
     802:	80 81       	ld	r24, Z
     804:	8a 83       	std	Y+2, r24	; 0x02

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	8c 71       	andi	r24, 0x1C	; 28
     80e:	99 27       	eor	r25, r25
     810:	89 2b       	or	r24, r25
     812:	e1 f5       	brne	.+120    	; 0x88c <__vector_36+0xc8>
  {
    if (rxFifo.bytes == rxFifo.size)
     814:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     818:	30 91 a2 04 	lds	r19, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     81c:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <rxFifo+0x4>
     820:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <rxFifo+0x5>
     824:	28 17       	cp	r18, r24
     826:	39 07       	cpc	r19, r25
     828:	81 f1       	breq	.+96     	; 0x88a <__vector_36+0xc6>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     82a:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <rxFifo+0x8>
     82e:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <rxFifo+0x9>
     832:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <rxFifo+0x2>
     836:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <rxFifo+0x3>
     83a:	ac 01       	movw	r20, r24
     83c:	4f 5f       	subi	r20, 0xFF	; 255
     83e:	5f 4f       	sbci	r21, 0xFF	; 255
     840:	50 93 9e 04 	sts	0x049E, r21	; 0x80049e <rxFifo+0x3>
     844:	40 93 9d 04 	sts	0x049D, r20	; 0x80049d <rxFifo+0x2>
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	2a 81       	ldd	r18, Y+2	; 0x02
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
    if (rxFifo.tail == rxFifo.size)
     852:	20 91 9d 04 	lds	r18, 0x049D	; 0x80049d <rxFifo+0x2>
     856:	30 91 9e 04 	lds	r19, 0x049E	; 0x80049e <rxFifo+0x3>
     85a:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <rxFifo+0x4>
     85e:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <rxFifo+0x5>
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	21 f4       	brne	.+8      	; 0x870 <__vector_36+0xac>
      rxFifo.tail = 0;
     868:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <rxFifo+0x3>
     86c:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <rxFifo+0x2>
    rxFifo.bytes++;
     870:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     874:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <rxFifo+0x7>
     87e:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <rxFifo+0x6>

    newData = true;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <newData>
     888:	01 c0       	rjmp	.+2      	; 0x88c <__vector_36+0xc8>
  uint8_t byte = UDRx;

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
  {
    if (rxFifo.bytes == rxFifo.size)
      return;
     88a:	00 00       	nop

    newData = true;
  }

  PRAGMA(diag_default=Pa082);
}
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	ff 91       	pop	r31
     896:	ef 91       	pop	r30
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     8aa:	0f 90       	pop	r0
     8ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <HAL_UartTaskHandler+0x6>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <HAL_UartTaskHandler+0x8>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
  if (txFifo.bytes && udrEmpty)
     8c2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <txFifo+0x6>
     8c6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <txFifo+0x7>
     8ca:	89 2b       	or	r24, r25
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <HAL_UartTaskHandler+0x1a>
     8ce:	4c c0       	rjmp	.+152    	; 0x968 <HAL_UartTaskHandler+0xb2>
     8d0:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <udrEmpty>
     8d4:	88 23       	and	r24, r24
     8d6:	09 f4       	brne	.+2      	; 0x8da <HAL_UartTaskHandler+0x24>
     8d8:	47 c0       	rjmp	.+142    	; 0x968 <HAL_UartTaskHandler+0xb2>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     8da:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <txFifo+0x8>
     8de:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <txFifo+0x9>
     8e2:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <txFifo>
     8e6:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <txFifo+0x1>
     8ea:	ac 01       	movw	r20, r24
     8ec:	4f 5f       	subi	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	50 93 01 03 	sts	0x0301, r21	; 0x800301 <txFifo+0x1>
     8f4:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <txFifo>
     8f8:	82 0f       	add	r24, r18
     8fa:	93 1f       	adc	r25, r19
     8fc:	fc 01       	movw	r30, r24
     8fe:	80 81       	ld	r24, Z
     900:	89 83       	std	Y+1, r24	; 0x01
    if (txFifo.head == txFifo.size)
     902:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <txFifo>
     906:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <txFifo+0x1>
     90a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <txFifo+0x4>
     90e:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <txFifo+0x5>
     912:	28 17       	cp	r18, r24
     914:	39 07       	cpc	r19, r25
     916:	21 f4       	brne	.+8      	; 0x920 <HAL_UartTaskHandler+0x6a>
      txFifo.head = 0;
     918:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <txFifo+0x1>
     91c:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <txFifo>
    txFifo.bytes--;
     920:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <txFifo+0x6>
     924:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <txFifo+0x7>
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <txFifo+0x7>
     92e:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     932:	8f e5       	ldi	r24, 0x5F	; 95
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	8a 83       	std	Y+2, r24	; 0x02
     93c:	f8 94       	cli
      UDRx = byte;
     93e:	8e ec       	ldi	r24, 0xCE	; 206
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	29 81       	ldd	r18, Y+1	; 0x01
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
      UCSRxB |= (1 << UDRIE1);
     948:	89 ec       	ldi	r24, 0xC9	; 201
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	29 ec       	ldi	r18, 0xC9	; 201
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	f9 01       	movw	r30, r18
     952:	20 81       	ld	r18, Z
     954:	20 62       	ori	r18, 0x20	; 32
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
      udrEmpty = false;
     95a:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     95e:	8f e5       	ldi	r24, 0x5F	; 95
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	2a 81       	ldd	r18, Y+2	; 0x02
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     968:	8f e5       	ldi	r24, 0x5F	; 95
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	fc 01       	movw	r30, r24
     96e:	80 81       	ld	r24, Z
     970:	8b 83       	std	Y+3, r24	; 0x03
     972:	f8 94       	cli
      new = newData;
     974:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <newData>
     978:	8c 83       	std	Y+4, r24	; 0x04
      newData = false;
     97a:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <newData>
      bytes = rxFifo.bytes;
     97e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     982:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     986:	9e 83       	std	Y+6, r25	; 0x06
     988:	8d 83       	std	Y+5, r24	; 0x05
    ATOMIC_SECTION_LEAVE
     98a:	8f e5       	ldi	r24, 0x5F	; 95
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2b 81       	ldd	r18, Y+3	; 0x03
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18

    if (new)
     994:	8c 81       	ldd	r24, Y+4	; 0x04
     996:	88 23       	and	r24, r24
     998:	19 f0       	breq	.+6      	; 0x9a0 <HAL_UartTaskHandler+0xea>
      HAL_UartBytesReceived(bytes);
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	9e 81       	ldd	r25, Y+6	; 0x06
     99e:	6c dc       	rcall	.-1832   	; 0x278 <HAL_UartBytesReceived>
  }
}
     9a0:	00 00       	nop
     9a2:	26 96       	adiw	r28, 0x06	; 6
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	1f 92       	push	r1
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <nwkIb+0x4>
     9c2:	10 92 ec 19 	sts	0x19EC, r1	; 0x8019ec <nwkIb+0x5>
     9c6:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <nwkIb+0x1>
     9ca:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <nwkIb>
     9ce:	10 92 0e 1a 	sts	0x1A0E, r1	; 0x801a0e <nwkIb+0x27>
     9d2:	10 92 0d 1a 	sts	0x1A0D, r1	; 0x801a0d <nwkIb+0x26>
     9d6:	19 82       	std	Y+1, r1	; 0x01
     9d8:	0e c0       	rjmp	.+28     	; 0x9f6 <NWK_Init+0x42>
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	03 96       	adiw	r24, 0x03	; 3
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	89 51       	subi	r24, 0x19	; 25
     9e8:	96 4e       	sbci	r25, 0xE6	; 230
     9ea:	fc 01       	movw	r30, r24
     9ec:	11 82       	std	Z+1, r1	; 0x01
     9ee:	10 82       	st	Z, r1
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	89 83       	std	Y+1, r24	; 0x01
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	80 31       	cpi	r24, 0x10	; 16
     9fa:	78 f3       	brcs	.-34     	; 0x9da <NWK_Init+0x26>
     9fc:	0e 94 21 11 	call	0x2242	; 0x2242 <nwkTxInit>
     a00:	7d d7       	rcall	.+3834   	; 0x18fc <nwkRxInit>
     a02:	62 d2       	rcall	.+1220   	; 0xec8 <nwkFrameInit>
     a04:	5f d0       	rcall	.+190    	; 0xac4 <nwkDataReqInit>
     a06:	6a d3       	rcall	.+1748   	; 0x10dc <nwkRouteInit>
     a08:	00 00       	nop
     a0a:	0f 90       	pop	r0
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <NWK_SetAddr>:
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	1f 92       	push	r1
     a18:	1f 92       	push	r1
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	9a 83       	std	Y+2, r25	; 0x02
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <nwkIb+0x1>
     a2a:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <nwkIb>
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	0e 94 04 15 	call	0x2a08	; 0x2a08 <PHY_SetShortAddr>
     a36:	00 00       	nop
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <NWK_SetPanId>:
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	1f 92       	push	r1
     a48:	1f 92       	push	r1
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	90 93 ea 19 	sts	0x19EA, r25	; 0x8019ea <nwkIb+0x3>
     a5a:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <nwkIb+0x2>
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <PHY_SetPanId>
     a66:	00 00       	nop
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <NWK_OpenEndpoint>:
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	00 d0       	rcall	.+0      	; 0xa78 <NWK_OpenEndpoint+0x6>
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	7b 83       	std	Y+3, r23	; 0x03
     a80:	6a 83       	std	Y+2, r22	; 0x02
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	03 96       	adiw	r24, 0x03	; 3
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	89 51       	subi	r24, 0x19	; 25
     a90:	96 4e       	sbci	r25, 0xE6	; 230
     a92:	2a 81       	ldd	r18, Y+2	; 0x02
     a94:	3b 81       	ldd	r19, Y+3	; 0x03
     a96:	fc 01       	movw	r30, r24
     a98:	31 83       	std	Z+1, r19	; 0x01
     a9a:	20 83       	st	Z, r18
     a9c:	00 00       	nop
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <NWK_TaskHandler>:

/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
  nwkRxTaskHandler();
     ab2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     ab6:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     aba:	d1 d1       	rcall	.+930    	; 0xe5e <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
#endif
}
     abc:	00 00       	nop
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <nwkDataReqInit>:

/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
  nwkDataReqQueue = NULL;
     acc:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <nwkDataReqQueue+0x1>
     ad0:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <nwkDataReqQueue>
}
     ad4:	00 00       	nop
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	1f 92       	push	r1
     ae2:	1f 92       	push	r1
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	89 83       	std	Y+1, r24	; 0x01
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	fc 01       	movw	r30, r24
     af2:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	fc 01       	movw	r30, r24
     afa:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	fc 01       	movw	r30, r24
     b02:	13 82       	std	Z+3, r1	; 0x03
     b04:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     b06:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
     b0a:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
     b14:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>

  if (NULL == nwkDataReqQueue)
     b18:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     b1c:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     b20:	89 2b       	or	r24, r25
     b22:	61 f4       	brne	.+24     	; 0xb3c <NWK_DataReq+0x60>
  {
    req->next = NULL;
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	fc 01       	movw	r30, r24
     b2a:	11 82       	std	Z+1, r1	; 0x01
     b2c:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     b36:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
  else
  {
    req->next = nwkDataReqQueue;
    nwkDataReqQueue = req;
  }
}
     b3a:	0f c0       	rjmp	.+30     	; 0xb5a <NWK_DataReq+0x7e>
    req->next = NULL;
    nwkDataReqQueue = req;
  }
  else
  {
    req->next = nwkDataReqQueue;
     b3c:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <nwkDataReqQueue>
     b40:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	fc 01       	movw	r30, r24
     b4a:	31 83       	std	Z+1, r19	; 0x01
     b4c:	20 83       	st	Z, r18
    nwkDataReqQueue = req;
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     b56:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
  }
}
     b5a:	00 00       	nop
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <nwkDataReqSendFrame+0x6>
     b6c:	1f 92       	push	r1
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     b76:	c7 d1       	rcall	.+910    	; 0xf06 <nwkFrameAlloc>
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	89 2b       	or	r24, r25
     b82:	59 f4       	brne	.+22     	; 0xb9a <nwkDataReqSendFrame+0x34>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	22 e0       	ldi	r18, 0x02	; 2
     b8a:	fc 01       	movw	r30, r24
     b8c:	24 83       	std	Z+4, r18	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	22 e0       	ldi	r18, 0x02	; 2
     b94:	fc 01       	movw	r30, r24
     b96:	27 87       	std	Z+15, r18	; 0x0f
    return;
     b98:	b6 c0       	rjmp	.+364    	; 0xd06 <nwkDataReqSendFrame+0x1a0>
  }

  req->frame = frame;
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	9c 81       	ldd	r25, Y+4	; 0x04
     b9e:	29 81       	ldd	r18, Y+1	; 0x01
     ba0:	3a 81       	ldd	r19, Y+2	; 0x02
     ba2:	fc 01       	movw	r30, r24
     ba4:	33 83       	std	Z+3, r19	; 0x03
     ba6:	22 83       	std	Z+2, r18	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	fc 01       	movw	r30, r24
     bb0:	24 83       	std	Z+4, r18	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	89 57       	subi	r24, 0x79	; 121
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	2a e8       	ldi	r18, 0x8A	; 138
     bbc:	36 e0       	ldi	r19, 0x06	; 6
     bbe:	fc 01       	movw	r30, r24
     bc0:	31 83       	std	Z+1, r19	; 0x01
     bc2:	20 83       	st	Z, r18
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	fc 01       	movw	r30, r24
     bca:	81 85       	ldd	r24, Z+9	; 0x09
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	84 70       	andi	r24, 0x04	; 4
     bd2:	99 27       	eor	r25, r25
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	89 2b       	or	r24, r25
     bd8:	09 f4       	brne	.+2      	; 0xbdc <nwkDataReqSendFrame+0x76>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	8a 57       	subi	r24, 0x7A	; 122
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	fc 01       	movw	r30, r24
     be6:	20 83       	st	Z, r18

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	fc 01       	movw	r30, r24
     bee:	81 85       	ldd	r24, Z+9	; 0x09
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	81 70       	andi	r24, 0x01	; 1
     bf6:	99 27       	eor	r25, r25
     bf8:	21 e0       	ldi	r18, 0x01	; 1
     bfa:	89 2b       	or	r24, r25
     bfc:	09 f4       	brne	.+2      	; 0xc00 <nwkDataReqSendFrame+0x9a>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	21 70       	andi	r18, 0x01	; 1
     c06:	fc 01       	movw	r30, r24
     c08:	33 85       	ldd	r19, Z+11	; 0x0b
     c0a:	3e 7f       	andi	r19, 0xFE	; 254
     c0c:	23 2b       	or	r18, r19
     c0e:	fc 01       	movw	r30, r24
     c10:	23 87       	std	Z+11, r18	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	fc 01       	movw	r30, r24
     c18:	81 85       	ldd	r24, Z+9	; 0x09
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	88 70       	andi	r24, 0x08	; 8
     c20:	99 27       	eor	r25, r25
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	89 2b       	or	r24, r25
     c26:	09 f4       	brne	.+2      	; 0xc2a <nwkDataReqSendFrame+0xc4>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	21 70       	andi	r18, 0x01	; 1
     c30:	22 0f       	add	r18, r18
     c32:	22 0f       	add	r18, r18
     c34:	fc 01       	movw	r30, r24
     c36:	33 85       	ldd	r19, Z+11	; 0x0b
     c38:	3b 7f       	andi	r19, 0xFB	; 251
     c3a:	23 2b       	or	r18, r19
     c3c:	fc 01       	movw	r30, r24
     c3e:	23 87       	std	Z+11, r18	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     c40:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <nwkIb+0x4>
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <nwkIb+0x4>
     c4a:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <nwkIb+0x4>
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	fc 01       	movw	r30, r24
     c54:	24 87       	std	Z+12, r18	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     c56:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
     c5a:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	fc 01       	movw	r30, r24
     c64:	36 87       	std	Z+14, r19	; 0x0e
     c66:	25 87       	std	Z+13, r18	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	fc 01       	movw	r30, r24
     c6e:	25 81       	ldd	r18, Z+5	; 0x05
     c70:	36 81       	ldd	r19, Z+6	; 0x06
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	fc 01       	movw	r30, r24
     c78:	30 8b       	std	Z+16, r19	; 0x10
     c7a:	27 87       	std	Z+15, r18	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	fc 01       	movw	r30, r24
     c82:	80 85       	ldd	r24, Z+8	; 0x08
     c84:	28 2f       	mov	r18, r24
     c86:	2f 70       	andi	r18, 0x0F	; 15
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	2f 70       	andi	r18, 0x0F	; 15
     c8e:	fc 01       	movw	r30, r24
     c90:	31 89       	ldd	r19, Z+17	; 0x11
     c92:	30 7f       	andi	r19, 0xF0	; 240
     c94:	23 2b       	or	r18, r19
     c96:	fc 01       	movw	r30, r24
     c98:	21 8b       	std	Z+17, r18	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	fc 01       	movw	r30, r24
     ca0:	87 81       	ldd	r24, Z+7	; 0x07
     ca2:	28 2f       	mov	r18, r24
     ca4:	2f 70       	andi	r18, 0x0F	; 15
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	22 95       	swap	r18
     cac:	20 7f       	andi	r18, 0xF0	; 240
     cae:	fc 01       	movw	r30, r24
     cb0:	31 89       	ldd	r19, Z+17	; 0x11
     cb2:	3f 70       	andi	r19, 0x0F	; 15
     cb4:	23 2b       	or	r18, r19
     cb6:	fc 01       	movw	r30, r24
     cb8:	21 8b       	std	Z+17, r18	; 0x11

  memcpy(frame->payload, req->data, req->size);
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	fc 01       	movw	r30, r24
     cc0:	84 85       	ldd	r24, Z+12	; 0x0c
     cc2:	48 2f       	mov	r20, r24
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	fc 01       	movw	r30, r24
     ccc:	22 85       	ldd	r18, Z+10	; 0x0a
     cce:	33 85       	ldd	r19, Z+11	; 0x0b
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	8f 57       	subi	r24, 0x7F	; 127
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	fc 01       	movw	r30, r24
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	b9 01       	movw	r22, r18
     ce0:	0e 94 84 19 	call	0x3308	; 0x3308 <memcpy>
  frame->size += req->size;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	fc 01       	movw	r30, r24
     cea:	21 81       	ldd	r18, Z+1	; 0x01
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	fc 01       	movw	r30, r24
     cf2:	84 85       	ldd	r24, Z+12	; 0x0c
     cf4:	28 0f       	add	r18, r24
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	fc 01       	movw	r30, r24
     cfc:	21 83       	std	Z+1, r18	; 0x01

  nwkTxFrame(frame);
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	0e 94 55 11 	call	0x22aa	; 0x22aa <nwkTxFrame>
}
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <nwkDataReqTxConf>:
/*************************************************************************//**
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	00 d0       	rcall	.+0      	; 0xd1a <nwkDataReqTxConf+0x6>
     d1a:	1f 92       	push	r1
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	8b 83       	std	Y+3, r24	; 0x03
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     d24:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     d28:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     d2c:	9a 83       	std	Y+2, r25	; 0x02
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	2b c0       	rjmp	.+86     	; 0xd88 <nwkDataReqTxConf+0x74>
  {
    if (req->frame == frame)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	fc 01       	movw	r30, r24
     d38:	22 81       	ldd	r18, Z+2	; 0x02
     d3a:	33 81       	ldd	r19, Z+3	; 0x03
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	28 17       	cp	r18, r24
     d42:	39 07       	cpc	r19, r25
     d44:	d1 f4       	brne	.+52     	; 0xd7a <nwkDataReqTxConf+0x66>
    {
      req->status = frame->tx.status;
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	8d 57       	subi	r24, 0x7D	; 125
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	fc 01       	movw	r30, r24
     d50:	20 81       	ld	r18, Z
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	fc 01       	movw	r30, r24
     d58:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	8a 57       	subi	r24, 0x7A	; 122
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	fc 01       	movw	r30, r24
     d64:	20 81       	ld	r18, Z
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	22 e0       	ldi	r18, 0x02	; 2
     d74:	fc 01       	movw	r30, r24
     d76:	24 83       	std	Z+4, r18	; 0x04
      break;
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <nwkDataReqTxConf+0x7c>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	fc 01       	movw	r30, r24
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	89 2b       	or	r24, r25
     d8e:	89 f6       	brne	.-94     	; 0xd32 <nwkDataReqTxConf+0x1e>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	2d d1       	rcall	.+602    	; 0xff0 <nwkFrameFree>
}
     d96:	00 00       	nop
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <nwkDataReqConfirm>:
/*************************************************************************//**
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	00 d0       	rcall	.+0      	; 0xdac <nwkDataReqConfirm+0x6>
     dac:	1f 92       	push	r1
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9c 83       	std	Y+4, r25	; 0x04
     db4:	8b 83       	std	Y+3, r24	; 0x03
  if (nwkDataReqQueue == req)
     db6:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <nwkDataReqQueue>
     dba:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	28 17       	cp	r18, r24
     dc4:	39 07       	cpc	r19, r25
     dc6:	61 f4       	brne	.+24     	; 0xde0 <nwkDataReqConfirm+0x3a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     dc8:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     dcc:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     dda:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
     dde:	25 c0       	rjmp	.+74     	; 0xe2a <nwkDataReqConfirm+0x84>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
     de0:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     de4:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
    while (prev->next != req)
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <nwkDataReqConfirm+0x56>
      prev = prev->next;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	fc 01       	movw	r30, r24
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	fc 01       	movw	r30, r24
     e02:	20 81       	ld	r18, Z
     e04:	31 81       	ldd	r19, Z+1	; 0x01
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	79 f7       	brne	.-34     	; 0xdee <nwkDataReqConfirm+0x48>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 81       	ld	r18, Z
     e1e:	31 81       	ldd	r19, Z+1	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	fc 01       	movw	r30, r24
     e26:	31 83       	std	Z+1, r19	; 0x01
     e28:	20 83       	st	Z, r18
  }

  nwkIb.lock--;
     e2a:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
     e2e:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
     e38:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
  req->confirm(req);
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	fc 01       	movw	r30, r24
     e42:	25 85       	ldd	r18, Z+13	; 0x0d
     e44:	36 85       	ldd	r19, Z+14	; 0x0e
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	f9 01       	movw	r30, r18
     e4c:	19 95       	eicall
}
     e4e:	00 00       	nop
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	1f 92       	push	r1
     e64:	1f 92       	push	r1
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     e6a:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     e6e:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	1f c0       	rjmp	.+62     	; 0xeb6 <nwkDataReqTaskHandler+0x58>
  {
    switch (req->state)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	fc 01       	movw	r30, r24
     e7e:	84 81       	ldd	r24, Z+4	; 0x04
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	71 f0       	breq	.+28     	; 0xea6 <nwkDataReqTaskHandler+0x48>
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	91 05       	cpc	r25, r1
     e8e:	39 f0       	breq	.+14     	; 0xe9e <nwkDataReqTaskHandler+0x40>
     e90:	89 2b       	or	r24, r25
     e92:	09 f0       	breq	.+2      	; 0xe96 <nwkDataReqTaskHandler+0x38>
        nwkDataReqConfirm(req);
        return;
      } break;

      default:
        break;
     e94:	09 c0       	rjmp	.+18     	; 0xea8 <nwkDataReqTaskHandler+0x4a>
  {
    switch (req->state)
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	65 de       	rcall	.-822    	; 0xb66 <nwkDataReqSendFrame>
        return;
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <nwkDataReqTaskHandler+0x60>
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	81 df       	rcall	.-254    	; 0xda6 <nwkDataReqConfirm>
        return;
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <nwkDataReqTaskHandler+0x60>
        nwkDataReqSendFrame(req);
        return;
      } break;

      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;
     ea6:	00 00       	nop
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	89 2b       	or	r24, r25
     ebc:	e9 f6       	brne	.-70     	; 0xe78 <nwkDataReqTaskHandler+0x1a>

      default:
        break;
    };
  }
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	1f 92       	push	r1
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     ed2:	19 82       	std	Y+1, r1	; 0x01
     ed4:	10 c0       	rjmp	.+32     	; 0xef6 <nwkFrameInit+0x2e>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	49 e8       	ldi	r20, 0x89	; 137
     ede:	42 9f       	mul	r20, r18
     ee0:	c0 01       	movw	r24, r0
     ee2:	43 9f       	mul	r20, r19
     ee4:	90 0d       	add	r25, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	86 5c       	subi	r24, 0xC6	; 198
     eea:	99 4f       	sbci	r25, 0xF9	; 249
     eec:	fc 01       	movw	r30, r24
     eee:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	8e 31       	cpi	r24, 0x1E	; 30
     efa:	68 f3       	brcs	.-38     	; 0xed6 <nwkFrameInit+0xe>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     efc:	00 00       	nop
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <nwkFrameAlloc>:
/*************************************************************************//**
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	1f 92       	push	r1
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	64 c0       	rjmp	.+200    	; 0xfdc <nwkFrameAlloc+0xd6>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	49 e8       	ldi	r20, 0x89	; 137
     f1c:	42 9f       	mul	r20, r18
     f1e:	c0 01       	movw	r24, r0
     f20:	43 9f       	mul	r20, r19
     f22:	90 0d       	add	r25, r0
     f24:	11 24       	eor	r1, r1
     f26:	86 5c       	subi	r24, 0xC6	; 198
     f28:	99 4f       	sbci	r25, 0xF9	; 249
     f2a:	fc 01       	movw	r30, r24
     f2c:	80 81       	ld	r24, Z
     f2e:	88 23       	and	r24, r24
     f30:	09 f0       	breq	.+2      	; 0xf34 <nwkFrameAlloc+0x2e>
     f32:	51 c0       	rjmp	.+162    	; 0xfd6 <nwkFrameAlloc+0xd0>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	49 e8       	ldi	r20, 0x89	; 137
     f3c:	42 9f       	mul	r20, r18
     f3e:	c0 01       	movw	r24, r0
     f40:	43 9f       	mul	r20, r19
     f42:	90 0d       	add	r25, r0
     f44:	11 24       	eor	r1, r1
     f46:	86 5c       	subi	r24, 0xC6	; 198
     f48:	99 4f       	sbci	r25, 0xF9	; 249
     f4a:	49 e8       	ldi	r20, 0x89	; 137
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	49 e8       	ldi	r20, 0x89	; 137
     f5e:	42 9f       	mul	r20, r18
     f60:	c0 01       	movw	r24, r0
     f62:	43 9f       	mul	r20, r19
     f64:	90 0d       	add	r25, r0
     f66:	11 24       	eor	r1, r1
     f68:	85 5c       	subi	r24, 0xC5	; 197
     f6a:	99 4f       	sbci	r25, 0xF9	; 249
     f6c:	20 e1       	ldi	r18, 0x10	; 16
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	48 2f       	mov	r20, r24
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	69 e8       	ldi	r22, 0x89	; 137
     f80:	62 9f       	mul	r22, r18
     f82:	c0 01       	movw	r24, r0
     f84:	63 9f       	mul	r22, r19
     f86:	90 0d       	add	r25, r0
     f88:	11 24       	eor	r1, r1
     f8a:	02 96       	adiw	r24, 0x02	; 2
     f8c:	86 5c       	subi	r24, 0xC6	; 198
     f8e:	99 4f       	sbci	r25, 0xF9	; 249
     f90:	9c 01       	movw	r18, r24
     f92:	20 5f       	subi	r18, 0xF0	; 240
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	69 e8       	ldi	r22, 0x89	; 137
     f98:	64 9f       	mul	r22, r20
     f9a:	c0 01       	movw	r24, r0
     f9c:	65 9f       	mul	r22, r21
     f9e:	90 0d       	add	r25, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	85 54       	subi	r24, 0x45	; 69
     fa4:	99 4f       	sbci	r25, 0xF9	; 249
     fa6:	fc 01       	movw	r30, r24
     fa8:	31 83       	std	Z+1, r19	; 0x01
     faa:	20 83       	st	Z, r18
      nwkIb.lock++;
     fac:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
     fb0:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
     fba:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
      return &nwkFrameFrames[i];
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	49 e8       	ldi	r20, 0x89	; 137
     fc6:	42 9f       	mul	r20, r18
     fc8:	c0 01       	movw	r24, r0
     fca:	43 9f       	mul	r20, r19
     fcc:	90 0d       	add	r25, r0
     fce:	11 24       	eor	r1, r1
     fd0:	86 5c       	subi	r24, 0xC6	; 198
     fd2:	99 4f       	sbci	r25, 0xF9	; 249
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <nwkFrameAlloc+0xe2>
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	8e 31       	cpi	r24, 0x1E	; 30
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <nwkFrameAlloc+0xde>
     fe2:	98 cf       	rjmp	.-208    	; 0xf14 <nwkFrameAlloc+0xe>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
}
     fe8:	0f 90       	pop	r0
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	08 95       	ret

00000ff0 <nwkFrameFree>:
/*************************************************************************//**
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	1f 92       	push	r1
     ff6:	1f 92       	push	r1
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
  frame->state = NWK_FRAME_STATE_FREE;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	fc 01       	movw	r30, r24
    1006:	10 82       	st	Z, r1
  nwkIb.lock--;
    1008:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
    100c:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
    1016:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
}
    101a:	00 00       	nop
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <nwkFrameNext>:
  @brief Cycles through the allocated frames starting from the specified @a frame
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	1f 92       	push	r1
    102c:	1f 92       	push	r1
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
  if (NULL == frame)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	89 2b       	or	r24, r25
    103c:	29 f4       	brne	.+10     	; 0x1048 <nwkFrameNext+0x22>
    frame = nwkFrameFrames;
    103e:	8a e3       	ldi	r24, 0x3A	; 58
    1040:	96 e0       	ldi	r25, 0x06	; 6
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	16 c0       	rjmp	.+44     	; 0x1074 <nwkFrameNext+0x4e>
  else
    frame++;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	87 57       	subi	r24, 0x77	; 119
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	9a 83       	std	Y+2, r25	; 0x02
    1052:	89 83       	std	Y+1, r24	; 0x01

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <nwkFrameNext+0x4e>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	fc 01       	movw	r30, r24
    105c:	80 81       	ld	r24, Z
    105e:	88 23       	and	r24, r24
    1060:	19 f0       	breq	.+6      	; 0x1068 <nwkFrameNext+0x42>
      return frame;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	0d c0       	rjmp	.+26     	; 0x1082 <nwkFrameNext+0x5c>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	87 57       	subi	r24, 0x77	; 119
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	88 54       	subi	r24, 0x48	; 72
    107a:	96 41       	sbci	r25, 0x16	; 22
    107c:	60 f3       	brcs	.-40     	; 0x1056 <nwkFrameNext+0x30>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	1f 92       	push	r1
    1092:	1f 92       	push	r1
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
  frame->tx.status = NWK_SUCCESS_STATUS;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	8d 57       	subi	r24, 0x7D	; 125
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	fc 01       	movw	r30, r24
    10a6:	10 82       	st	Z, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    10a8:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <nwkIb+0x4>
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <nwkIb+0x4>
    10b2:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <nwkIb+0x4>
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	fc 01       	movw	r30, r24
    10bc:	24 87       	std	Z+12, r18	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    10be:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    10c2:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	fc 01       	movw	r30, r24
    10cc:	36 87       	std	Z+14, r19	; 0x0e
    10ce:	25 87       	std	Z+13, r18	; 0x0d
#ifdef NWK_ENABLE_SECURE_COMMANDS
  frame->header.nwkFcf.security = 1;
#endif
}
    10d0:	00 00       	nop
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	1f 92       	push	r1
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	39 c0       	rjmp	.+114    	; 0x115c <nwkRouteInit+0x80>
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	c9 01       	movw	r24, r18
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	82 1b       	sub	r24, r18
    1100:	93 0b       	sbc	r25, r19
    1102:	87 5b       	subi	r24, 0xB7	; 183
    1104:	99 4e       	sbci	r25, 0xE9	; 233
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	fc 01       	movw	r30, r24
    110c:	31 83       	std	Z+1, r19	; 0x01
    110e:	20 83       	st	Z, r18
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	c9 01       	movw	r24, r18
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	82 1b       	sub	r24, r18
    1126:	93 0b       	sbc	r25, r19
    1128:	88 5b       	subi	r24, 0xB8	; 184
    112a:	99 4e       	sbci	r25, 0xE9	; 233
    112c:	fc 01       	movw	r30, r24
    112e:	20 81       	ld	r18, Z
    1130:	2e 7f       	andi	r18, 0xFE	; 254
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	c9 01       	movw	r24, r18
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	82 1b       	sub	r24, r18
    114c:	93 0b       	sbc	r25, r19
    114e:	83 5b       	subi	r24, 0xB3	; 179
    1150:	99 4e       	sbci	r25, 0xE9	; 233
    1152:	fc 01       	movw	r30, r24
    1154:	10 82       	st	Z, r1
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	84 36       	cpi	r24, 0x64	; 100
    1160:	20 f2       	brcs	.-120    	; 0x10ea <nwkRouteInit+0xe>
    1162:	00 00       	nop
    1164:	0f 90       	pop	r0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <NWK_RouteFindEntry>:
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <NWK_RouteFindEntry+0x6>
    1172:	1f 92       	push	r1
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	9b 83       	std	Y+3, r25	; 0x03
    117a:	8a 83       	std	Y+2, r24	; 0x02
    117c:	6c 83       	std	Y+4, r22	; 0x04
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	42 c0       	rjmp	.+132    	; 0x1206 <NWK_RouteFindEntry+0x9a>
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	c9 01       	movw	r24, r18
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	82 1b       	sub	r24, r18
    1198:	93 0b       	sbc	r25, r19
    119a:	87 5b       	subi	r24, 0xB7	; 183
    119c:	99 4e       	sbci	r25, 0xE9	; 233
    119e:	fc 01       	movw	r30, r24
    11a0:	20 81       	ld	r18, Z
    11a2:	31 81       	ldd	r19, Z+1	; 0x01
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	28 17       	cp	r18, r24
    11aa:	39 07       	cpc	r19, r25
    11ac:	49 f5       	brne	.+82     	; 0x1200 <NWK_RouteFindEntry+0x94>
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	c9 01       	movw	r24, r18
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 1b       	sub	r24, r18
    11c4:	93 0b       	sbc	r25, r19
    11c6:	88 5b       	subi	r24, 0xB8	; 184
    11c8:	99 4e       	sbci	r25, 0xE9	; 233
    11ca:	fc 01       	movw	r30, r24
    11cc:	80 81       	ld	r24, Z
    11ce:	86 95       	lsr	r24
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	79 f4       	brne	.+30     	; 0x1200 <NWK_RouteFindEntry+0x94>
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	c9 01       	movw	r24, r18
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	82 1b       	sub	r24, r18
    11f8:	93 0b       	sbc	r25, r19
    11fa:	88 5b       	subi	r24, 0xB8	; 184
    11fc:	99 4e       	sbci	r25, 0xE9	; 233
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <NWK_RouteFindEntry+0xa6>
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	84 36       	cpi	r24, 0x64	; 100
    120a:	08 f4       	brcc	.+2      	; 0x120e <NWK_RouteFindEntry+0xa2>
    120c:	ba cf       	rjmp	.-140    	; 0x1182 <NWK_RouteFindEntry+0x16>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <NWK_RouteNewEntry>:
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <NWK_RouteNewEntry+0x6>
    1226:	1f 92       	push	r1
    1228:	1f 92       	push	r1
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	88 e4       	ldi	r24, 0x48	; 72
    1230:	96 e1       	ldi	r25, 0x16	; 22
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	1c 82       	std	Y+4, r1	; 0x04
    1238:	1b 82       	std	Y+3, r1	; 0x03
    123a:	1d 82       	std	Y+5, r1	; 0x05
    123c:	2e c0       	rjmp	.+92     	; 0x129a <NWK_RouteNewEntry+0x7a>
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	fc 01       	movw	r30, r24
    1244:	80 81       	ld	r24, Z
    1246:	81 70       	andi	r24, 0x01	; 1
    1248:	88 23       	and	r24, r24
    124a:	f1 f4       	brne	.+60     	; 0x1288 <NWK_RouteNewEntry+0x68>
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	fc 01       	movw	r30, r24
    1252:	85 81       	ldd	r24, Z+5	; 0x05
    1254:	88 23       	and	r24, r24
    1256:	29 f4       	brne	.+10     	; 0x1262 <NWK_RouteNewEntry+0x42>
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	8b 83       	std	Y+3, r24	; 0x03
    1260:	1f c0       	rjmp	.+62     	; 0x12a0 <NWK_RouteNewEntry+0x80>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	89 2b       	or	r24, r25
    1268:	51 f0       	breq	.+20     	; 0x127e <NWK_RouteNewEntry+0x5e>
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	fc 01       	movw	r30, r24
    1270:	25 81       	ldd	r18, Z+5	; 0x05
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	fc 01       	movw	r30, r24
    1278:	85 81       	ldd	r24, Z+5	; 0x05
    127a:	28 17       	cp	r18, r24
    127c:	30 f4       	brcc	.+12     	; 0x128a <NWK_RouteNewEntry+0x6a>
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	01 c0       	rjmp	.+2      	; 0x128a <NWK_RouteNewEntry+0x6a>
    1288:	00 00       	nop
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	07 96       	adiw	r24, 0x07	; 7
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	84 36       	cpi	r24, 0x64	; 100
    129e:	78 f2       	brcs	.-98     	; 0x123e <NWK_RouteNewEntry+0x1e>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 81       	ld	r18, Z
    12a8:	2d 7f       	andi	r18, 0xFD	; 253
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 81       	ld	r18, Z
    12b6:	2f 70       	andi	r18, 0x0F	; 15
    12b8:	20 63       	ori	r18, 0x30	; 48
    12ba:	fc 01       	movw	r30, r24
    12bc:	20 83       	st	Z, r18
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	20 e8       	ldi	r18, 0x80	; 128
    12c4:	fc 01       	movw	r30, r24
    12c6:	25 83       	std	Z+5, r18	; 0x05
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <NWK_RouteFreeEntry>:
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	1f 92       	push	r1
    12e2:	1f 92       	push	r1
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	fc 01       	movw	r30, r24
    12f2:	80 81       	ld	r24, Z
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	88 23       	and	r24, r24
    12f8:	61 f4       	brne	.+24     	; 0x1312 <NWK_RouteFreeEntry+0x36>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	2f ef       	ldi	r18, 0xFF	; 255
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	fc 01       	movw	r30, r24
    1304:	32 83       	std	Z+2, r19	; 0x02
    1306:	21 83       	std	Z+1, r18	; 0x01
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	9a 81       	ldd	r25, Y+2	; 0x02
    130c:	fc 01       	movw	r30, r24
    130e:	15 82       	std	Z+5, r1	; 0x05
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <NWK_RouteFreeEntry+0x38>
    1312:	00 00       	nop
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <NWK_RouteNextHop>:
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	00 d0       	rcall	.+0      	; 0x1324 <NWK_RouteNextHop+0x6>
    1324:	1f 92       	push	r1
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	6d 83       	std	Y+5, r22	; 0x05
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	6d 81       	ldd	r22, Y+5	; 0x05
    1338:	19 df       	rcall	.-462    	; 0x116c <NWK_RouteFindEntry>
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	89 2b       	or	r24, r25
    1344:	31 f0       	breq	.+12     	; 0x1352 <NWK_RouteNextHop+0x34>
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	fc 01       	movw	r30, r24
    134c:	83 81       	ldd	r24, Z+3	; 0x03
    134e:	94 81       	ldd	r25, Z+4	; 0x04
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <NWK_RouteNextHop+0x38>
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	9f ef       	ldi	r25, 0xFF	; 255
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	00 d0       	rcall	.+0      	; 0x136c <nwkRouteRemove+0x6>
    136c:	1f 92       	push	r1
    136e:	1f 92       	push	r1
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	8b 83       	std	Y+3, r24	; 0x03
    1378:	6d 83       	std	Y+5, r22	; 0x05
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	6d 81       	ldd	r22, Y+5	; 0x05
    1380:	f5 de       	rcall	.-534    	; 0x116c <NWK_RouteFindEntry>
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
  if (entry)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	89 2b       	or	r24, r25
    138c:	19 f0       	breq	.+6      	; 0x1394 <nwkRouteRemove+0x2e>
    NWK_RouteFreeEntry(entry);
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	a4 df       	rcall	.-184    	; 0x12dc <NWK_RouteFreeEntry>
}
    1394:	00 00       	nop
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	27 97       	sbiw	r28, 0x07	; 7
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	9f 83       	std	Y+7, r25	; 0x07
    13bc:	8e 83       	std	Y+6, r24	; 0x06
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
    13be:	8e 81       	ldd	r24, Y+6	; 0x06
    13c0:	9f 81       	ldd	r25, Y+7	; 0x07
    13c2:	02 96       	adiw	r24, 0x02	; 2
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	fc 01       	movw	r30, r24
    13ce:	87 81       	ldd	r24, Z+7	; 0x07
    13d0:	90 85       	ldd	r25, Z+8	; 0x08
    13d2:	99 23       	and	r25, r25
    13d4:	74 f4       	brge	.+28     	; 0x13f2 <nwkRouteFrameReceived+0x4c>
      (header->macSrcAddr != header->nwkSrcAddr))
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	fc 01       	movw	r30, r24
    13dc:	27 81       	ldd	r18, Z+7	; 0x07
    13de:	30 85       	ldd	r19, Z+8	; 0x08
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	fc 01       	movw	r30, r24
    13e6:	83 85       	ldd	r24, Z+11	; 0x0b
    13e8:	94 85       	ldd	r25, Z+12	; 0x0c
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    13ea:	28 17       	cp	r18, r24
    13ec:	39 07       	cpc	r19, r25
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <nwkRouteFrameReceived+0x4c>
    13f0:	83 c0       	rjmp	.+262    	; 0x14f8 <nwkRouteFrameReceived+0x152>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	fc 01       	movw	r30, r24
    13f8:	83 81       	ldd	r24, Z+3	; 0x03
    13fa:	94 81       	ldd	r25, Z+4	; 0x04
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <nwkRouteFrameReceived+0x5c>
    1400:	7d c0       	rjmp	.+250    	; 0x14fc <nwkRouteFrameReceived+0x156>
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	fc 01       	movw	r30, r24
    1408:	83 85       	ldd	r24, Z+11	; 0x0b
    140a:	94 85       	ldd	r25, Z+12	; 0x0c
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	ae de       	rcall	.-676    	; 0x116c <NWK_RouteFindEntry>
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01

  if (entry)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	89 2b       	or	r24, r25
    141a:	09 f4       	brne	.+2      	; 0x141e <nwkRouteFrameReceived+0x78>
    141c:	4b c0       	rjmp	.+150    	; 0x14b4 <nwkRouteFrameReceived+0x10e>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	fc 01       	movw	r30, r24
    1424:	85 81       	ldd	r24, Z+5	; 0x05
    1426:	96 81       	ldd	r25, Z+6	; 0x06
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	79 f4       	brne	.+30     	; 0x144a <nwkRouteFrameReceived+0xa4>
        nwkIb.addr == header->nwkDstAddr);
    142c:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1430:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	fc 01       	movw	r30, r24
    143a:	85 85       	ldd	r24, Z+13	; 0x0d
    143c:	96 85       	ldd	r25, Z+14	; 0x0e

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    143e:	28 17       	cp	r18, r24
    1440:	39 07       	cpc	r19, r25
    1442:	19 f4       	brne	.+6      	; 0x144a <nwkRouteFrameReceived+0xa4>
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <nwkRouteFrameReceived+0xa8>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	81 70       	andi	r24, 0x01	; 1
    1454:	8d 83       	std	Y+5, r24	; 0x05
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	fc 01       	movw	r30, r24
    145c:	23 81       	ldd	r18, Z+3	; 0x03
    145e:	34 81       	ldd	r19, Z+4	; 0x04
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	fc 01       	movw	r30, r24
    1466:	87 81       	ldd	r24, Z+7	; 0x07
    1468:	90 85       	ldd	r25, Z+8	; 0x08
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	61 f0       	breq	.+24     	; 0x1488 <nwkRouteFrameReceived+0xe2>
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	9f 81       	ldd	r25, Y+7	; 0x07
    1474:	8d 57       	subi	r24, 0x7D	; 125
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	fc 01       	movw	r30, r24
    147a:	20 81       	ld	r18, Z
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	fc 01       	movw	r30, r24
    1482:	86 81       	ldd	r24, Z+6	; 0x06
    1484:	82 17       	cp	r24, r18
    1486:	18 f0       	brcs	.+6      	; 0x148e <nwkRouteFrameReceived+0xe8>
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	88 23       	and	r24, r24
    148c:	51 f1       	breq	.+84     	; 0x14e2 <nwkRouteFrameReceived+0x13c>
    {
      entry->nextHopAddr = header->macSrcAddr;
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	fc 01       	movw	r30, r24
    1494:	27 81       	ldd	r18, Z+7	; 0x07
    1496:	30 85       	ldd	r19, Z+8	; 0x08
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	fc 01       	movw	r30, r24
    149e:	34 83       	std	Z+4, r19	; 0x04
    14a0:	23 83       	std	Z+3, r18	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	fc 01       	movw	r30, r24
    14a8:	20 81       	ld	r18, Z
    14aa:	2f 70       	andi	r18, 0x0F	; 15
    14ac:	20 63       	ori	r18, 0x30	; 48
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    14b2:	17 c0       	rjmp	.+46     	; 0x14e2 <nwkRouteFrameReceived+0x13c>
    14b4:	b5 de       	rcall	.-662    	; 0x1220 <NWK_RouteNewEntry>
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01

    entry->dstAddr = header->nwkSrcAddr;
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	fc 01       	movw	r30, r24
    14c0:	23 85       	ldd	r18, Z+11	; 0x0b
    14c2:	34 85       	ldd	r19, Z+12	; 0x0c
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	fc 01       	movw	r30, r24
    14ca:	32 83       	std	Z+2, r19	; 0x02
    14cc:	21 83       	std	Z+1, r18	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	fc 01       	movw	r30, r24
    14d4:	27 81       	ldd	r18, Z+7	; 0x07
    14d6:	30 85       	ldd	r19, Z+8	; 0x08
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	fc 01       	movw	r30, r24
    14de:	34 83       	std	Z+4, r19	; 0x04
    14e0:	23 83       	std	Z+3, r18	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    14e2:	8e 81       	ldd	r24, Y+6	; 0x06
    14e4:	9f 81       	ldd	r25, Y+7	; 0x07
    14e6:	8d 57       	subi	r24, 0x7D	; 125
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 81       	ld	r18, Z
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	fc 01       	movw	r30, r24
    14f4:	26 83       	std	Z+6, r18	; 0x06
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <nwkRouteFrameReceived+0x158>
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
      (header->macSrcAddr != header->nwkSrcAddr))
    return;
    14f8:	00 00       	nop
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <nwkRouteFrameReceived+0x158>

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    return;
    14fc:	00 00       	nop

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    14fe:	27 96       	adiw	r28, 0x07	; 7
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret

00001510 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	00 d0       	rcall	.+0      	; 0x1516 <nwkRouteFrameSent+0x6>
    1516:	1f 92       	push	r1
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	8b 83       	std	Y+3, r24	; 0x03
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	fc 01       	movw	r30, r24
    1526:	87 85       	ldd	r24, Z+15	; 0x0f
    1528:	90 89       	ldd	r25, Z+16	; 0x10
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	09 f4       	brne	.+2      	; 0x1530 <nwkRouteFrameSent+0x20>
    152e:	5f c0       	rjmp	.+190    	; 0x15ee <nwkRouteFrameSent+0xde>
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	fc 01       	movw	r30, r24
    1536:	83 85       	ldd	r24, Z+11	; 0x0b
    1538:	83 fb       	bst	r24, 3
    153a:	88 27       	eor	r24, r24
    153c:	80 f9       	bld	r24, 0
    153e:	28 2f       	mov	r18, r24
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	fc 01       	movw	r30, r24
    1546:	87 85       	ldd	r24, Z+15	; 0x0f
    1548:	90 89       	ldd	r25, Z+16	; 0x10
    154a:	62 2f       	mov	r22, r18
    154c:	0f de       	rcall	.-994    	; 0x116c <NWK_RouteFindEntry>
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01

  if (NULL == entry || entry->fixed)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	89 2b       	or	r24, r25
    1558:	09 f4       	brne	.+2      	; 0x155c <nwkRouteFrameSent+0x4c>
    155a:	4b c0       	rjmp	.+150    	; 0x15f2 <nwkRouteFrameSent+0xe2>
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	fc 01       	movw	r30, r24
    1562:	80 81       	ld	r24, Z
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	88 23       	and	r24, r24
    1568:	09 f0       	breq	.+2      	; 0x156c <nwkRouteFrameSent+0x5c>
    156a:	43 c0       	rjmp	.+134    	; 0x15f2 <nwkRouteFrameSent+0xe2>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	8d 57       	subi	r24, 0x7D	; 125
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	88 23       	and	r24, r24
    157a:	d1 f4       	brne	.+52     	; 0x15b0 <nwkRouteFrameSent+0xa0>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	fc 01       	movw	r30, r24
    1582:	20 81       	ld	r18, Z
    1584:	2f 70       	andi	r18, 0x0F	; 15
    1586:	20 63       	ori	r18, 0x30	; 48
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	fc 01       	movw	r30, r24
    1592:	85 81       	ldd	r24, Z+5	; 0x05
    1594:	21 e0       	ldi	r18, 0x01	; 1
    1596:	28 0f       	add	r18, r24
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	fc 01       	movw	r30, r24
    159e:	25 83       	std	Z+5, r18	; 0x05
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	fc 01       	movw	r30, r24
    15a6:	85 81       	ldd	r24, Z+5	; 0x05
    15a8:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    15aa:	21 f5       	brne	.+72     	; 0x15f4 <nwkRouteFrameSent+0xe4>
    15ac:	4f d1       	rcall	.+670    	; 0x184c <nwkRouteNormalizeRanks>
    15ae:	22 c0       	rjmp	.+68     	; 0x15f4 <nwkRouteFrameSent+0xe4>
  }
  else
  {
    if (0 == --entry->score)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	fc 01       	movw	r30, r24
    15b6:	80 81       	ld	r24, Z
    15b8:	82 95       	swap	r24
    15ba:	8f 70       	andi	r24, 0x0F	; 15
    15bc:	2f e0       	ldi	r18, 0x0F	; 15
    15be:	28 0f       	add	r18, r24
    15c0:	2f 70       	andi	r18, 0x0F	; 15
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	22 95       	swap	r18
    15c8:	20 7f       	andi	r18, 0xF0	; 240
    15ca:	fc 01       	movw	r30, r24
    15cc:	30 81       	ld	r19, Z
    15ce:	3f 70       	andi	r19, 0x0F	; 15
    15d0:	23 2b       	or	r18, r19
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	fc 01       	movw	r30, r24
    15dc:	80 81       	ld	r24, Z
    15de:	82 95       	swap	r24
    15e0:	8f 70       	andi	r24, 0x0F	; 15
    15e2:	88 23       	and	r24, r24
    15e4:	39 f4       	brne	.+14     	; 0x15f4 <nwkRouteFrameSent+0xe4>
      NWK_RouteFreeEntry(entry);
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	78 de       	rcall	.-784    	; 0x12dc <NWK_RouteFreeEntry>
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <nwkRouteFrameSent+0xe4>
void nwkRouteFrameSent(NwkFrame_t *frame)
{
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    return;
    15ee:	00 00       	nop
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <nwkRouteFrameSent+0xe4>

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);

  if (NULL == entry || entry->fixed)
    return;
    15f2:	00 00       	nop
  else
  {
    if (0 == --entry->score)
      NWK_RouteFreeEntry(entry);
  }
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	00 d0       	rcall	.+0      	; 0x1608 <nwkRoutePrepareTx+0x6>
    1608:	1f 92       	push	r1
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	02 96       	adiw	r24, 0x02	; 2
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	fc 01       	movw	r30, r24
    1622:	85 85       	ldd	r24, Z+13	; 0x0d
    1624:	96 85       	ldd	r25, Z+14	; 0x0e
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	41 f4       	brne	.+16     	; 0x163a <nwkRoutePrepareTx+0x38>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	2f ef       	ldi	r18, 0xFF	; 255
    1630:	3f ef       	ldi	r19, 0xFF	; 255
    1632:	fc 01       	movw	r30, r24
    1634:	36 83       	std	Z+6, r19	; 0x06
    1636:	25 83       	std	Z+5, r18	; 0x05
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1638:	27 c0       	rjmp	.+78     	; 0x1688 <nwkRoutePrepareTx+0x86>
  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
  }

  else if (header->nwkFcf.linkLocal)
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	fc 01       	movw	r30, r24
    1640:	81 85       	ldd	r24, Z+9	; 0x09
    1642:	84 70       	andi	r24, 0x04	; 4
    1644:	88 23       	and	r24, r24
    1646:	59 f0       	breq	.+22     	; 0x165e <nwkRoutePrepareTx+0x5c>
  {
    header->macDstAddr = header->nwkDstAddr;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	fc 01       	movw	r30, r24
    164e:	25 85       	ldd	r18, Z+13	; 0x0d
    1650:	36 85       	ldd	r19, Z+14	; 0x0e
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	fc 01       	movw	r30, r24
    1658:	36 83       	std	Z+6, r19	; 0x06
    165a:	25 83       	std	Z+5, r18	; 0x05
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    165c:	15 c0       	rjmp	.+42     	; 0x1688 <nwkRoutePrepareTx+0x86>
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	fc 01       	movw	r30, r24
    1664:	81 85       	ldd	r24, Z+9	; 0x09
    1666:	83 fb       	bst	r24, 3
    1668:	88 27       	eor	r24, r24
    166a:	80 f9       	bld	r24, 0
    166c:	28 2f       	mov	r18, r24
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	fc 01       	movw	r30, r24
    1674:	85 85       	ldd	r24, Z+13	; 0x0d
    1676:	96 85       	ldd	r25, Z+14	; 0x0e
    1678:	62 2f       	mov	r22, r18
    167a:	51 de       	rcall	.-862    	; 0x131e <NWK_RouteNextHop>
    167c:	9c 01       	movw	r18, r24
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	fc 01       	movw	r30, r24
    1684:	36 83       	std	Z+6, r19	; 0x06
    1686:	25 83       	std	Z+5, r18	; 0x05
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1688:	00 00       	nop
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	00 d0       	rcall	.+0      	; 0x169e <nwkRouteFrame+0x6>
    169e:	1f 92       	push	r1
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	02 96       	adiw	r24, 0x02	; 2
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	fc 01       	movw	r30, r24
    16b8:	81 85       	ldd	r24, Z+9	; 0x09
    16ba:	83 fb       	bst	r24, 3
    16bc:	88 27       	eor	r24, r24
    16be:	80 f9       	bld	r24, 0
    16c0:	28 2f       	mov	r18, r24
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	fc 01       	movw	r30, r24
    16c8:	85 85       	ldd	r24, Z+13	; 0x0d
    16ca:	96 85       	ldd	r25, Z+14	; 0x0e
    16cc:	62 2f       	mov	r22, r18
    16ce:	27 de       	rcall	.-946    	; 0x131e <NWK_RouteNextHop>
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	91 f0       	breq	.+36     	; 0x16f8 <nwkRouteFrame+0x60>
  {
    frame->tx.confirm = NULL;
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	89 57       	subi	r24, 0x79	; 121
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	fc 01       	movw	r30, r24
    16de:	11 82       	std	Z+1, r1	; 0x01
    16e0:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	8a 57       	subi	r24, 0x7A	; 122
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	22 e0       	ldi	r18, 0x02	; 2
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 83       	st	Z, r18
    nwkTxFrame(frame);
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	da d5       	rcall	.+2996   	; 0x22aa <nwkTxFrame>
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
  }
}
    16f6:	17 c0       	rjmp	.+46     	; 0x1726 <nwkRouteFrame+0x8e>
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	fc 01       	movw	r30, r24
    16fe:	81 85       	ldd	r24, Z+9	; 0x09
    1700:	83 fb       	bst	r24, 3
    1702:	88 27       	eor	r24, r24
    1704:	80 f9       	bld	r24, 0
    1706:	48 2f       	mov	r20, r24
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	fc 01       	movw	r30, r24
    170e:	25 85       	ldd	r18, Z+13	; 0x0d
    1710:	36 85       	ldd	r19, Z+14	; 0x0e
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	fc 01       	movw	r30, r24
    1718:	83 85       	ldd	r24, Z+11	; 0x0b
    171a:	94 85       	ldd	r25, Z+12	; 0x0c
    171c:	b9 01       	movw	r22, r18
    171e:	0b d0       	rcall	.+22     	; 0x1736 <nwkRouteSendRouteError>
    nwkFrameFree(frame);
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	65 dc       	rcall	.-1846   	; 0xff0 <nwkFrameFree>
    1726:	00 00       	nop
  }
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <nwkRouteSendRouteError>:
    1736:	cf 93       	push	r28

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
    1738:	df 93       	push	r29
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	29 97       	sbiw	r28, 0x09	; 9
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	78 87       	std	Y+8, r23	; 0x08
    1750:	6f 83       	std	Y+7, r22	; 0x07
    1752:	49 87       	std	Y+9, r20	; 0x09
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1754:	d8 db       	rcall	.-2128   	; 0xf06 <nwkFrameAlloc>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	89 2b       	or	r24, r25
    1760:	09 f4       	brne	.+2      	; 0x1764 <nwkRouteSendRouteError+0x2e>
    1762:	40 c0       	rjmp	.+128    	; 0x17e4 <nwkRouteSendRouteError+0xae>
    return;

  nwkFrameCommandInit(frame);
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	91 dc       	rcall	.-1758   	; 0x108c <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	fc 01       	movw	r30, r24
    1770:	81 81       	ldd	r24, Z+1	; 0x01
    1772:	26 e0       	ldi	r18, 0x06	; 6
    1774:	28 0f       	add	r18, r24
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	fc 01       	movw	r30, r24
    177c:	21 83       	std	Z+1, r18	; 0x01
  frame->tx.confirm = NULL;
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	89 57       	subi	r24, 0x79	; 121
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	fc 01       	movw	r30, r24
    1788:	11 82       	std	Z+1, r1	; 0x01
    178a:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	2d 81       	ldd	r18, Y+5	; 0x05
    1792:	3e 81       	ldd	r19, Y+6	; 0x06
    1794:	fc 01       	movw	r30, r24
    1796:	30 8b       	std	Z+16, r19	; 0x10
    1798:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	8f 57       	subi	r24, 0x7F	; 127
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	fc 01       	movw	r30, r24
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	8b 83       	std	Y+3, r24	; 0x03
  command->id = NWK_COMMAND_ROUTE_ERROR;
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
  command->srcAddr = src;
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	2d 81       	ldd	r18, Y+5	; 0x05
    17bc:	3e 81       	ldd	r19, Y+6	; 0x06
    17be:	fc 01       	movw	r30, r24
    17c0:	32 83       	std	Z+2, r19	; 0x02
    17c2:	21 83       	std	Z+1, r18	; 0x01
  command->dstAddr = dst;
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	2f 81       	ldd	r18, Y+7	; 0x07
    17ca:	38 85       	ldd	r19, Y+8	; 0x08
    17cc:	fc 01       	movw	r30, r24
    17ce:	34 83       	std	Z+4, r19	; 0x04
    17d0:	23 83       	std	Z+3, r18	; 0x03
  command->multicast = multicast;
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	29 85       	ldd	r18, Y+9	; 0x09
    17d8:	fc 01       	movw	r30, r24
    17da:	25 83       	std	Z+5, r18	; 0x05

  nwkTxFrame(frame);
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	64 d5       	rcall	.+2760   	; 0x22aa <nwkTxFrame>
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <nwkRouteSendRouteError+0xb0>
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    return;
    17e4:	00 00       	nop
  command->srcAddr = src;
  command->dstAddr = dst;
  command->multicast = multicast;

  nwkTxFrame(frame);
}
    17e6:	29 96       	adiw	r28, 0x09	; 9
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <nwkRouteErrorReceived+0x6>
    17fe:	1f 92       	push	r1
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	fc 01       	movw	r30, r24
    180e:	87 81       	ldd	r24, Z+7	; 0x07
    1810:	90 85       	ldd	r25, Z+8	; 0x08
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	fc 01       	movw	r30, r24
    181c:	81 85       	ldd	r24, Z+9	; 0x09
    181e:	86 30       	cpi	r24, 0x06	; 6
    1820:	11 f0       	breq	.+4      	; 0x1826 <nwkRouteErrorReceived+0x2e>
    return false;
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	0c c0       	rjmp	.+24     	; 0x183e <nwkRouteErrorReceived+0x46>

  nwkRouteRemove(command->dstAddr, command->multicast);
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	fc 01       	movw	r30, r24
    182c:	25 81       	ldd	r18, Z+5	; 0x05
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	fc 01       	movw	r30, r24
    1834:	83 81       	ldd	r24, Z+3	; 0x03
    1836:	94 81       	ldd	r25, Z+4	; 0x04
    1838:	62 2f       	mov	r22, r18
    183a:	95 dd       	rcall	.-1238   	; 0x1366 <nwkRouteRemove>

  return true;
    183c:	81 e0       	ldi	r24, 0x01	; 1
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <nwkRouteNormalizeRanks>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	1f 92       	push	r1
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	26 c0       	rjmp	.+76     	; 0x18a6 <nwkRouteNormalizeRanks+0x5a>
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	48 2f       	mov	r20, r24
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	ca 01       	movw	r24, r20
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	84 1b       	sub	r24, r20
    1876:	95 0b       	sbc	r25, r21
    1878:	83 5b       	subi	r24, 0xB3	; 179
    187a:	99 4e       	sbci	r25, 0xE9	; 233
    187c:	fc 01       	movw	r30, r24
    187e:	80 81       	ld	r24, Z
    1880:	86 95       	lsr	r24
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	48 0f       	add	r20, r24
    1886:	c9 01       	movw	r24, r18
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	82 1b       	sub	r24, r18
    1896:	93 0b       	sbc	r25, r19
    1898:	83 5b       	subi	r24, 0xB3	; 179
    189a:	99 4e       	sbci	r25, 0xE9	; 233
    189c:	fc 01       	movw	r30, r24
    189e:	40 83       	st	Z, r20

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	84 36       	cpi	r24, 0x64	; 100
    18aa:	b8 f2       	brcs	.-82     	; 0x185a <nwkRouteNormalizeRanks+0xe>
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
}
    18ac:	00 00       	nop
    18ae:	0f 90       	pop	r0
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <nwkFramePayloadSize>:
/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
}
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	1f 92       	push	r1
    18bc:	1f 92       	push	r1
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	fc 01       	movw	r30, r24
    18cc:	41 81       	ldd	r20, Z+1	; 0x01
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	8f 57       	subi	r24, 0x7F	; 127
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	fc 01       	movw	r30, r24
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	9c 01       	movw	r18, r24
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	02 96       	adiw	r24, 0x02	; 2
    18e4:	b9 01       	movw	r22, r18
    18e6:	68 1b       	sub	r22, r24
    18e8:	79 0b       	sbc	r23, r25
    18ea:	cb 01       	movw	r24, r22
    18ec:	74 2f       	mov	r23, r20
    18ee:	78 1b       	sub	r23, r24
    18f0:	87 2f       	mov	r24, r23
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <nwkRxInit>:
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	1f 92       	push	r1
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	19 82       	std	Y+1, r1	; 0x01
    1908:	11 c0       	rjmp	.+34     	; 0x192c <nwkRxInit+0x30>
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	c9 01       	movw	r24, r18
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	82 0f       	add	r24, r18
    191c:	93 1f       	adc	r25, r19
    191e:	88 5f       	subi	r24, 0xF8	; 248
    1920:	96 4e       	sbci	r25, 0xE6	; 230
    1922:	fc 01       	movw	r30, r24
    1924:	10 82       	st	Z, r1
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	8a 30       	cpi	r24, 0x0A	; 10
    1930:	60 f3       	brcs	.-40     	; 0x190a <nwkRxInit+0xe>
    1932:	84 e6       	ldi	r24, 0x64	; 100
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	80 93 3d 19 	sts	0x193D, r24	; 0x80193d <nwkRxDuplicateRejectionTimer+0x6>
    193e:	90 93 3e 19 	sts	0x193E, r25	; 0x80193e <nwkRxDuplicateRejectionTimer+0x7>
    1942:	a0 93 3f 19 	sts	0x193F, r26	; 0x80193f <nwkRxDuplicateRejectionTimer+0x8>
    1946:	b0 93 40 19 	sts	0x1940, r27	; 0x801940 <nwkRxDuplicateRejectionTimer+0x9>
    194a:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <nwkRxDuplicateRejectionTimer+0xa>
    194e:	8e e8       	ldi	r24, 0x8E	; 142
    1950:	9d e0       	ldi	r25, 0x0D	; 13
    1952:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <nwkRxDuplicateRejectionTimer+0xc>
    1956:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <nwkRxDuplicateRejectionTimer+0xb>
    195a:	6a ec       	ldi	r22, 0xCA	; 202
    195c:	7e e0       	ldi	r23, 0x0E	; 14
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	88 d8       	rcall	.-3824   	; 0xa72 <NWK_OpenEndpoint>
    1962:	00 00       	nop
    1964:	0f 90       	pop	r0
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <PHY_DataInd>:
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	00 d0       	rcall	.+0      	; 0x1972 <PHY_DataInd+0x6>
    1972:	1f 92       	push	r1
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	8b 83       	std	Y+3, r24	; 0x03
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	fc 01       	movw	r30, r24
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	fc 01       	movw	r30, r24
    198a:	80 81       	ld	r24, Z
    198c:	88 38       	cpi	r24, 0x88	; 136
    198e:	09 f0       	breq	.+2      	; 0x1992 <PHY_DataInd+0x26>
    1990:	53 c0       	rjmp	.+166    	; 0x1a38 <PHY_DataInd+0xcc>
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	fc 01       	movw	r30, r24
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	fc 01       	movw	r30, r24
    199e:	80 81       	ld	r24, Z
    19a0:	81 36       	cpi	r24, 0x61	; 97
    19a2:	51 f0       	breq	.+20     	; 0x19b8 <PHY_DataInd+0x4c>
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	fc 01       	movw	r30, r24
    19b0:	80 81       	ld	r24, Z
    19b2:	81 34       	cpi	r24, 0x41	; 65
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <PHY_DataInd+0x4c>
    19b6:	40 c0       	rjmp	.+128    	; 0x1a38 <PHY_DataInd+0xcc>
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	fc 01       	movw	r30, r24
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	80 31       	cpi	r24, 0x10	; 16
    19c2:	d0 f1       	brcs	.+116    	; 0x1a38 <PHY_DataInd+0xcc>
    19c4:	a0 da       	rcall	.-2752   	; 0xf06 <nwkFrameAlloc>
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	9a 81       	ldd	r25, Y+2	; 0x02
    19ce:	89 2b       	or	r24, r25
    19d0:	a9 f1       	breq	.+106    	; 0x1a3c <PHY_DataInd+0xd0>
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	20 e2       	ldi	r18, 0x20	; 32
    19d8:	fc 01       	movw	r30, r24
    19da:	20 83       	st	Z, r18
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	fc 01       	movw	r30, r24
    19e2:	22 81       	ldd	r18, Z+2	; 0x02
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	fc 01       	movw	r30, r24
    19ea:	21 83       	std	Z+1, r18	; 0x01
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	fc 01       	movw	r30, r24
    19f2:	23 81       	ldd	r18, Z+3	; 0x03
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	8d 57       	subi	r24, 0x7D	; 125
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	fc 01       	movw	r30, r24
    1a06:	24 81       	ldd	r18, Z+4	; 0x04
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	8c 57       	subi	r24, 0x7C	; 124
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	fc 01       	movw	r30, r24
    1a12:	20 83       	st	Z, r18
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	fc 01       	movw	r30, r24
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	fc 01       	movw	r30, r24
    1a26:	20 81       	ld	r18, Z
    1a28:	31 81       	ldd	r19, Z+1	; 0x01
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2e:	02 96       	adiw	r24, 0x02	; 2
    1a30:	b9 01       	movw	r22, r18
    1a32:	0e 94 84 19 	call	0x3308	; 0x3308 <memcpy>
    1a36:	03 c0       	rjmp	.+6      	; 0x1a3e <PHY_DataInd+0xd2>
    1a38:	00 00       	nop
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <PHY_DataInd+0xd2>
    1a3c:	00 00       	nop
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <nwkRxSendAck>:
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <nwkRxSendAck+0x6>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <nwkRxSendAck+0x8>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	54 da       	rcall	.-2904   	; 0xf06 <nwkFrameAlloc>
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	89 2b       	or	r24, r25
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <nwkRxSendAck+0x20>
    1a6a:	4e c0       	rjmp	.+156    	; 0x1b08 <nwkRxSendAck+0xbc>
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	0d db       	rcall	.-2534   	; 0x108c <nwkFrameCommandInit>
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	fc 01       	movw	r30, r24
    1a78:	81 81       	ldd	r24, Z+1	; 0x01
    1a7a:	23 e0       	ldi	r18, 0x03	; 3
    1a7c:	28 0f       	add	r18, r24
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	fc 01       	movw	r30, r24
    1a84:	21 83       	std	Z+1, r18	; 0x01
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	89 57       	subi	r24, 0x79	; 121
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	fc 01       	movw	r30, r24
    1a90:	11 82       	std	Z+1, r1	; 0x01
    1a92:	10 82       	st	Z, r1
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	fc 01       	movw	r30, r24
    1a9a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a9c:	81 fb       	bst	r24, 1
    1a9e:	22 27       	eor	r18, r18
    1aa0:	20 f9       	bld	r18, 0
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	21 70       	andi	r18, 0x01	; 1
    1aa8:	22 0f       	add	r18, r18
    1aaa:	fc 01       	movw	r30, r24
    1aac:	33 85       	ldd	r19, Z+11	; 0x0b
    1aae:	3d 7f       	andi	r19, 0xFD	; 253
    1ab0:	23 2b       	or	r18, r19
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	23 87       	std	Z+11, r18	; 0x0b
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	fc 01       	movw	r30, r24
    1abc:	25 85       	ldd	r18, Z+13	; 0x0d
    1abe:	36 85       	ldd	r19, Z+14	; 0x0e
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	30 8b       	std	Z+16, r19	; 0x10
    1ac8:	27 87       	std	Z+15, r18	; 0x0f
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	8f 57       	subi	r24, 0x7F	; 127
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	10 82       	st	Z, r1
    1ae4:	20 91 36 19 	lds	r18, 0x1936	; 0x801936 <nwkRxAckControl>
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	fc 01       	movw	r30, r24
    1aee:	22 83       	std	Z+2, r18	; 0x02
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	fc 01       	movw	r30, r24
    1af6:	24 85       	ldd	r18, Z+12	; 0x0c
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	fc 01       	movw	r30, r24
    1afe:	21 83       	std	Z+1, r18	; 0x01
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	d2 d3       	rcall	.+1956   	; 0x22aa <nwkTxFrame>
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <nwkRxSendAck+0xbe>
    1b08:	00 00       	nop
    1b0a:	26 96       	adiw	r28, 0x06	; 6
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <nwkRxDuplicateRejectionTimerHandler+0x6>
    1b22:	1f 92       	push	r1
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
  bool restart = false;
    1b2c:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1b2e:	1a 82       	std	Y+2, r1	; 0x02
    1b30:	30 c0       	rjmp	.+96     	; 0x1b92 <nwkRxDuplicateRejectionTimerHandler+0x76>
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	c9 01       	movw	r24, r18
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	82 0f       	add	r24, r18
    1b44:	93 1f       	adc	r25, r19
    1b46:	88 5f       	subi	r24, 0xF8	; 248
    1b48:	96 4e       	sbci	r25, 0xE6	; 230
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 23       	and	r24, r24
    1b50:	e9 f0       	breq	.+58     	; 0x1b8c <nwkRxDuplicateRejectionTimerHandler+0x70>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	c9 01       	movw	r24, r18
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	82 0f       	add	r24, r18
    1b64:	93 1f       	adc	r25, r19
    1b66:	88 5f       	subi	r24, 0xF8	; 248
    1b68:	96 4e       	sbci	r25, 0xE6	; 230
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	80 81       	ld	r24, Z
    1b6e:	4f ef       	ldi	r20, 0xFF	; 255
    1b70:	48 0f       	add	r20, r24
    1b72:	c9 01       	movw	r24, r18
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	82 0f       	add	r24, r18
    1b7e:	93 1f       	adc	r25, r19
    1b80:	88 5f       	subi	r24, 0xF8	; 248
    1b82:	96 4e       	sbci	r25, 0xE6	; 230
    1b84:	fc 01       	movw	r30, r24
    1b86:	40 83       	st	Z, r20
      restart = true;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	8a 30       	cpi	r24, 0x0A	; 10
    1b96:	68 f2       	brcs	.-102    	; 0x1b32 <nwkRxDuplicateRejectionTimerHandler+0x16>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	88 23       	and	r24, r24
    1b9c:	21 f0       	breq	.+8      	; 0x1ba6 <nwkRxDuplicateRejectionTimerHandler+0x8a>
    SYS_TimerStart(timer);
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <SYS_TimerStart>
}
    1ba6:	00 00       	nop
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <nwkRxRejectDuplicate>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	29 97       	sbiw	r28, 0x09	; 9
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	99 87       	std	Y+9, r25	; 0x09
    1bcc:	88 87       	std	Y+8, r24	; 0x08
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1bce:	1a 82       	std	Y+2, r1	; 0x02
    1bd0:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1bd2:	1b 82       	std	Y+3, r1	; 0x03
    1bd4:	ac c0       	rjmp	.+344    	; 0x1d2e <nwkRxRejectDuplicate+0x178>
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	c9 01       	movw	r24, r18
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	82 0f       	add	r24, r18
    1be8:	93 1f       	adc	r25, r19
    1bea:	8c 5f       	subi	r24, 0xFC	; 252
    1bec:	96 4e       	sbci	r25, 0xE6	; 230
    1bee:	9d 83       	std	Y+5, r25	; 0x05
    1bf0:	8c 83       	std	Y+4, r24	; 0x04

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	84 81       	ldd	r24, Z+4	; 0x04
    1bfa:	88 23       	and	r24, r24
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <nwkRxRejectDuplicate+0x4a>
    1bfe:	8a c0       	rjmp	.+276    	; 0x1d14 <nwkRxRejectDuplicate+0x15e>
    1c00:	88 85       	ldd	r24, Y+8	; 0x08
    1c02:	99 85       	ldd	r25, Y+9	; 0x09
    1c04:	fc 01       	movw	r30, r24
    1c06:	23 85       	ldd	r18, Z+11	; 0x0b
    1c08:	34 85       	ldd	r19, Z+12	; 0x0c
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	fc 01       	movw	r30, r24
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	28 17       	cp	r18, r24
    1c16:	39 07       	cpc	r19, r25
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <nwkRxRejectDuplicate+0x66>
    1c1a:	7c c0       	rjmp	.+248    	; 0x1d14 <nwkRxRejectDuplicate+0x15e>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	fc 01       	movw	r30, r24
    1c22:	22 81       	ldd	r18, Z+2	; 0x02
    1c24:	88 85       	ldd	r24, Y+8	; 0x08
    1c26:	99 85       	ldd	r25, Y+9	; 0x09
    1c28:	fc 01       	movw	r30, r24
    1c2a:	82 85       	ldd	r24, Z+10	; 0x0a
    1c2c:	f2 2f       	mov	r31, r18
    1c2e:	f8 1b       	sub	r31, r24
    1c30:	8f 2f       	mov	r24, r31
    1c32:	8e 83       	std	Y+6, r24	; 0x06

      if (diff < 8)
    1c34:	8e 81       	ldd	r24, Y+6	; 0x06
    1c36:	88 30       	cpi	r24, 0x08	; 8
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <nwkRxRejectDuplicate+0x86>
    1c3a:	46 c0       	rjmp	.+140    	; 0x1cc8 <nwkRxRejectDuplicate+0x112>
      {
        if (entry->mask & (1 << diff))
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	fc 01       	movw	r30, r24
    1c42:	83 81       	ldd	r24, Z+3	; 0x03
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	2e 81       	ldd	r18, Y+6	; 0x06
    1c4a:	22 2f       	mov	r18, r18
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <nwkRxRejectDuplicate+0x9e>
    1c50:	95 95       	asr	r25
    1c52:	87 95       	ror	r24
    1c54:	2a 95       	dec	r18
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <nwkRxRejectDuplicate+0x9a>
    1c58:	81 70       	andi	r24, 0x01	; 1
    1c5a:	99 27       	eor	r25, r25
    1c5c:	89 2b       	or	r24, r25
    1c5e:	e9 f0       	breq	.+58     	; 0x1c9a <nwkRxRejectDuplicate+0xe4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1c60:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1c64:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1c68:	88 85       	ldd	r24, Y+8	; 0x08
    1c6a:	99 85       	ldd	r25, Y+9	; 0x09
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	85 81       	ldd	r24, Z+5	; 0x05
    1c70:	96 81       	ldd	r25, Z+6	; 0x06
    1c72:	28 17       	cp	r18, r24
    1c74:	39 07       	cpc	r19, r25
    1c76:	79 f4       	brne	.+30     	; 0x1c96 <nwkRxRejectDuplicate+0xe0>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1c78:	88 85       	ldd	r24, Y+8	; 0x08
    1c7a:	99 85       	ldd	r25, Y+9	; 0x09
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	81 85       	ldd	r24, Z+9	; 0x09
    1c80:	83 fb       	bst	r24, 3
    1c82:	88 27       	eor	r24, r24
    1c84:	80 f9       	bld	r24, 0
    1c86:	28 2f       	mov	r18, r24
    1c88:	88 85       	ldd	r24, Y+8	; 0x08
    1c8a:	99 85       	ldd	r25, Y+9	; 0x09
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	85 85       	ldd	r24, Z+13	; 0x0d
    1c90:	96 85       	ldd	r25, Z+14	; 0x0e
    1c92:	62 2f       	mov	r22, r18
    1c94:	68 db       	rcall	.-2352   	; 0x1366 <nwkRouteRemove>
        #endif
          return true;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	74 c0       	rjmp	.+232    	; 0x1d82 <nwkRxRejectDuplicate+0x1cc>
        }

        entry->mask |= (1 << diff);
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	83 81       	ldd	r24, Z+3	; 0x03
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <nwkRxRejectDuplicate+0xfe>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	2a 95       	dec	r18
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <nwkRxRejectDuplicate+0xfa>
    1cb8:	84 2b       	or	r24, r20
    1cba:	28 2f       	mov	r18, r24
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	23 83       	std	Z+3, r18	; 0x03
        return false;
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	5d c0       	rjmp	.+186    	; 0x1d82 <nwkRxRejectDuplicate+0x1cc>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    1cc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cca:	81 95       	neg	r24
    1ccc:	8f 83       	std	Y+7, r24	; 0x07

        entry->seq = header->nwkSeq;
    1cce:	88 85       	ldd	r24, Y+8	; 0x08
    1cd0:	99 85       	ldd	r25, Y+9	; 0x09
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	22 85       	ldd	r18, Z+10	; 0x0a
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	fc 01       	movw	r30, r24
    1cdc:	22 83       	std	Z+2, r18	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1cde:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	83 81       	ldd	r24, Z+3	; 0x03
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	2f 81       	ldd	r18, Y+7	; 0x07
    1cec:	22 2f       	mov	r18, r18
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <nwkRxRejectDuplicate+0x140>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	2a 95       	dec	r18
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <nwkRxRejectDuplicate+0x13c>
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	fc 01       	movw	r30, r24
    1d04:	23 83       	std	Z+3, r18	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0a:	2f e1       	ldi	r18, 0x1F	; 31
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	24 83       	std	Z+4, r18	; 0x04
        return false;
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	37 c0       	rjmp	.+110    	; 0x1d82 <nwkRxRejectDuplicate+0x1cc>
      }
    }

    if (0 == entry->ttl)
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	fc 01       	movw	r30, r24
    1d1a:	84 81       	ldd	r24, Z+4	; 0x04
    1d1c:	88 23       	and	r24, r24
    1d1e:	21 f4       	brne	.+8      	; 0x1d28 <nwkRxRejectDuplicate+0x172>
      freeEntry = entry;
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	9d 81       	ldd	r25, Y+5	; 0x05
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	8a 30       	cpi	r24, 0x0A	; 10
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <nwkRxRejectDuplicate+0x180>
    1d34:	50 cf       	rjmp	.-352    	; 0x1bd6 <nwkRxRejectDuplicate+0x20>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	89 2b       	or	r24, r25
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <nwkRxRejectDuplicate+0x18c>
    return true;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	20 c0       	rjmp	.+64     	; 0x1d82 <nwkRxRejectDuplicate+0x1cc>

  freeEntry->src = header->nwkSrcAddr;
    1d42:	88 85       	ldd	r24, Y+8	; 0x08
    1d44:	99 85       	ldd	r25, Y+9	; 0x09
    1d46:	fc 01       	movw	r30, r24
    1d48:	23 85       	ldd	r18, Z+11	; 0x0b
    1d4a:	34 85       	ldd	r19, Z+12	; 0x0c
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	fc 01       	movw	r30, r24
    1d52:	31 83       	std	Z+1, r19	; 0x01
    1d54:	20 83       	st	Z, r18
  freeEntry->seq = header->nwkSeq;
    1d56:	88 85       	ldd	r24, Y+8	; 0x08
    1d58:	99 85       	ldd	r25, Y+9	; 0x09
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	22 85       	ldd	r18, Z+10	; 0x0a
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	fc 01       	movw	r30, r24
    1d64:	22 83       	std	Z+2, r18	; 0x02
  freeEntry->mask = 1;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	21 e0       	ldi	r18, 0x01	; 1
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	2f e1       	ldi	r18, 0x1F	; 31
    1d76:	fc 01       	movw	r30, r24
    1d78:	24 83       	std	Z+4, r18	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1d7a:	87 e3       	ldi	r24, 0x37	; 55
    1d7c:	99 e1       	ldi	r25, 0x19	; 25
    1d7e:	f9 d7       	rcall	.+4082   	; 0x2d72 <SYS_TimerStart>

  return false;
    1d80:	80 e0       	ldi	r24, 0x00	; 0
}
    1d82:	29 96       	adiw	r28, 0x09	; 9
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	08 95       	ret

00001d94 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxServiceDataInd(NWK_DataInd_t *ind)
{
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	1f 92       	push	r1
    1d9a:	1f 92       	push	r1
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	fc 01       	movw	r30, r24
    1daa:	81 85       	ldd	r24, Z+9	; 0x09
    1dac:	88 23       	and	r24, r24
    1dae:	11 f4       	brne	.+4      	; 0x1db4 <nwkRxServiceDataInd+0x20>
    return false;
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	17 c0       	rjmp	.+46     	; 0x1de2 <nwkRxServiceDataInd+0x4e>

  switch (ind->data[0])
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	fc 01       	movw	r30, r24
    1dba:	87 81       	ldd	r24, Z+7	; 0x07
    1dbc:	90 85       	ldd	r25, Z+8	; 0x08
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <nwkRxServiceDataInd+0x3c>
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	29 f0       	breq	.+10     	; 0x1dd8 <nwkRxServiceDataInd+0x44>
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <nwkRxServiceDataInd+0x4c>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	98 d3       	rcall	.+1840   	; 0x2506 <nwkTxAckReceived>
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <nwkRxServiceDataInd+0x4e>

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	0d dd       	rcall	.-1510   	; 0x17f8 <nwkRouteErrorReceived>
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <nwkRxServiceDataInd+0x4e>
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    1de0:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <nwkRxHandleReceivedFrame>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <nwkRxHandleReceivedFrame+0x6>
    1df2:	1f 92       	push	r1
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	02 96       	adiw	r24, 0x02	; 2
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01

  frame->state = NWK_RX_STATE_FINISH;
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	24 e2       	ldi	r18, 0x24	; 36
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	20 83       	st	Z, r18

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	fc 01       	movw	r30, r24
    1e16:	81 85       	ldd	r24, Z+9	; 0x09
    1e18:	82 70       	andi	r24, 0x02	; 2
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <nwkRxHandleReceivedFrame+0x34>
    1e1e:	96 c0       	rjmp	.+300    	; 0x1f4c <nwkRxHandleReceivedFrame+0x160>

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	fc 01       	movw	r30, r24
    1e26:	81 85       	ldd	r24, Z+9	; 0x09
    1e28:	88 70       	andi	r24, 0x08	; 8
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <nwkRxHandleReceivedFrame+0x44>
    1e2e:	90 c0       	rjmp	.+288    	; 0x1f50 <nwkRxHandleReceivedFrame+0x164>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	fc 01       	movw	r30, r24
    1e36:	83 81       	ldd	r24, Z+3	; 0x03
    1e38:	94 81       	ldd	r25, Z+4	; 0x04
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	d1 f4       	brne	.+52     	; 0x1e72 <nwkRxHandleReceivedFrame+0x86>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1e3e:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1e42:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	85 85       	ldd	r24, Z+13	; 0x0d
    1e4e:	96 85       	ldd	r25, Z+14	; 0x0e
    1e50:	28 17       	cp	r18, r24
    1e52:	39 07       	cpc	r19, r25
    1e54:	41 f0       	breq	.+16     	; 0x1e66 <nwkRxHandleReceivedFrame+0x7a>
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	85 85       	ldd	r24, Z+13	; 0x0d
    1e5e:	96 85       	ldd	r25, Z+14	; 0x0e
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <nwkRxHandleReceivedFrame+0x7a>
    1e64:	77 c0       	rjmp	.+238    	; 0x1f54 <nwkRxHandleReceivedFrame+0x168>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	22 e2       	ldi	r18, 0x22	; 34
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	20 83       	st	Z, r18
    }
    return;
    1e70:	71 c0       	rjmp	.+226    	; 0x1f54 <nwkRxHandleReceivedFrame+0x168>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	fc 01       	movw	r30, r24
    1e78:	85 85       	ldd	r24, Z+13	; 0x0d
    1e7a:	96 85       	ldd	r25, Z+14	; 0x0e
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	41 f4       	brne	.+16     	; 0x1e90 <nwkRxHandleReceivedFrame+0xa4>
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	fc 01       	movw	r30, r24
    1e86:	81 85       	ldd	r24, Z+9	; 0x09
    1e88:	81 70       	andi	r24, 0x01	; 1
    1e8a:	88 23       	and	r24, r24
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <nwkRxHandleReceivedFrame+0xa4>
    1e8e:	64 c0       	rjmp	.+200    	; 0x1f58 <nwkRxHandleReceivedFrame+0x16c>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1e90:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1e94:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	83 85       	ldd	r24, Z+11	; 0x0b
    1ea0:	94 85       	ldd	r25, Z+12	; 0x0c
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <nwkRxHandleReceivedFrame+0xbe>
    1ea8:	59 c0       	rjmp	.+178    	; 0x1f5c <nwkRxHandleReceivedFrame+0x170>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	7b da       	rcall	.-2826   	; 0x13a6 <nwkRouteFrameReceived>
#endif

  if (nwkRxRejectDuplicate(header))
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	80 de       	rcall	.-768    	; 0x1bb6 <nwkRxRejectDuplicate>
    1eb6:	88 23       	and	r24, r24
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <nwkRxHandleReceivedFrame+0xd0>
    1eba:	52 c0       	rjmp	.+164    	; 0x1f60 <nwkRxHandleReceivedFrame+0x174>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	85 81       	ldd	r24, Z+5	; 0x05
    1ec4:	96 81       	ldd	r25, Z+6	; 0x06
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	b1 f4       	brne	.+44     	; 0x1ef6 <nwkRxHandleReceivedFrame+0x10a>
    1eca:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1ece:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	85 85       	ldd	r24, Z+13	; 0x0d
    1eda:	96 85       	ldd	r25, Z+14	; 0x0e
    1edc:	28 17       	cp	r18, r24
    1ede:	39 07       	cpc	r19, r25
    1ee0:	51 f0       	breq	.+20     	; 0x1ef6 <nwkRxHandleReceivedFrame+0x10a>
        0 == header->nwkFcf.linkLocal)
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	81 85       	ldd	r24, Z+9	; 0x09
    1eea:	84 70       	andi	r24, 0x04	; 4
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1eec:	88 23       	and	r24, r24
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <nwkRxHandleReceivedFrame+0x10a>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	8c d2       	rcall	.+1304   	; 0x240e <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1ef6:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1efa:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	fc 01       	movw	r30, r24
    1f04:	85 85       	ldd	r24, Z+13	; 0x0d
    1f06:	96 85       	ldd	r25, Z+14	; 0x0e
    1f08:	28 17       	cp	r18, r24
    1f0a:	39 07       	cpc	r19, r25
    1f0c:	39 f0       	breq	.+14     	; 0x1f1c <nwkRxHandleReceivedFrame+0x130>
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	fc 01       	movw	r30, r24
    1f14:	85 85       	ldd	r24, Z+13	; 0x0d
    1f16:	96 85       	ldd	r25, Z+14	; 0x0e
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	31 f4       	brne	.+12     	; 0x1f28 <nwkRxHandleReceivedFrame+0x13c>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	22 e2       	ldi	r18, 0x22	; 34
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 83       	st	Z, r18
    1f26:	1d c0       	rjmp	.+58     	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1f28:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1f2c:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a 81       	ldd	r25, Y+2	; 0x02
    1f34:	fc 01       	movw	r30, r24
    1f36:	85 81       	ldd	r24, Z+5	; 0x05
    1f38:	96 81       	ldd	r25, Z+6	; 0x06
    1f3a:	28 17       	cp	r18, r24
    1f3c:	39 07       	cpc	r19, r25
    1f3e:	89 f4       	brne	.+34     	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	23 e2       	ldi	r18, 0x23	; 35
    1f46:	fc 01       	movw	r30, r24
    1f48:	20 83       	st	Z, r18
    1f4a:	0b c0       	rjmp	.+22     	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>

  frame->state = NWK_RX_STATE_FINISH;

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    return;
    1f4c:	00 00       	nop
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>
#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    return;
    1f50:	00 00       	nop
    1f52:	07 c0       	rjmp	.+14     	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    }
    return;
    1f54:	00 00       	nop
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;
    1f58:	00 00       	nop
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>

  if (nwkIb.addr == header->nwkSrcAddr)
    return;
    1f5c:	00 00       	nop
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <nwkRxHandleReceivedFrame+0x176>
#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
#endif

  if (nwkRxRejectDuplicate(header))
    return;
    1f60:	00 00       	nop
    {
      frame->state = NWK_RX_STATE_ROUTE;
    }
  #endif
  }
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	60 97       	sbiw	r28, 0x10	; 16
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	98 8b       	std	Y+16, r25	; 0x10
    1f86:	8f 87       	std	Y+15, r24	; 0x0f
  NwkFrameHeader_t *header = &frame->header;
    1f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8a:	98 89       	ldd	r25, Y+16	; 0x10
    1f8c:	02 96       	adiw	r24, 0x02	; 2
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	fc 01       	movw	r30, r24
    1f98:	87 85       	ldd	r24, Z+15	; 0x0f
    1f9a:	82 95       	swap	r24
    1f9c:	8f 70       	andi	r24, 0x0F	; 15
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	03 96       	adiw	r24, 0x03	; 3
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	89 51       	subi	r24, 0x19	; 25
    1faa:	96 4e       	sbci	r25, 0xE6	; 230
    1fac:	fc 01       	movw	r30, r24
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	89 2b       	or	r24, r25
    1fb4:	11 f4       	brne	.+4      	; 0x1fba <nwkRxIndicateFrame+0x4a>
    return false;
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	aa c0       	rjmp	.+340    	; 0x210e <__EEPROM_REGION_LENGTH__+0x10e>

  ind.srcAddr = header->nwkSrcAddr;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	83 85       	ldd	r24, Z+11	; 0x0b
    1fc2:	94 85       	ldd	r25, Z+12	; 0x0c
    1fc4:	9c 83       	std	Y+4, r25	; 0x04
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
  ind.dstAddr = header->nwkDstAddr;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	fc 01       	movw	r30, r24
    1fce:	85 85       	ldd	r24, Z+13	; 0x0d
    1fd0:	96 85       	ldd	r25, Z+14	; 0x0e
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	fc 01       	movw	r30, r24
    1fdc:	87 85       	ldd	r24, Z+15	; 0x0f
    1fde:	8f 70       	andi	r24, 0x0F	; 15
    1fe0:	8f 83       	std	Y+7, r24	; 0x07
  ind.dstEndpoint = header->nwkDstEndpoint;
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	87 85       	ldd	r24, Z+15	; 0x0f
    1fea:	82 95       	swap	r24
    1fec:	8f 70       	andi	r24, 0x0F	; 15
    1fee:	88 87       	std	Y+8, r24	; 0x08
  ind.data = frame->payload;
    1ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff2:	98 89       	ldd	r25, Y+16	; 0x10
    1ff4:	8f 57       	subi	r24, 0x7F	; 127
    1ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	9b 87       	std	Y+11, r25	; 0x0b
    2000:	8a 87       	std	Y+10, r24	; 0x0a
  ind.size = nwkFramePayloadSize(frame);
    2002:	8f 85       	ldd	r24, Y+15	; 0x0f
    2004:	98 89       	ldd	r25, Y+16	; 0x10
    2006:	57 dc       	rcall	.-1874   	; 0x18b6 <nwkFramePayloadSize>
    2008:	8c 87       	std	Y+12, r24	; 0x0c
  ind.lqi = frame->rx.lqi;
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	98 89       	ldd	r25, Y+16	; 0x10
    200e:	8d 57       	subi	r24, 0x7D	; 125
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	fc 01       	movw	r30, r24
    2014:	80 81       	ld	r24, Z
    2016:	8d 87       	std	Y+13, r24	; 0x0d
  ind.rssi = frame->rx.rssi;
    2018:	8f 85       	ldd	r24, Y+15	; 0x0f
    201a:	98 89       	ldd	r25, Y+16	; 0x10
    201c:	8c 57       	subi	r24, 0x7C	; 124
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	fc 01       	movw	r30, r24
    2022:	80 81       	ld	r24, Z
    2024:	8e 87       	std	Y+14, r24	; 0x0e

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	fc 01       	movw	r30, r24
    202c:	81 85       	ldd	r24, Z+9	; 0x09
    202e:	98 2f       	mov	r25, r24
    2030:	91 70       	andi	r25, 0x01	; 1
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	99 23       	and	r25, r25
    2036:	09 f4       	brne	.+2      	; 0x203a <__EEPROM_REGION_LENGTH__+0x3a>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	28 2f       	mov	r18, r24
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	fc 01       	movw	r30, r24
    2046:	81 85       	ldd	r24, Z+9	; 0x09
    2048:	82 70       	andi	r24, 0x02	; 2
    204a:	82 2b       	or	r24, r18
    204c:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	28 2f       	mov	r18, r24
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	fc 01       	movw	r30, r24
    2058:	81 85       	ldd	r24, Z+9	; 0x09
    205a:	84 70       	andi	r24, 0x04	; 4
    205c:	88 23       	and	r24, r24
    205e:	11 f0       	breq	.+4      	; 0x2064 <__EEPROM_REGION_LENGTH__+0x64>
    2060:	80 e2       	ldi	r24, 0x20	; 32
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <__EEPROM_REGION_LENGTH__+0x66>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	82 2b       	or	r24, r18
    2068:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	28 2f       	mov	r18, r24
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	fc 01       	movw	r30, r24
    2074:	81 85       	ldd	r24, Z+9	; 0x09
    2076:	88 70       	andi	r24, 0x08	; 8
    2078:	88 23       	and	r24, r24
    207a:	11 f0       	breq	.+4      	; 0x2080 <__EEPROM_REGION_LENGTH__+0x80>
    207c:	80 e4       	ldi	r24, 0x40	; 64
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <__EEPROM_REGION_LENGTH__+0x82>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	82 2b       	or	r24, r18
    2084:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	28 2f       	mov	r18, r24
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	fc 01       	movw	r30, r24
    2090:	85 85       	ldd	r24, Z+13	; 0x0d
    2092:	96 85       	ldd	r25, Z+14	; 0x0e
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	11 f4       	brne	.+4      	; 0x209c <__EEPROM_REGION_LENGTH__+0x9c>
    2098:	84 e0       	ldi	r24, 0x04	; 4
    209a:	01 c0       	rjmp	.+2      	; 0x209e <__EEPROM_REGION_LENGTH__+0x9e>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	82 2b       	or	r24, r18
    20a0:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	48 2f       	mov	r20, r24
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	fc 01       	movw	r30, r24
    20ac:	23 85       	ldd	r18, Z+11	; 0x0b
    20ae:	34 85       	ldd	r19, Z+12	; 0x0c
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	fc 01       	movw	r30, r24
    20b6:	87 81       	ldd	r24, Z+7	; 0x07
    20b8:	90 85       	ldd	r25, Z+8	; 0x08
    20ba:	28 17       	cp	r18, r24
    20bc:	39 07       	cpc	r19, r25
    20be:	11 f4       	brne	.+4      	; 0x20c4 <__EEPROM_REGION_LENGTH__+0xc4>
    20c0:	88 e0       	ldi	r24, 0x08	; 8
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <__EEPROM_REGION_LENGTH__+0xc6>
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	84 2b       	or	r24, r20
    20c8:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	28 2f       	mov	r18, r24
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	fc 01       	movw	r30, r24
    20d4:	83 81       	ldd	r24, Z+3	; 0x03
    20d6:	94 81       	ldd	r25, Z+4	; 0x04
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	11 f4       	brne	.+4      	; 0x20e0 <__EEPROM_REGION_LENGTH__+0xe0>
    20dc:	80 e1       	ldi	r24, 0x10	; 16
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <__EEPROM_REGION_LENGTH__+0xe2>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	82 2b       	or	r24, r18
    20e4:	89 87       	std	Y+9, r24	; 0x09

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	fc 01       	movw	r30, r24
    20ec:	87 85       	ldd	r24, Z+15	; 0x0f
    20ee:	82 95       	swap	r24
    20f0:	8f 70       	andi	r24, 0x0F	; 15
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	03 96       	adiw	r24, 0x03	; 3
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	89 51       	subi	r24, 0x19	; 25
    20fe:	96 4e       	sbci	r25, 0xE6	; 230
    2100:	fc 01       	movw	r30, r24
    2102:	20 81       	ld	r18, Z
    2104:	31 81       	ldd	r19, Z+1	; 0x01
    2106:	ce 01       	movw	r24, r28
    2108:	03 96       	adiw	r24, 0x03	; 3
    210a:	f9 01       	movw	r30, r18
    210c:	19 95       	eicall
}
    210e:	60 96       	adiw	r28, 0x10	; 16
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <nwkRxHandleIndication>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	00 d0       	rcall	.+0      	; 0x2126 <nwkRxHandleIndication+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
  bool ack;

  nwkRxAckControl = 0;
    212e:	10 92 36 19 	sts	0x1936, r1	; 0x801936 <nwkRxAckControl>
  ack = nwkRxIndicateFrame(frame);
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	9b 81       	ldd	r25, Y+3	; 0x03
    2136:	1c df       	rcall	.-456    	; 0x1f70 <nwkRxIndicateFrame>
    2138:	89 83       	std	Y+1, r24	; 0x01
  
  if (0 == frame->header.nwkFcf.ackRequest)
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	9b 81       	ldd	r25, Y+3	; 0x03
    213e:	fc 01       	movw	r30, r24
    2140:	83 85       	ldd	r24, Z+11	; 0x0b
    2142:	81 70       	andi	r24, 0x01	; 1
    2144:	88 23       	and	r24, r24
    2146:	09 f4       	brne	.+2      	; 0x214a <nwkRxHandleIndication+0x2a>
    ack = false;
    2148:	19 82       	std	Y+1, r1	; 0x01

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	fc 01       	movw	r30, r24
    2150:	87 81       	ldd	r24, Z+7	; 0x07
    2152:	90 85       	ldd	r25, Z+8	; 0x08
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	a9 f4       	brne	.+42     	; 0x2182 <nwkRxHandleIndication+0x62>
      nwkIb.addr == frame->header.nwkDstAddr &&
    2158:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    215c:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	fc 01       	movw	r30, r24
    2166:	87 85       	ldd	r24, Z+15	; 0x0f
    2168:	90 89       	ldd	r25, Z+16	; 0x10
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    216a:	28 17       	cp	r18, r24
    216c:	39 07       	cpc	r19, r25
    216e:	49 f4       	brne	.+18     	; 0x2182 <nwkRxHandleIndication+0x62>
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	9b 81       	ldd	r25, Y+3	; 0x03
    2174:	fc 01       	movw	r30, r24
    2176:	83 85       	ldd	r24, Z+11	; 0x0b
    2178:	88 70       	andi	r24, 0x08	; 8
  
  if (0 == frame->header.nwkFcf.ackRequest)
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
    217a:	88 23       	and	r24, r24
    217c:	11 f4       	brne	.+4      	; 0x2182 <nwkRxHandleIndication+0x62>
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	fc 01       	movw	r30, r24
    2188:	85 81       	ldd	r24, Z+5	; 0x05
    218a:	96 81       	ldd	r25, Z+6	; 0x06
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	09 f4       	brne	.+2      	; 0x2192 <nwkRxHandleIndication+0x72>
    ack = false;
    2190:	19 82       	std	Y+1, r1	; 0x01

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    2192:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <nwkIb>
    2196:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	09 f4       	brne	.+2      	; 0x21a0 <nwkRxHandleIndication+0x80>
    ack = false;
    219e:	19 82       	std	Y+1, r1	; 0x01

  if (ack)
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	88 23       	and	r24, r24
    21a4:	19 f0       	breq	.+6      	; 0x21ac <nwkRxHandleIndication+0x8c>
    nwkRxSendAck(frame);
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	50 dc       	rcall	.-1888   	; 0x1a4c <nwkRxSendAck>

  frame->state = NWK_RX_STATE_FINISH;
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	9b 81       	ldd	r25, Y+3	; 0x03
    21b0:	24 e2       	ldi	r18, 0x24	; 36
    21b2:	fc 01       	movw	r30, r24
    21b4:	20 83       	st	Z, r18
}
    21b6:	00 00       	nop
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	08 95       	ret

000021c4 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	1f 92       	push	r1
    21ca:	1f 92       	push	r1
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
  NwkFrame_t *frame = NULL;
    21d0:	1a 82       	std	Y+2, r1	; 0x02
    21d2:	19 82       	std	Y+1, r1	; 0x01

  while (NULL != (frame = nwkFrameNext(frame)))
    21d4:	26 c0       	rjmp	.+76     	; 0x2222 <nwkRxTaskHandler+0x5e>
  {
    switch (frame->state)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	fc 01       	movw	r30, r24
    21dc:	80 81       	ld	r24, Z
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	82 32       	cpi	r24, 0x22	; 34
    21e4:	91 05       	cpc	r25, r1
    21e6:	81 f0       	breq	.+32     	; 0x2208 <nwkRxTaskHandler+0x44>
    21e8:	83 32       	cpi	r24, 0x23	; 35
    21ea:	91 05       	cpc	r25, r1
    21ec:	1c f4       	brge	.+6      	; 0x21f4 <nwkRxTaskHandler+0x30>
    21ee:	80 97       	sbiw	r24, 0x20	; 32
    21f0:	39 f0       	breq	.+14     	; 0x2200 <nwkRxTaskHandler+0x3c>
    21f2:	17 c0       	rjmp	.+46     	; 0x2222 <nwkRxTaskHandler+0x5e>
    21f4:	83 32       	cpi	r24, 0x23	; 35
    21f6:	91 05       	cpc	r25, r1
    21f8:	59 f0       	breq	.+22     	; 0x2210 <nwkRxTaskHandler+0x4c>
    21fa:	84 97       	sbiw	r24, 0x24	; 36
    21fc:	69 f0       	breq	.+26     	; 0x2218 <nwkRxTaskHandler+0x54>
    21fe:	11 c0       	rjmp	.+34     	; 0x2222 <nwkRxTaskHandler+0x5e>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	f3 dd       	rcall	.-1050   	; 0x1dec <nwkRxHandleReceivedFrame>
      } break;
    2206:	0d c0       	rjmp	.+26     	; 0x2222 <nwkRxTaskHandler+0x5e>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	89 df       	rcall	.-238    	; 0x2120 <nwkRxHandleIndication>
      } break;
    220e:	09 c0       	rjmp	.+18     	; 0x2222 <nwkRxTaskHandler+0x5e>

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	41 da       	rcall	.-2942   	; 0x1698 <nwkRouteFrame>
      } break;
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <nwkRxTaskHandler+0x5e>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	0e 94 f8 07 	call	0xff0	; 0xff0 <nwkFrameFree>
      } break;
    2220:	00 00       	nop
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	0e 94 13 08 	call	0x1026	; 0x1026 <nwkFrameNext>
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	89 2b       	or	r24, r25
    2234:	81 f6       	brne	.-96     	; 0x21d6 <nwkRxTaskHandler+0x12>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    2236:	00 00       	nop
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <nwkTxInit>:

/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
  nwkTxPhyActiveFrame = NULL;
    224a:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    224e:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2252:	82 e3       	ldi	r24, 0x32	; 50
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e0       	ldi	r26, 0x00	; 0
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <nwkTxAckWaitTimer+0x6>
    225e:	90 93 4d 19 	sts	0x194D, r25	; 0x80194d <nwkTxAckWaitTimer+0x7>
    2262:	a0 93 4e 19 	sts	0x194E, r26	; 0x80194e <nwkTxAckWaitTimer+0x8>
    2266:	b0 93 4f 19 	sts	0x194F, r27	; 0x80194f <nwkTxAckWaitTimer+0x9>
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    226a:	10 92 50 19 	sts	0x1950, r1	; 0x801950 <nwkTxAckWaitTimer+0xa>
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    226e:	81 ed       	ldi	r24, 0xD1	; 209
    2270:	92 e1       	ldi	r25, 0x12	; 18
    2272:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <nwkTxAckWaitTimer+0xc>
    2276:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <nwkTxAckWaitTimer+0xb>

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    227a:	8a e0       	ldi	r24, 0x0A	; 10
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e0       	ldi	r26, 0x00	; 0
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <nwkTxDelayTimer+0x6>
    2286:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <nwkTxDelayTimer+0x7>
    228a:	a0 93 5b 19 	sts	0x195B, r26	; 0x80195b <nwkTxDelayTimer+0x8>
    228e:	b0 93 5c 19 	sts	0x195C, r27	; 0x80195c <nwkTxDelayTimer+0x9>
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2292:	10 92 5d 19 	sts	0x195D, r1	; 0x80195d <nwkTxDelayTimer+0xa>
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2296:	88 e3       	ldi	r24, 0x38	; 56
    2298:	93 e1       	ldi	r25, 0x13	; 19
    229a:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <nwkTxDelayTimer+0xc>
    229e:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <nwkTxDelayTimer+0xb>
}
    22a2:	00 00       	nop
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <nwkTxFrame+0x6>
    22b0:	1f 92       	push	r1
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	02 96       	adiw	r24, 0x02	; 2
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	8a 57       	subi	r24, 0x7A	; 122
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	fc 01       	movw	r30, r24
    22ce:	80 81       	ld	r24, Z
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	82 70       	andi	r24, 0x02	; 2
    22d6:	99 27       	eor	r25, r25
    22d8:	89 2b       	or	r24, r25
    22da:	31 f0       	breq	.+12     	; 0x22e8 <nwkTxFrame+0x3e>
  {
    frame->state = NWK_TX_STATE_DELAY;
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	22 e1       	ldi	r18, 0x12	; 18
    22e2:	fc 01       	movw	r30, r24
    22e4:	20 83       	st	Z, r18
    22e6:	05 c0       	rjmp	.+10     	; 0x22f2 <nwkTxFrame+0x48>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	22 e1       	ldi	r18, 0x12	; 18
    22ee:	fc 01       	movw	r30, r24
    22f0:	20 83       	st	Z, r18
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	8d 57       	subi	r24, 0x7D	; 125
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	fc 01       	movw	r30, r24
    22fc:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	8a 57       	subi	r24, 0x7A	; 122
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	fc 01       	movw	r30, r24
    2308:	80 81       	ld	r24, Z
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	81 70       	andi	r24, 0x01	; 1
    2310:	99 27       	eor	r25, r25
    2312:	89 2b       	or	r24, r25
    2314:	41 f0       	breq	.+16     	; 0x2326 <nwkTxFrame+0x7c>
    header->macDstPanId = NWK_BROADCAST_PANID;
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	2f ef       	ldi	r18, 0xFF	; 255
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	fc 01       	movw	r30, r24
    2320:	34 83       	std	Z+4, r19	; 0x04
    2322:	23 83       	std	Z+3, r18	; 0x03
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <nwkTxFrame+0x8e>
  else
    header->macDstPanId = nwkIb.panId;
    2326:	20 91 e9 19 	lds	r18, 0x19E9	; 0x8019e9 <nwkIb+0x2>
    232a:	30 91 ea 19 	lds	r19, 0x19EA	; 0x8019ea <nwkIb+0x3>
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	fc 01       	movw	r30, r24
    2334:	34 83       	std	Z+4, r19	; 0x04
    2336:	23 83       	std	Z+3, r18	; 0x03

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	8a 57       	subi	r24, 0x7A	; 122
    233e:	9f 4f       	sbci	r25, 0xFF	; 255
    2340:	fc 01       	movw	r30, r24
    2342:	80 81       	ld	r24, Z
    2344:	88 2f       	mov	r24, r24
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	84 70       	andi	r24, 0x04	; 4
    234a:	99 27       	eor	r25, r25
    234c:	89 2b       	or	r24, r25
    234e:	81 f4       	brne	.+32     	; 0x2370 <nwkTxFrame+0xc6>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	8a 57       	subi	r24, 0x7A	; 122
    2356:	9f 4f       	sbci	r25, 0xFF	; 255
    2358:	fc 01       	movw	r30, r24
    235a:	80 81       	ld	r24, Z
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	81 70       	andi	r24, 0x01	; 1
    2362:	99 27       	eor	r25, r25
    header->macDstPanId = NWK_BROADCAST_PANID;
  else
    header->macDstPanId = nwkIb.panId;

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    2364:	89 2b       	or	r24, r25
    2366:	21 f4       	brne	.+8      	; 0x2370 <nwkTxFrame+0xc6>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	4a d9       	rcall	.-3436   	; 0x1602 <nwkRoutePrepareTx>
    236e:	0a c0       	rjmp	.+20     	; 0x2384 <nwkTxFrame+0xda>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	fc 01       	movw	r30, r24
    2376:	25 85       	ldd	r18, Z+13	; 0x0d
    2378:	36 85       	ldd	r19, Z+14	; 0x0e
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	fc 01       	movw	r30, r24
    2380:	36 83       	std	Z+6, r19	; 0x06
    2382:	25 83       	std	Z+5, r18	; 0x05

  header->macSrcAddr = nwkIb.addr;
    2384:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    2388:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	fc 01       	movw	r30, r24
    2392:	30 87       	std	Z+8, r19	; 0x08
    2394:	27 83       	std	Z+7, r18	; 0x07
  header->macSeq = ++nwkIb.macSeqNum;
    2396:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <nwkIb+0x5>
    239a:	8f 5f       	subi	r24, 0xFF	; 255
    239c:	80 93 ec 19 	sts	0x19EC, r24	; 0x8019ec <nwkIb+0x5>
    23a0:	20 91 ec 19 	lds	r18, 0x19EC	; 0x8019ec <nwkIb+0x5>
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	fc 01       	movw	r30, r24
    23aa:	22 83       	std	Z+2, r18	; 0x02

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	fc 01       	movw	r30, r24
    23b2:	85 81       	ldd	r24, Z+5	; 0x05
    23b4:	96 81       	ldd	r25, Z+6	; 0x06
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	a1 f4       	brne	.+40     	; 0x23e2 <nwkTxFrame+0x138>
  {
    header->macFcf = 0x8841;
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	21 e4       	ldi	r18, 0x41	; 65
    23c0:	38 e8       	ldi	r19, 0x88	; 136
    23c2:	fc 01       	movw	r30, r24
    23c4:	31 83       	std	Z+1, r19	; 0x01
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    23c6:	20 83       	st	Z, r18
    23c8:	91 d7       	rcall	.+3874   	; 0x32ec <rand>
    23ca:	87 70       	andi	r24, 0x07	; 7
    23cc:	99 27       	eor	r25, r25
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	9c 01       	movw	r18, r24
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	8c 57       	subi	r24, 0x7C	; 124
    23d8:	9f 4f       	sbci	r25, 0xFF	; 255
    23da:	fc 01       	movw	r30, r24
    23dc:	31 83       	std	Z+1, r19	; 0x01
    23de:	20 83       	st	Z, r18
  else
  {
    header->macFcf = 0x8861;
    frame->tx.timeout = 0;
  }
}
    23e0:	0e c0       	rjmp	.+28     	; 0x23fe <nwkTxFrame+0x154>
    header->macFcf = 0x8841;
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
  }
  else
  {
    header->macFcf = 0x8861;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	21 e6       	ldi	r18, 0x61	; 97
    23e8:	38 e8       	ldi	r19, 0x88	; 136
    23ea:	fc 01       	movw	r30, r24
    23ec:	31 83       	std	Z+1, r19	; 0x01
    23ee:	20 83       	st	Z, r18
    frame->tx.timeout = 0;
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	8c 57       	subi	r24, 0x7C	; 124
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	fc 01       	movw	r30, r24
    23fa:	11 82       	std	Z+1, r1	; 0x01
    23fc:	10 82       	st	Z, r1
  }
}
    23fe:	00 00       	nop
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	00 d0       	rcall	.+0      	; 0x2414 <nwkTxBroadcastFrame+0x6>
    2414:	1f 92       	push	r1
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9c 83       	std	Y+4, r25	; 0x04
    241c:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    241e:	0e 94 83 07 	call	0xf06	; 0xf06 <nwkFrameAlloc>
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	89 2b       	or	r24, r25
    242c:	09 f4       	brne	.+2      	; 0x2430 <nwkTxBroadcastFrame+0x22>
    242e:	63 c0       	rjmp	.+198    	; 0x24f6 <nwkTxBroadcastFrame+0xe8>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	9a 81       	ldd	r25, Y+2	; 0x02
    2434:	22 e1       	ldi	r18, 0x12	; 18
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
  newFrame->size = frame->size;
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	fc 01       	movw	r30, r24
    2440:	21 81       	ldd	r18, Z+1	; 0x01
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	fc 01       	movw	r30, r24
    2448:	21 83       	std	Z+1, r18	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	8d 57       	subi	r24, 0x7D	; 125
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	fc 01       	movw	r30, r24
    2454:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2456:	4a d7       	rcall	.+3732   	; 0x32ec <rand>
    2458:	87 70       	andi	r24, 0x07	; 7
    245a:	99 27       	eor	r25, r25
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	9c 01       	movw	r18, r24
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	8c 57       	subi	r24, 0x7C	; 124
    2466:	9f 4f       	sbci	r25, 0xFF	; 255
    2468:	fc 01       	movw	r30, r24
    246a:	31 83       	std	Z+1, r19	; 0x01
    246c:	20 83       	st	Z, r18
  newFrame->tx.confirm = NULL;
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	89 57       	subi	r24, 0x79	; 121
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	fc 01       	movw	r30, r24
    2478:	11 82       	std	Z+1, r1	; 0x01
    247a:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	fc 01       	movw	r30, r24
    2482:	81 81       	ldd	r24, Z+1	; 0x01
    2484:	48 2f       	mov	r20, r24
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	9c 01       	movw	r18, r24
    248e:	2e 5f       	subi	r18, 0xFE	; 254
    2490:	3f 4f       	sbci	r19, 0xFF	; 255
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	02 96       	adiw	r24, 0x02	; 2
    2498:	b9 01       	movw	r22, r18
    249a:	36 d7       	rcall	.+3692   	; 0x3308 <memcpy>

  newFrame->header.macFcf = 0x8841;
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	21 e4       	ldi	r18, 0x41	; 65
    24a2:	38 e8       	ldi	r19, 0x88	; 136
    24a4:	fc 01       	movw	r30, r24
    24a6:	33 83       	std	Z+3, r19	; 0x03
    24a8:	22 83       	std	Z+2, r18	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	2f ef       	ldi	r18, 0xFF	; 255
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	fc 01       	movw	r30, r24
    24b4:	30 87       	std	Z+8, r19	; 0x08
    24b6:	27 83       	std	Z+7, r18	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	fc 01       	movw	r30, r24
    24be:	25 81       	ldd	r18, Z+5	; 0x05
    24c0:	36 81       	ldd	r19, Z+6	; 0x06
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	fc 01       	movw	r30, r24
    24c8:	36 83       	std	Z+6, r19	; 0x06
    24ca:	25 83       	std	Z+5, r18	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    24cc:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    24d0:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	fc 01       	movw	r30, r24
    24da:	32 87       	std	Z+10, r19	; 0x0a
    24dc:	21 87       	std	Z+9, r18	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    24de:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <nwkIb+0x5>
    24e2:	8f 5f       	subi	r24, 0xFF	; 255
    24e4:	80 93 ec 19 	sts	0x19EC, r24	; 0x8019ec <nwkIb+0x5>
    24e8:	20 91 ec 19 	lds	r18, 0x19EC	; 0x8019ec <nwkIb+0x5>
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	fc 01       	movw	r30, r24
    24f2:	24 83       	std	Z+4, r18	; 0x04
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <nwkTxBroadcastFrame+0xea>
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    return;
    24f6:	00 00       	nop
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	00 d0       	rcall	.+0      	; 0x250c <nwkTxAckReceived+0x6>
    250c:	00 d0       	rcall	.+0      	; 0x250e <nwkTxAckReceived+0x8>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	fc 01       	movw	r30, r24
    251c:	87 81       	ldd	r24, Z+7	; 0x07
    251e:	90 85       	ldd	r25, Z+8	; 0x08
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame = NULL;
    2524:	1a 82       	std	Y+2, r1	; 0x02
    2526:	19 82       	std	Y+1, r1	; 0x01

  if (sizeof(NwkCommandAck_t) != ind->size)
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	fc 01       	movw	r30, r24
    252e:	81 85       	ldd	r24, Z+9	; 0x09
    2530:	83 30       	cpi	r24, 0x03	; 3
    2532:	19 f1       	breq	.+70     	; 0x257a <nwkTxAckReceived+0x74>
    return false;
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	2c c0       	rjmp	.+88     	; 0x2590 <nwkTxAckReceived+0x8a>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	fc 01       	movw	r30, r24
    253e:	80 81       	ld	r24, Z
    2540:	86 31       	cpi	r24, 0x16	; 22
    2542:	d9 f4       	brne	.+54     	; 0x257a <nwkTxAckReceived+0x74>
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	fc 01       	movw	r30, r24
    254a:	24 85       	ldd	r18, Z+12	; 0x0c
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	fc 01       	movw	r30, r24
    2552:	81 81       	ldd	r24, Z+1	; 0x01
    2554:	28 17       	cp	r18, r24
    2556:	89 f4       	brne	.+34     	; 0x257a <nwkTxAckReceived+0x74>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	27 e1       	ldi	r18, 0x17	; 23
    255e:	fc 01       	movw	r30, r24
    2560:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	fc 01       	movw	r30, r24
    2568:	22 81       	ldd	r18, Z+2	; 0x02
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	8a 57       	subi	r24, 0x7A	; 122
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	fc 01       	movw	r30, r24
    2574:	20 83       	st	Z, r18
      return true;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	0b c0       	rjmp	.+22     	; 0x2590 <nwkTxAckReceived+0x8a>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	0e 94 13 08 	call	0x1026	; 0x1026 <nwkFrameNext>
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	9a 81       	ldd	r25, Y+2	; 0x02
    258a:	89 2b       	or	r24, r25
    258c:	a9 f6       	brne	.-86     	; 0x2538 <nwkTxAckReceived+0x32>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    258e:	80 e0       	ldi	r24, 0x00	; 0
}
    2590:	26 96       	adiw	r28, 0x06	; 6
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	08 95       	ret

000025a2 <nwkTxAckWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <nwkTxAckWaitTimerHandler+0x6>
    25a8:	1f 92       	push	r1
    25aa:	1f 92       	push	r1
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9d 83       	std	Y+5, r25	; 0x05
    25b2:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame = NULL;
    25b4:	1a 82       	std	Y+2, r1	; 0x02
    25b6:	19 82       	std	Y+1, r1	; 0x01
  bool restart = false;
    25b8:	1b 82       	std	Y+3, r1	; 0x03

  while (NULL != (frame = nwkFrameNext(frame)))
    25ba:	26 c0       	rjmp	.+76     	; 0x2608 <nwkTxAckWaitTimerHandler+0x66>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	fc 01       	movw	r30, r24
    25c2:	80 81       	ld	r24, Z
    25c4:	86 31       	cpi	r24, 0x16	; 22
    25c6:	01 f5       	brne	.+64     	; 0x2608 <nwkTxAckWaitTimerHandler+0x66>
    {
      restart = true;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	8b 83       	std	Y+3, r24	; 0x03

      if (0 == --frame->tx.timeout)
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	8c 57       	subi	r24, 0x7C	; 124
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	fc 01       	movw	r30, r24
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	9c 01       	movw	r18, r24
    25dc:	21 50       	subi	r18, 0x01	; 1
    25de:	31 09       	sbc	r19, r1
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	8c 57       	subi	r24, 0x7C	; 124
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	fc 01       	movw	r30, r24
    25ea:	31 83       	std	Z+1, r19	; 0x01
    25ec:	20 83       	st	Z, r18
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	8c 57       	subi	r24, 0x7C	; 124
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	fc 01       	movw	r30, r24
    25f8:	80 81       	ld	r24, Z
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	89 2b       	or	r24, r25
    25fe:	21 f4       	brne	.+8      	; 0x2608 <nwkTxAckWaitTimerHandler+0x66>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	60 e1       	ldi	r22, 0x10	; 16
    2606:	19 d0       	rcall	.+50     	; 0x263a <nwkTxConfirm>
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	0e 94 13 08 	call	0x1026	; 0x1026 <nwkFrameNext>
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	89 2b       	or	r24, r25
    261a:	81 f6       	brne	.-96     	; 0x25bc <nwkTxAckWaitTimerHandler+0x1a>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	88 23       	and	r24, r24
    2620:	19 f0       	breq	.+6      	; 0x2628 <nwkTxAckWaitTimerHandler+0x86>
    SYS_TimerStart(timer);
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	a5 d3       	rcall	.+1866   	; 0x2d72 <SYS_TimerStart>
}
    2628:	00 00       	nop
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	08 95       	ret

0000263a <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	00 d0       	rcall	.+0      	; 0x2640 <nwkTxConfirm+0x6>
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	6b 83       	std	Y+3, r22	; 0x03
  frame->state = NWK_TX_STATE_CONFIRM;
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	27 e1       	ldi	r18, 0x17	; 23
    2650:	fc 01       	movw	r30, r24
    2652:	20 83       	st	Z, r18
  frame->tx.status = status;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	8d 57       	subi	r24, 0x7D	; 125
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	2b 81       	ldd	r18, Y+3	; 0x03
    265e:	fc 01       	movw	r30, r24
    2660:	20 83       	st	Z, r18
}
    2662:	00 00       	nop
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	08 95       	ret

00002670 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	00 d0       	rcall	.+0      	; 0x2676 <nwkTxDelayTimerHandler+0x6>
    2676:	1f 92       	push	r1
    2678:	1f 92       	push	r1
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	9d 83       	std	Y+5, r25	; 0x05
    2680:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame = NULL;
    2682:	1a 82       	std	Y+2, r1	; 0x02
    2684:	19 82       	std	Y+1, r1	; 0x01
  bool restart = false;
    2686:	1b 82       	std	Y+3, r1	; 0x03

  while (NULL != (frame = nwkFrameNext(frame)))
    2688:	27 c0       	rjmp	.+78     	; 0x26d8 <nwkTxDelayTimerHandler+0x68>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	fc 01       	movw	r30, r24
    2690:	80 81       	ld	r24, Z
    2692:	81 31       	cpi	r24, 0x11	; 17
    2694:	09 f5       	brne	.+66     	; 0x26d8 <nwkTxDelayTimerHandler+0x68>
    {
      restart = true;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	8b 83       	std	Y+3, r24	; 0x03

      if (0 == --frame->tx.timeout)
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	8c 57       	subi	r24, 0x7C	; 124
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	fc 01       	movw	r30, r24
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	9c 01       	movw	r18, r24
    26aa:	21 50       	subi	r18, 0x01	; 1
    26ac:	31 09       	sbc	r19, r1
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	8c 57       	subi	r24, 0x7C	; 124
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	fc 01       	movw	r30, r24
    26b8:	31 83       	std	Z+1, r19	; 0x01
    26ba:	20 83       	st	Z, r18
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	8c 57       	subi	r24, 0x7C	; 124
    26c2:	9f 4f       	sbci	r25, 0xFF	; 255
    26c4:	fc 01       	movw	r30, r24
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	89 2b       	or	r24, r25
    26cc:	29 f4       	brne	.+10     	; 0x26d8 <nwkTxDelayTimerHandler+0x68>
        frame->state = NWK_TX_STATE_SEND;
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	23 e1       	ldi	r18, 0x13	; 19
    26d4:	fc 01       	movw	r30, r24
    26d6:	20 83       	st	Z, r18
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	0e 94 13 08 	call	0x1026	; 0x1026 <nwkFrameNext>
    26e0:	9a 83       	std	Y+2, r25	; 0x02
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	89 2b       	or	r24, r25
    26ea:	79 f6       	brne	.-98     	; 0x268a <nwkTxDelayTimerHandler+0x1a>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	88 23       	and	r24, r24
    26f0:	19 f0       	breq	.+6      	; 0x26f8 <nwkTxDelayTimerHandler+0x88>
    SYS_TimerStart(timer);
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	3d d3       	rcall	.+1658   	; 0x2d72 <SYS_TimerStart>
}
    26f8:	00 00       	nop
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	08 95       	ret

0000270a <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	1f 92       	push	r1
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	89 83       	std	Y+1, r24	; 0x01
  switch (status)
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	91 05       	cpc	r25, r1
    2720:	39 f0       	breq	.+14     	; 0x2730 <nwkTxConvertPhyStatus+0x26>
    2722:	82 30       	cpi	r24, 0x02	; 2
    2724:	91 05       	cpc	r25, r1
    2726:	31 f0       	breq	.+12     	; 0x2734 <nwkTxConvertPhyStatus+0x2a>
    2728:	89 2b       	or	r24, r25
    272a:	31 f4       	brne	.+12     	; 0x2738 <nwkTxConvertPhyStatus+0x2e>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	05 c0       	rjmp	.+10     	; 0x273a <nwkTxConvertPhyStatus+0x30>

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2730:	80 e2       	ldi	r24, 0x20	; 32
    2732:	03 c0       	rjmp	.+6      	; 0x273a <nwkTxConvertPhyStatus+0x30>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    2734:	81 e2       	ldi	r24, 0x21	; 33
    2736:	01 c0       	rjmp	.+2      	; 0x273a <nwkTxConvertPhyStatus+0x30>

    default:
      return NWK_ERROR_STATUS;
    2738:	81 e0       	ldi	r24, 0x01	; 1
  }
}
    273a:	0f 90       	pop	r0
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	08 95       	ret

00002742 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	1f 92       	push	r1
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	89 83       	std	Y+1, r24	; 0x01
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2752:	00 91 44 19 	lds	r16, 0x1944	; 0x801944 <nwkTxPhyActiveFrame>
    2756:	10 91 45 19 	lds	r17, 0x1945	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	d6 df       	rcall	.-84     	; 0x270a <nwkTxConvertPhyStatus>
    275e:	28 2f       	mov	r18, r24
    2760:	c8 01       	movw	r24, r16
    2762:	8d 57       	subi	r24, 0x7D	; 125
    2764:	9f 4f       	sbci	r25, 0xFF	; 255
    2766:	fc 01       	movw	r30, r24
    2768:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    276a:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <nwkTxPhyActiveFrame>
    276e:	90 91 45 19 	lds	r25, 0x1945	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    2772:	25 e1       	ldi	r18, 0x15	; 21
    2774:	fc 01       	movw	r30, r24
    2776:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame = NULL;
    2778:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    277c:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    2780:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
    2784:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
    278e:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
}
    2792:	00 00       	nop
    2794:	0f 90       	pop	r0
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	1f 92       	push	r1
    27a6:	1f 92       	push	r1
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
  NwkFrame_t *frame = NULL;
    27ac:	1a 82       	std	Y+2, r1	; 0x02
    27ae:	19 82       	std	Y+1, r1	; 0x01

  while (NULL != (frame = nwkFrameNext(frame)))
    27b0:	b4 c0       	rjmp	.+360    	; 0x291a <nwkTxTaskHandler+0x17a>
  {
    switch (frame->state)
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	fc 01       	movw	r30, r24
    27b8:	80 81       	ld	r24, Z
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	84 31       	cpi	r24, 0x14	; 20
    27c0:	91 05       	cpc	r25, r1
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <nwkTxTaskHandler+0x26>
    27c4:	aa c0       	rjmp	.+340    	; 0x291a <nwkTxTaskHandler+0x17a>
    27c6:	85 31       	cpi	r24, 0x15	; 21
    27c8:	91 05       	cpc	r25, r1
    27ca:	34 f4       	brge	.+12     	; 0x27d8 <nwkTxTaskHandler+0x38>
    27cc:	82 31       	cpi	r24, 0x12	; 18
    27ce:	91 05       	cpc	r25, r1
    27d0:	79 f0       	breq	.+30     	; 0x27f0 <nwkTxTaskHandler+0x50>
    27d2:	43 97       	sbiw	r24, 0x13	; 19
    27d4:	29 f1       	breq	.+74     	; 0x2820 <nwkTxTaskHandler+0x80>
    27d6:	a0 c0       	rjmp	.+320    	; 0x2918 <nwkTxTaskHandler+0x178>
    27d8:	86 31       	cpi	r24, 0x16	; 22
    27da:	91 05       	cpc	r25, r1
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <nwkTxTaskHandler+0x40>
    27de:	9d c0       	rjmp	.+314    	; 0x291a <nwkTxTaskHandler+0x17a>
    27e0:	86 31       	cpi	r24, 0x16	; 22
    27e2:	91 05       	cpc	r25, r1
    27e4:	0c f4       	brge	.+2      	; 0x27e8 <nwkTxTaskHandler+0x48>
    27e6:	41 c0       	rjmp	.+130    	; 0x286a <nwkTxTaskHandler+0xca>
    27e8:	47 97       	sbiw	r24, 0x17	; 23
    27ea:	09 f4       	brne	.+2      	; 0x27ee <nwkTxTaskHandler+0x4e>
    27ec:	77 c0       	rjmp	.+238    	; 0x28dc <nwkTxTaskHandler+0x13c>
    27ee:	94 c0       	rjmp	.+296    	; 0x2918 <nwkTxTaskHandler+0x178>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	8c 57       	subi	r24, 0x7C	; 124
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	fc 01       	movw	r30, r24
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	89 2b       	or	r24, r25
    2800:	49 f0       	breq	.+18     	; 0x2814 <nwkTxTaskHandler+0x74>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	21 e1       	ldi	r18, 0x11	; 17
    2808:	fc 01       	movw	r30, r24
    280a:	20 83       	st	Z, r18
          SYS_TimerStart(&nwkTxDelayTimer);
    280c:	83 e5       	ldi	r24, 0x53	; 83
    280e:	99 e1       	ldi	r25, 0x19	; 25
    2810:	b0 d2       	rcall	.+1376   	; 0x2d72 <SYS_TimerStart>
    2812:	83 c0       	rjmp	.+262    	; 0x291a <nwkTxTaskHandler+0x17a>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	23 e1       	ldi	r18, 0x13	; 19
    281a:	fc 01       	movw	r30, r24
    281c:	20 83       	st	Z, r18
        }
      } break;
    281e:	7d c0       	rjmp	.+250    	; 0x291a <nwkTxTaskHandler+0x17a>

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    2820:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <nwkTxPhyActiveFrame>
    2824:	90 91 45 19 	lds	r25, 0x1945	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    2828:	89 2b       	or	r24, r25
    282a:	09 f0       	breq	.+2      	; 0x282e <nwkTxTaskHandler+0x8e>
    282c:	76 c0       	rjmp	.+236    	; 0x291a <nwkTxTaskHandler+0x17a>
        {
          nwkTxPhyActiveFrame = frame;
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	90 93 45 19 	sts	0x1945, r25	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    2836:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	24 e1       	ldi	r18, 0x14	; 20
    2840:	fc 01       	movw	r30, r24
    2842:	20 83       	st	Z, r18
          PHY_DataReq(frame->data, frame->size);
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	fc 01       	movw	r30, r24
    284a:	21 81       	ldd	r18, Z+1	; 0x01
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	02 96       	adiw	r24, 0x02	; 2
    2852:	62 2f       	mov	r22, r18
    2854:	0c d1       	rcall	.+536    	; 0x2a6e <PHY_DataReq>
          nwkIb.lock++;
    2856:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
    285a:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
    2864:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
        }
      } break;
    2868:	58 c0       	rjmp	.+176    	; 0x291a <nwkTxTaskHandler+0x17a>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	8d 57       	subi	r24, 0x7D	; 125
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	fc 01       	movw	r30, r24
    2874:	80 81       	ld	r24, Z
    2876:	88 23       	and	r24, r24
    2878:	59 f5       	brne	.+86     	; 0x28d0 <nwkTxTaskHandler+0x130>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	fc 01       	movw	r30, r24
    2880:	25 85       	ldd	r18, Z+13	; 0x0d
    2882:	36 85       	ldd	r19, Z+14	; 0x0e
    2884:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <nwkIb>
    2888:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    288c:	28 17       	cp	r18, r24
    288e:	39 07       	cpc	r19, r25
    2890:	c9 f4       	brne	.+50     	; 0x28c4 <nwkTxTaskHandler+0x124>
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	fc 01       	movw	r30, r24
    2898:	83 85       	ldd	r24, Z+11	; 0x0b
    289a:	81 70       	andi	r24, 0x01	; 1
    289c:	88 23       	and	r24, r24
    289e:	91 f0       	breq	.+36     	; 0x28c4 <nwkTxTaskHandler+0x124>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	26 e1       	ldi	r18, 0x16	; 22
    28a6:	fc 01       	movw	r30, r24
    28a8:	20 83       	st	Z, r18
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	8c 57       	subi	r24, 0x7C	; 124
    28b0:	9f 4f       	sbci	r25, 0xFF	; 255
    28b2:	29 e2       	ldi	r18, 0x29	; 41
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	fc 01       	movw	r30, r24
    28b8:	31 83       	std	Z+1, r19	; 0x01
    28ba:	20 83       	st	Z, r18
            SYS_TimerStart(&nwkTxAckWaitTimer);
    28bc:	86 e4       	ldi	r24, 0x46	; 70
    28be:	99 e1       	ldi	r25, 0x19	; 25
    28c0:	58 d2       	rcall	.+1200   	; 0x2d72 <SYS_TimerStart>
    28c2:	0b c0       	rjmp	.+22     	; 0x28da <nwkTxTaskHandler+0x13a>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	27 e1       	ldi	r18, 0x17	; 23
    28ca:	fc 01       	movw	r30, r24
    28cc:	20 83       	st	Z, r18
    28ce:	25 c0       	rjmp	.+74     	; 0x291a <nwkTxTaskHandler+0x17a>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	27 e1       	ldi	r18, 0x17	; 23
    28d6:	fc 01       	movw	r30, r24
    28d8:	20 83       	st	Z, r18
	}
      } break;
    28da:	1f c0       	rjmp	.+62     	; 0x291a <nwkTxTaskHandler+0x17a>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	0e 94 88 0a 	call	0x1510	; 0x1510 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	89 57       	subi	r24, 0x79	; 121
    28ea:	9f 4f       	sbci	r25, 0xFF	; 255
    28ec:	fc 01       	movw	r30, r24
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	89 2b       	or	r24, r25
    28f4:	29 f4       	brne	.+10     	; 0x2900 <nwkTxTaskHandler+0x160>
          nwkFrameFree(frame);
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	0e 94 f8 07 	call	0xff0	; 0xff0 <nwkFrameFree>
    28fe:	0d c0       	rjmp	.+26     	; 0x291a <nwkTxTaskHandler+0x17a>
        else
          frame->tx.confirm(frame);
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	89 57       	subi	r24, 0x79	; 121
    2906:	9f 4f       	sbci	r25, 0xFF	; 255
    2908:	fc 01       	movw	r30, r24
    290a:	20 81       	ld	r18, Z
    290c:	31 81       	ldd	r19, Z+1	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	f9 01       	movw	r30, r18
    2914:	19 95       	eicall
      } break;
    2916:	01 c0       	rjmp	.+2      	; 0x291a <nwkTxTaskHandler+0x17a>

      default:
        break;
    2918:	00 00       	nop
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	0e 94 13 08 	call	0x1026	; 0x1026 <nwkFrameNext>
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	89 2b       	or	r24, r25
    292c:	09 f0       	breq	.+2      	; 0x2930 <nwkTxTaskHandler+0x190>
    292e:	41 cf       	rjmp	.-382    	; 0x27b2 <nwkTxTaskHandler+0x12>

      default:
        break;
    };
  }
}
    2930:	00 00       	nop
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	08 95       	ret

0000293c <PHY_Init>:
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
}
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	89 e3       	ldi	r24, 0x39	; 57
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	fc 01       	movw	r30, r24
    294a:	20 81       	ld	r18, Z
    294c:	21 60       	ori	r18, 0x01	; 1
    294e:	fc 01       	movw	r30, r24
    2950:	20 83       	st	Z, r18
    2952:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <phyRxState>
    2956:	10 92 e3 19 	sts	0x19E3, r1	; 0x8019e3 <phyBand>
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <phyState>
    2960:	88 e0       	ldi	r24, 0x08	; 8
    2962:	05 d1       	rcall	.+522    	; 0x2b6e <phyTrxSetState>
    2964:	86 e5       	ldi	r24, 0x56	; 86
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	2b ee       	ldi	r18, 0xEB	; 235
    296a:	fc 01       	movw	r30, r24
    296c:	20 83       	st	Z, r18
    296e:	8c e4       	ldi	r24, 0x4C	; 76
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	fc 01       	movw	r30, r24
    2974:	20 81       	ld	r18, Z
    2976:	20 68       	ori	r18, 0x80	; 128
    2978:	fc 01       	movw	r30, r24
    297a:	20 83       	st	Z, r18
    297c:	00 00       	nop
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	08 95       	ret

00002984 <PHY_SetRxState>:
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	1f 92       	push	r1
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	80 93 e1 19 	sts	0x19E1, r24	; 0x8019e1 <phyRxState>
    2996:	d6 d0       	rcall	.+428    	; 0x2b44 <phySetRxState>
    2998:	00 00       	nop
    299a:	0f 90       	pop	r0
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	08 95       	ret

000029a2 <PHY_SetChannel>:
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	1f 92       	push	r1
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	80 93 e2 19 	sts	0x19E2, r24	; 0x8019e2 <phyChannel>
    29b4:	9c d0       	rcall	.+312    	; 0x2aee <phySetChannel>
    29b6:	00 00       	nop
    29b8:	0f 90       	pop	r0
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <PHY_SetPanId>:
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <PHY_SetPanId+0x6>
    29c6:	1f 92       	push	r1
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	ce 01       	movw	r24, r28
    29d2:	03 96       	adiw	r24, 0x03	; 3
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	82 e6       	ldi	r24, 0x62	; 98
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	29 81       	ldd	r18, Y+1	; 0x01
    29de:	3a 81       	ldd	r19, Y+2	; 0x02
    29e0:	f9 01       	movw	r30, r18
    29e2:	20 81       	ld	r18, Z
    29e4:	fc 01       	movw	r30, r24
    29e6:	20 83       	st	Z, r18
    29e8:	83 e6       	ldi	r24, 0x63	; 99
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	29 81       	ldd	r18, Y+1	; 0x01
    29ee:	3a 81       	ldd	r19, Y+2	; 0x02
    29f0:	f9 01       	movw	r30, r18
    29f2:	21 81       	ldd	r18, Z+1	; 0x01
    29f4:	fc 01       	movw	r30, r24
    29f6:	20 83       	st	Z, r18
    29f8:	00 00       	nop
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	08 95       	ret

00002a08 <PHY_SetShortAddr>:
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <PHY_SetShortAddr+0x6>
    2a0e:	1f 92       	push	r1
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	ce 01       	movw	r24, r28
    2a1a:	03 96       	adiw	r24, 0x03	; 3
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	80 e6       	ldi	r24, 0x60	; 96
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	29 81       	ldd	r18, Y+1	; 0x01
    2a26:	3a 81       	ldd	r19, Y+2	; 0x02
    2a28:	f9 01       	movw	r30, r18
    2a2a:	20 81       	ld	r18, Z
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 83       	st	Z, r18
    2a30:	81 e6       	ldi	r24, 0x61	; 97
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	29 81       	ldd	r18, Y+1	; 0x01
    2a36:	3a 81       	ldd	r19, Y+2	; 0x02
    2a38:	f9 01       	movw	r30, r18
    2a3a:	21 81       	ldd	r18, Z+1	; 0x01
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	20 83       	st	Z, r18
    2a40:	8d e6       	ldi	r24, 0x6D	; 109
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	29 81       	ldd	r18, Y+1	; 0x01
    2a46:	3a 81       	ldd	r19, Y+2	; 0x02
    2a48:	f9 01       	movw	r30, r18
    2a4a:	40 81       	ld	r20, Z
    2a4c:	29 81       	ldd	r18, Y+1	; 0x01
    2a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a50:	2f 5f       	subi	r18, 0xFF	; 255
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
    2a54:	f9 01       	movw	r30, r18
    2a56:	20 81       	ld	r18, Z
    2a58:	24 0f       	add	r18, r20
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	20 83       	st	Z, r18
    2a5e:	00 00       	nop
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	08 95       	ret

00002a6e <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <PHY_DataReq+0x6>
    2a74:	1f 92       	push	r1
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	9b 83       	std	Y+3, r25	; 0x03
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
    2a7e:	6c 83       	std	Y+4, r22	; 0x04
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2a80:	89 e1       	ldi	r24, 0x19	; 25
    2a82:	75 d0       	rcall	.+234    	; 0x2b6e <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2a84:	8f e4       	ldi	r24, 0x4F	; 79
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	2f ef       	ldi	r18, 0xFF	; 255
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	20 83       	st	Z, r18

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    2a8e:	80 e8       	ldi	r24, 0x80	; 128
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	2c 81       	ldd	r18, Y+4	; 0x04
    2a94:	2e 5f       	subi	r18, 0xFE	; 254
    2a96:	fc 01       	movw	r30, r24
    2a98:	20 83       	st	Z, r18
  for (uint8_t i = 0; i < size; i++)
    2a9a:	19 82       	std	Y+1, r1	; 0x01
    2a9c:	14 c0       	rjmp	.+40     	; 0x2ac6 <PHY_DataReq+0x58>
    TRX_FRAME_BUFFER(i+1) = data[i];
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	88 2f       	mov	r24, r24
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	8f 57       	subi	r24, 0x7F	; 127
    2aa6:	9e 4f       	sbci	r25, 0xFE	; 254
    2aa8:	ac 01       	movw	r20, r24
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ab2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ab4:	82 0f       	add	r24, r18
    2ab6:	93 1f       	adc	r25, r19
    2ab8:	fc 01       	movw	r30, r24
    2aba:	80 81       	ld	r24, Z
    2abc:	fa 01       	movw	r30, r20
    2abe:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	8f 5f       	subi	r24, 0xFF	; 255
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	99 81       	ldd	r25, Y+1	; 0x01
    2ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aca:	98 17       	cp	r25, r24
    2acc:	40 f3       	brcs	.-48     	; 0x2a9e <PHY_DataReq+0x30>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    2ad4:	82 e4       	ldi	r24, 0x42	; 66
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	22 e0       	ldi	r18, 0x02	; 2
    2ada:	fc 01       	movw	r30, r24
    2adc:	20 83       	st	Z, r18
}
    2ade:	00 00       	nop
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <phySetChannel>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
  CC_CTRL_1_REG_s.ccBand = phyBand;
    2af6:	84 e5       	ldi	r24, 0x54	; 84
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	20 91 e3 19 	lds	r18, 0x19E3	; 0x8019e3 <phyBand>
    2afe:	2f 70       	andi	r18, 0x0F	; 15
    2b00:	2f 70       	andi	r18, 0x0F	; 15
    2b02:	fc 01       	movw	r30, r24
    2b04:	30 81       	ld	r19, Z
    2b06:	30 7f       	andi	r19, 0xF0	; 240
    2b08:	23 2b       	or	r18, r19
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	20 83       	st	Z, r18

  if (phyBand)
    2b0e:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <phyBand>
    2b12:	88 23       	and	r24, r24
    2b14:	39 f0       	breq	.+14     	; 0x2b24 <phySetChannel+0x36>
    CC_CTRL_0_REG = phyChannel;
    2b16:	83 e5       	ldi	r24, 0x53	; 83
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	20 91 e2 19 	lds	r18, 0x19E2	; 0x8019e2 <phyChannel>
    2b1e:	fc 01       	movw	r30, r24
    2b20:	20 83       	st	Z, r18
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
}
    2b22:	0c c0       	rjmp	.+24     	; 0x2b3c <phySetChannel+0x4e>
  CC_CTRL_1_REG_s.ccBand = phyBand;

  if (phyBand)
    CC_CTRL_0_REG = phyChannel;
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
    2b24:	88 e4       	ldi	r24, 0x48	; 72
    2b26:	91 e0       	ldi	r25, 0x01	; 1
    2b28:	20 91 e2 19 	lds	r18, 0x19E2	; 0x8019e2 <phyChannel>
    2b2c:	2f 71       	andi	r18, 0x1F	; 31
    2b2e:	2f 71       	andi	r18, 0x1F	; 31
    2b30:	fc 01       	movw	r30, r24
    2b32:	30 81       	ld	r19, Z
    2b34:	30 7e       	andi	r19, 0xE0	; 224
    2b36:	23 2b       	or	r18, r19
    2b38:	fc 01       	movw	r30, r24
    2b3a:	20 83       	st	Z, r18
}
    2b3c:	00 00       	nop
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	08 95       	ret

00002b44 <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
  phyTrxSetState(TRX_CMD_TRX_OFF);
    2b4c:	88 e0       	ldi	r24, 0x08	; 8
    2b4e:	0f d0       	rcall	.+30     	; 0x2b6e <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2b50:	8f e4       	ldi	r24, 0x4F	; 79
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	2f ef       	ldi	r18, 0xFF	; 255
    2b56:	fc 01       	movw	r30, r24
    2b58:	20 83       	st	Z, r18

  if (phyRxState)
    2b5a:	80 91 e1 19 	lds	r24, 0x19E1	; 0x8019e1 <phyRxState>
    2b5e:	88 23       	and	r24, r24
    2b60:	11 f0       	breq	.+4      	; 0x2b66 <phySetRxState+0x22>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    2b62:	86 e1       	ldi	r24, 0x16	; 22
    2b64:	04 d0       	rcall	.+8      	; 0x2b6e <phyTrxSetState>
}
    2b66:	00 00       	nop
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	1f 92       	push	r1
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	89 83       	std	Y+1, r24	; 0x01
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    2b7a:	82 e4       	ldi	r24, 0x42	; 66
    2b7c:	91 e0       	ldi	r25, 0x01	; 1
    2b7e:	23 e0       	ldi	r18, 0x03	; 3
    2b80:	fc 01       	movw	r30, r24
    2b82:	20 83       	st	Z, r18
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    2b84:	00 00       	nop
    2b86:	81 e4       	ldi	r24, 0x41	; 65
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8f 71       	andi	r24, 0x1F	; 31
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	c9 f7       	brne	.-14     	; 0x2b86 <phyTrxSetState+0x18>

  TRX_STATE_REG = state;
    2b94:	82 e4       	ldi	r24, 0x42	; 66
    2b96:	91 e0       	ldi	r25, 0x01	; 1
    2b98:	29 81       	ldd	r18, Y+1	; 0x01
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	20 83       	st	Z, r18
  while (state != TRX_STATUS_REG_s.trxStatus);
    2b9e:	00 00       	nop
    2ba0:	81 e4       	ldi	r24, 0x41	; 65
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8f 71       	andi	r24, 0x1F	; 31
    2baa:	98 2f       	mov	r25, r24
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	98 17       	cp	r25, r24
    2bb0:	b9 f7       	brne	.-18     	; 0x2ba0 <phyTrxSetState+0x32>
}
    2bb2:	00 00       	nop
    2bb4:	0f 90       	pop	r0
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	08 95       	ret

00002bbc <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	28 97       	sbiw	r28, 0x08	; 8
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
  if (PHY_STATE_SLEEP == phyState)
    2bd0:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyState>
    2bd4:	82 30       	cpi	r24, 0x02	; 2
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <PHY_TaskHandler+0x1e>
    2bd8:	9c c0       	rjmp	.+312    	; 0x2d12 <PHY_TaskHandler+0x156>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2bda:	8f e4       	ldi	r24, 0x4F	; 79
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	fc 01       	movw	r30, r24
    2be0:	80 81       	ld	r24, Z
    2be2:	83 fb       	bst	r24, 3
    2be4:	88 27       	eor	r24, r24
    2be6:	80 f9       	bld	r24, 0
    2be8:	88 23       	and	r24, r24
    2bea:	09 f4       	brne	.+2      	; 0x2bee <PHY_TaskHandler+0x32>
    2bec:	59 c0       	rjmp	.+178    	; 0x2ca0 <PHY_TaskHandler+0xe4>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    2bee:	8b e7       	ldi	r24, 0x7B	; 123
    2bf0:	91 e0       	ldi	r25, 0x01	; 1
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	80 81       	ld	r24, Z
    2bf6:	8b 83       	std	Y+3, r24	; 0x03

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2bf8:	19 82       	std	Y+1, r1	; 0x01
    2bfa:	11 c0       	rjmp	.+34     	; 0x2c1e <PHY_TaskHandler+0x62>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	29 81       	ldd	r18, Y+1	; 0x01
    2c04:	22 2f       	mov	r18, r18
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	20 58       	subi	r18, 0x80	; 128
    2c0a:	3e 4f       	sbci	r19, 0xFE	; 254
    2c0c:	f9 01       	movw	r30, r18
    2c0e:	20 81       	ld	r18, Z
    2c10:	8f 59       	subi	r24, 0x9F	; 159
    2c12:	96 4e       	sbci	r25, 0xE6	; 230
    2c14:	fc 01       	movw	r30, r24
    2c16:	20 83       	st	Z, r18
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	28 17       	cp	r18, r24
    2c2e:	39 07       	cpc	r19, r25
    2c30:	2c f3       	brlt	.-54     	; 0x2bfc <PHY_TaskHandler+0x40>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    2c32:	81 e6       	ldi	r24, 0x61	; 97
    2c34:	99 e1       	ldi	r25, 0x19	; 25
    2c36:	9d 83       	std	Y+5, r25	; 0x05
    2c38:	8c 83       	std	Y+4, r24	; 0x04
    ind.size = size - PHY_CRC_SIZE;
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	82 50       	subi	r24, 0x02	; 2
    2c3e:	8e 83       	std	Y+6, r24	; 0x06
    ind.lqi  = phyRxBuffer[size];
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	88 2f       	mov	r24, r24
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	8f 59       	subi	r24, 0x9F	; 159
    2c48:	96 4e       	sbci	r25, 0xE6	; 230
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	80 81       	ld	r24, Z
    2c4e:	8f 83       	std	Y+7, r24	; 0x07
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    2c50:	87 e4       	ldi	r24, 0x47	; 71
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	fc 01       	movw	r30, r24
    2c56:	80 81       	ld	r24, Z
    2c58:	8a 55       	subi	r24, 0x5A	; 90
    2c5a:	88 87       	std	Y+8, r24	; 0x08
    PHY_DataInd(&ind);
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	04 96       	adiw	r24, 0x04	; 4
    2c60:	0e 94 b6 0c 	call	0x196c	; 0x196c <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    2c64:	00 00       	nop
    2c66:	81 e4       	ldi	r24, 0x41	; 65
    2c68:	91 e0       	ldi	r25, 0x01	; 1
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	80 81       	ld	r24, Z
    2c6e:	8f 71       	andi	r24, 0x1F	; 31
    2c70:	86 31       	cpi	r24, 0x16	; 22
    2c72:	c9 f7       	brne	.-14     	; 0x2c66 <PHY_TaskHandler+0xaa>

    IRQ_STATUS_REG_s.rxEnd = 1;
    2c74:	8f e4       	ldi	r24, 0x4F	; 79
    2c76:	91 e0       	ldi	r25, 0x01	; 1
    2c78:	fc 01       	movw	r30, r24
    2c7a:	20 81       	ld	r18, Z
    2c7c:	28 60       	ori	r18, 0x08	; 8
    2c7e:	fc 01       	movw	r30, r24
    2c80:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    2c82:	8c e4       	ldi	r24, 0x4C	; 76
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	fc 01       	movw	r30, r24
    2c88:	20 81       	ld	r18, Z
    2c8a:	2f 77       	andi	r18, 0x7F	; 127
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    2c90:	8c e4       	ldi	r24, 0x4C	; 76
    2c92:	91 e0       	ldi	r25, 0x01	; 1
    2c94:	fc 01       	movw	r30, r24
    2c96:	20 81       	ld	r18, Z
    2c98:	20 68       	ori	r18, 0x80	; 128
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	20 83       	st	Z, r18
    2c9e:	3a c0       	rjmp	.+116    	; 0x2d14 <PHY_TaskHandler+0x158>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    2ca0:	8f e4       	ldi	r24, 0x4F	; 79
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	80 81       	ld	r24, Z
    2ca8:	86 fb       	bst	r24, 6
    2caa:	88 27       	eor	r24, r24
    2cac:	80 f9       	bld	r24, 0
    2cae:	88 23       	and	r24, r24
    2cb0:	89 f1       	breq	.+98     	; 0x2d14 <PHY_TaskHandler+0x158>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    2cb2:	81 e4       	ldi	r24, 0x41	; 65
    2cb4:	91 e0       	ldi	r25, 0x01	; 1
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	80 81       	ld	r24, Z
    2cba:	8f 71       	andi	r24, 0x1F	; 31
    2cbc:	89 31       	cpi	r24, 0x19	; 25
    2cbe:	09 f5       	brne	.+66     	; 0x2d02 <PHY_TaskHandler+0x146>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    2cc0:	82 e4       	ldi	r24, 0x42	; 66
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	80 81       	ld	r24, Z
    2cc8:	82 95       	swap	r24
    2cca:	86 95       	lsr	r24
    2ccc:	87 70       	andi	r24, 0x07	; 7
    2cce:	8a 83       	std	Y+2, r24	; 0x02

      if (TRAC_STATUS_SUCCESS == status)
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	88 23       	and	r24, r24
    2cd4:	11 f4       	brne	.+4      	; 0x2cda <PHY_TaskHandler+0x11e>
        status = PHY_STATUS_SUCCESS;
    2cd6:	1a 82       	std	Y+2, r1	; 0x02
    2cd8:	0e c0       	rjmp	.+28     	; 0x2cf6 <PHY_TaskHandler+0x13a>
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	83 30       	cpi	r24, 0x03	; 3
    2cde:	19 f4       	brne	.+6      	; 0x2ce6 <PHY_TaskHandler+0x12a>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	8a 83       	std	Y+2, r24	; 0x02
    2ce4:	08 c0       	rjmp	.+16     	; 0x2cf6 <PHY_TaskHandler+0x13a>
      else if (TRAC_STATUS_NO_ACK == status)
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	85 30       	cpi	r24, 0x05	; 5
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <PHY_TaskHandler+0x136>
        status = PHY_STATUS_NO_ACK;
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	8a 83       	std	Y+2, r24	; 0x02
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <PHY_TaskHandler+0x13a>
      else
        status = PHY_STATUS_ERROR;
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
    2cf4:	8a 83       	std	Y+2, r24	; 0x02

      phySetRxState();
    2cf6:	26 df       	rcall	.-436    	; 0x2b44 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <phyState>

      PHY_DataConf(status);
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	20 dd       	rcall	.-1472   	; 0x2742 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2d02:	8f e4       	ldi	r24, 0x4F	; 79
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	fc 01       	movw	r30, r24
    2d08:	20 81       	ld	r18, Z
    2d0a:	20 64       	ori	r18, 0x40	; 64
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	20 83       	st	Z, r18
    2d10:	01 c0       	rjmp	.+2      	; 0x2d14 <PHY_TaskHandler+0x158>
/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
  if (PHY_STATE_SLEEP == phyState)
    return;
    2d12:	00 00       	nop
      PHY_DataConf(status);
    }

    IRQ_STATUS_REG_s.txEnd = 1;
  }
}
    2d14:	28 96       	adiw	r28, 0x08	; 8
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	08 95       	ret

00002d26 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
  HAL_Init();
    2d2e:	0e 94 1b 02 	call	0x436	; 0x436 <HAL_Init>
  SYS_TimerInit();
    2d32:	13 d0       	rcall	.+38     	; 0x2d5a <SYS_TimerInit>
  PHY_Init();
    2d34:	03 de       	rcall	.-1018   	; 0x293c <PHY_Init>
    2d36:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NWK_Init>
  NWK_Init();
    2d3a:	00 00       	nop
}
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	08 95       	ret

00002d42 <SYS_TaskHandler>:
    2d42:	cf 93       	push	r28

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    2d44:	df 93       	push	r29
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
  PHY_TaskHandler();
    2d4a:	38 df       	rcall	.-400    	; 0x2bbc <PHY_TaskHandler>
  NWK_TaskHandler();
    2d4c:	0e 94 55 05 	call	0xaaa	; 0xaaa <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2d50:	c8 d0       	rcall	.+400    	; 0x2ee2 <SYS_TimerTaskHandler>
}
    2d52:	00 00       	nop
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
  timers = NULL;
    2d62:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <timers+0x1>
    2d66:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <timers>
}
    2d6a:	00 00       	nop
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <SYS_TimerStart>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	1f 92       	push	r1
    2d78:	1f 92       	push	r1
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
  if (!SYS_TimerStarted(timer))
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	82 d0       	rcall	.+260    	; 0x2e8c <SYS_TimerStarted>
    2d88:	98 2f       	mov	r25, r24
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	89 27       	eor	r24, r25
    2d8e:	88 23       	and	r24, r24
    2d90:	19 f0       	breq	.+6      	; 0x2d98 <SYS_TimerStart+0x26>
    placeTimer(timer);
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	6c d1       	rcall	.+728    	; 0x3070 <placeTimer>
}
    2d98:	00 00       	nop
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	08 95       	ret

00002da4 <SYS_TimerStop>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <SYS_TimerStop+0x6>
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <SYS_TimerStop+0x8>
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
  SYS_Timer_t *prev = NULL;
    2db4:	1a 82       	std	Y+2, r1	; 0x02
    2db6:	19 82       	std	Y+1, r1	; 0x01

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2db8:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2dbc:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
    2dc4:	52 c0       	rjmp	.+164    	; 0x2e6a <SYS_TimerStop+0xc6>
  {
    if (t == timer)
    2dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	28 17       	cp	r18, r24
    2dd0:	39 07       	cpc	r19, r25
    2dd2:	09 f0       	breq	.+2      	; 0x2dd6 <SYS_TimerStop+0x32>
    2dd4:	3f c0       	rjmp	.+126    	; 0x2e54 <SYS_TimerStop+0xb0>
    {
      if (prev)
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	89 2b       	or	r24, r25
    2ddc:	59 f0       	breq	.+22     	; 0x2df4 <SYS_TimerStop+0x50>
        prev->next = t->next;
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	fc 01       	movw	r30, r24
    2de4:	20 81       	ld	r18, Z
    2de6:	31 81       	ldd	r19, Z+1	; 0x01
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	fc 01       	movw	r30, r24
    2dee:	31 83       	std	Z+1, r19	; 0x01
    2df0:	20 83       	st	Z, r18
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <SYS_TimerStop+0x62>
      else
        timers = t->next;
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	fc 01       	movw	r30, r24
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    2e02:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>

      if (t->next)
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	80 81       	ld	r24, Z
    2e0e:	91 81       	ldd	r25, Z+1	; 0x01
    2e10:	89 2b       	or	r24, r25
    2e12:	89 f1       	breq	.+98     	; 0x2e76 <SYS_TimerStop+0xd2>
        t->next->timeout += timer->timeout;
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	9c 81       	ldd	r25, Y+4	; 0x04
    2e18:	fc 01       	movw	r30, r24
    2e1a:	60 81       	ld	r22, Z
    2e1c:	71 81       	ldd	r23, Z+1	; 0x01
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	9c 81       	ldd	r25, Y+4	; 0x04
    2e22:	fc 01       	movw	r30, r24
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	fc 01       	movw	r30, r24
    2e2a:	22 81       	ldd	r18, Z+2	; 0x02
    2e2c:	33 81       	ldd	r19, Z+3	; 0x03
    2e2e:	44 81       	ldd	r20, Z+4	; 0x04
    2e30:	55 81       	ldd	r21, Z+5	; 0x05
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	fc 01       	movw	r30, r24
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	93 81       	ldd	r25, Z+3	; 0x03
    2e3c:	a4 81       	ldd	r26, Z+4	; 0x04
    2e3e:	b5 81       	ldd	r27, Z+5	; 0x05
    2e40:	82 0f       	add	r24, r18
    2e42:	93 1f       	adc	r25, r19
    2e44:	a4 1f       	adc	r26, r20
    2e46:	b5 1f       	adc	r27, r21
    2e48:	fb 01       	movw	r30, r22
    2e4a:	82 83       	std	Z+2, r24	; 0x02
    2e4c:	93 83       	std	Z+3, r25	; 0x03
    2e4e:	a4 83       	std	Z+4, r26	; 0x04
    2e50:	b5 83       	std	Z+5, r27	; 0x05

      break;
    2e52:	11 c0       	rjmp	.+34     	; 0x2e76 <SYS_TimerStop+0xd2>
    }
    prev = t;
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	9a 83       	std	Y+2, r25	; 0x02
    2e5a:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e60:	fc 01       	movw	r30, r24
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	9c 83       	std	Y+4, r25	; 0x04
    2e68:	8b 83       	std	Y+3, r24	; 0x03
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6e:	89 2b       	or	r24, r25
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <SYS_TimerStop+0xd0>
    2e72:	a9 cf       	rjmp	.-174    	; 0x2dc6 <SYS_TimerStop+0x22>

      break;
    }
    prev = t;
  }
}
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <SYS_TimerStop+0xd4>
        timers = t->next;

      if (t->next)
        t->next->timeout += timer->timeout;

      break;
    2e76:	00 00       	nop
    }
    prev = t;
  }
}
    2e78:	00 00       	nop
    2e7a:	26 96       	adiw	r28, 0x06	; 6
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	08 95       	ret

00002e8c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <SYS_TimerStarted+0x6>
    2e92:	1f 92       	push	r1
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2e9c:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2ea0:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	10 c0       	rjmp	.+32     	; 0x2eca <SYS_TimerStarted+0x3e>
    if (t == timer)
    2eaa:	29 81       	ldd	r18, Y+1	; 0x01
    2eac:	3a 81       	ldd	r19, Y+2	; 0x02
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb2:	28 17       	cp	r18, r24
    2eb4:	39 07       	cpc	r19, r25
    2eb6:	11 f4       	brne	.+4      	; 0x2ebc <SYS_TimerStarted+0x30>
      return true;
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	0c c0       	rjmp	.+24     	; 0x2ed4 <SYS_TimerStarted+0x48>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	89 2b       	or	r24, r25
    2ed0:	61 f7       	brne	.-40     	; 0x2eaa <SYS_TimerStarted+0x1e>
    if (t == timer)
      return true;
  return false;
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
}
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	08 95       	ret

00002ee2 <SYS_TimerTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2ee2:	ef 92       	push	r14
    2ee4:	ff 92       	push	r15
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	28 97       	sbiw	r28, 0x08	; 8
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2efe:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    2f02:	88 23       	and	r24, r24
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <SYS_TimerTaskHandler+0x26>
    2f06:	a6 c0       	rjmp	.+332    	; 0x3054 <SYS_TimerTaskHandler+0x172>
    return;

  ATOMIC_SECTION_ENTER
    2f08:	8f e5       	ldi	r24, 0x5F	; 95
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	80 81       	ld	r24, Z
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	f8 94       	cli
    cnt = halTimerIrqCount;
    2f14:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    2f18:	8e 83       	std	Y+6, r24	; 0x06
    halTimerIrqCount = 0;
    2f1a:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    2f1e:	8f e5       	ldi	r24, 0x5F	; 95
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	2d 81       	ldd	r18, Y+5	; 0x05
    2f24:	fc 01       	movw	r30, r24
    2f26:	20 83       	st	Z, r18

  elapsed = cnt * HAL_TIMER_INTERVAL;
    2f28:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2a:	88 2f       	mov	r24, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a0 e0       	ldi	r26, 0x00	; 0
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	aa 1f       	adc	r26, r26
    2f38:	bb 1f       	adc	r27, r27
    2f3a:	9c 01       	movw	r18, r24
    2f3c:	ad 01       	movw	r20, r26
    2f3e:	22 0f       	add	r18, r18
    2f40:	33 1f       	adc	r19, r19
    2f42:	44 1f       	adc	r20, r20
    2f44:	55 1f       	adc	r21, r21
    2f46:	22 0f       	add	r18, r18
    2f48:	33 1f       	adc	r19, r19
    2f4a:	44 1f       	adc	r20, r20
    2f4c:	55 1f       	adc	r21, r21
    2f4e:	82 0f       	add	r24, r18
    2f50:	93 1f       	adc	r25, r19
    2f52:	a4 1f       	adc	r26, r20
    2f54:	b5 1f       	adc	r27, r21
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	9a 83       	std	Y+2, r25	; 0x02
    2f5a:	ab 83       	std	Y+3, r26	; 0x03
    2f5c:	bc 83       	std	Y+4, r27	; 0x04

  while (timers && (timers->timeout <= elapsed))
    2f5e:	3c c0       	rjmp	.+120    	; 0x2fd8 <SYS_TimerTaskHandler+0xf6>
  {
    SYS_Timer_t *timer = timers;
    2f60:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2f64:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2f68:	98 87       	std	Y+8, r25	; 0x08
    2f6a:	8f 83       	std	Y+7, r24	; 0x07

    elapsed -= timers->timeout;
    2f6c:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2f70:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2f74:	fc 01       	movw	r30, r24
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	a4 81       	ldd	r26, Z+4	; 0x04
    2f7c:	b5 81       	ldd	r27, Z+5	; 0x05
    2f7e:	29 81       	ldd	r18, Y+1	; 0x01
    2f80:	3a 81       	ldd	r19, Y+2	; 0x02
    2f82:	4b 81       	ldd	r20, Y+3	; 0x03
    2f84:	5c 81       	ldd	r21, Y+4	; 0x04
    2f86:	79 01       	movw	r14, r18
    2f88:	8a 01       	movw	r16, r20
    2f8a:	e8 1a       	sub	r14, r24
    2f8c:	f9 0a       	sbc	r15, r25
    2f8e:	0a 0b       	sbc	r16, r26
    2f90:	1b 0b       	sbc	r17, r27
    2f92:	d8 01       	movw	r26, r16
    2f94:	c7 01       	movw	r24, r14
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	ab 83       	std	Y+3, r26	; 0x03
    2f9c:	bc 83       	std	Y+4, r27	; 0x04
    timers = timers->next;
    2f9e:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2fa2:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    2fb0:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2fb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb6:	98 85       	ldd	r25, Y+8	; 0x08
    2fb8:	fc 01       	movw	r30, r24
    2fba:	82 85       	ldd	r24, Z+10	; 0x0a
    2fbc:	81 30       	cpi	r24, 0x01	; 1
    2fbe:	19 f4       	brne	.+6      	; 0x2fc6 <SYS_TimerTaskHandler+0xe4>
      placeTimer(timer);
    2fc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc2:	98 85       	ldd	r25, Y+8	; 0x08
    2fc4:	55 d0       	rcall	.+170    	; 0x3070 <placeTimer>
    timer->handler(timer);
    2fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc8:	98 85       	ldd	r25, Y+8	; 0x08
    2fca:	fc 01       	movw	r30, r24
    2fcc:	23 85       	ldd	r18, Z+11	; 0x0b
    2fce:	34 85       	ldd	r19, Z+12	; 0x0c
    2fd0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd2:	98 85       	ldd	r25, Y+8	; 0x08
    2fd4:	f9 01       	movw	r30, r18
    2fd6:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    2fd8:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2fdc:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2fe0:	89 2b       	or	r24, r25
    2fe2:	99 f0       	breq	.+38     	; 0x300a <SYS_TimerTaskHandler+0x128>
    2fe4:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2fe8:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2fec:	fc 01       	movw	r30, r24
    2fee:	22 81       	ldd	r18, Z+2	; 0x02
    2ff0:	33 81       	ldd	r19, Z+3	; 0x03
    2ff2:	44 81       	ldd	r20, Z+4	; 0x04
    2ff4:	55 81       	ldd	r21, Z+5	; 0x05
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffa:	ab 81       	ldd	r26, Y+3	; 0x03
    2ffc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ffe:	82 17       	cp	r24, r18
    3000:	93 07       	cpc	r25, r19
    3002:	a4 07       	cpc	r26, r20
    3004:	b5 07       	cpc	r27, r21
    3006:	08 f0       	brcs	.+2      	; 0x300a <SYS_TimerTaskHandler+0x128>
    3008:	ab cf       	rjmp	.-170    	; 0x2f60 <SYS_TimerTaskHandler+0x7e>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    300a:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    300e:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    3012:	89 2b       	or	r24, r25
    3014:	01 f1       	breq	.+64     	; 0x3056 <SYS_TimerTaskHandler+0x174>
    timers->timeout -= elapsed;
    3016:	60 91 e4 19 	lds	r22, 0x19E4	; 0x8019e4 <timers>
    301a:	70 91 e5 19 	lds	r23, 0x19E5	; 0x8019e5 <timers+0x1>
    301e:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    3022:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    3026:	fc 01       	movw	r30, r24
    3028:	22 81       	ldd	r18, Z+2	; 0x02
    302a:	33 81       	ldd	r19, Z+3	; 0x03
    302c:	44 81       	ldd	r20, Z+4	; 0x04
    302e:	55 81       	ldd	r21, Z+5	; 0x05
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	ab 81       	ldd	r26, Y+3	; 0x03
    3036:	bc 81       	ldd	r27, Y+4	; 0x04
    3038:	79 01       	movw	r14, r18
    303a:	8a 01       	movw	r16, r20
    303c:	e8 1a       	sub	r14, r24
    303e:	f9 0a       	sbc	r15, r25
    3040:	0a 0b       	sbc	r16, r26
    3042:	1b 0b       	sbc	r17, r27
    3044:	d8 01       	movw	r26, r16
    3046:	c7 01       	movw	r24, r14
    3048:	fb 01       	movw	r30, r22
    304a:	82 83       	std	Z+2, r24	; 0x02
    304c:	93 83       	std	Z+3, r25	; 0x03
    304e:	a4 83       	std	Z+4, r26	; 0x04
    3050:	b5 83       	std	Z+5, r27	; 0x05
    3052:	01 c0       	rjmp	.+2      	; 0x3056 <SYS_TimerTaskHandler+0x174>
{
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    return;
    3054:	00 00       	nop
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
}
    3056:	28 96       	adiw	r28, 0x08	; 8
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	08 95       	ret

00003070 <placeTimer>:

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3070:	ef 92       	push	r14
    3072:	ff 92       	push	r15
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	2a 97       	sbiw	r28, 0x0a	; 10
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	9a 87       	std	Y+10, r25	; 0x0a
    308e:	89 87       	std	Y+9, r24	; 0x09
  if (timers)
    3090:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    3094:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    3098:	89 2b       	or	r24, r25
    309a:	09 f4       	brne	.+2      	; 0x309e <placeTimer+0x2e>
    309c:	97 c0       	rjmp	.+302    	; 0x31cc <placeTimer+0x15c>
  {
    SYS_Timer_t *prev = NULL;
    309e:	1a 82       	std	Y+2, r1	; 0x02
    30a0:	19 82       	std	Y+1, r1	; 0x01
    uint32_t timeout = timer->interval;
    30a2:	89 85       	ldd	r24, Y+9	; 0x09
    30a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a6:	fc 01       	movw	r30, r24
    30a8:	86 81       	ldd	r24, Z+6	; 0x06
    30aa:	97 81       	ldd	r25, Z+7	; 0x07
    30ac:	a0 85       	ldd	r26, Z+8	; 0x08
    30ae:	b1 85       	ldd	r27, Z+9	; 0x09
    30b0:	8b 83       	std	Y+3, r24	; 0x03
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	ad 83       	std	Y+5, r26	; 0x05
    30b6:	be 83       	std	Y+6, r27	; 0x06

    for (SYS_Timer_t *t = timers; t; t = t->next)
    30b8:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    30bc:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    30c0:	98 87       	std	Y+8, r25	; 0x08
    30c2:	8f 83       	std	Y+7, r24	; 0x07
    30c4:	4d c0       	rjmp	.+154    	; 0x3160 <placeTimer+0xf0>
    {
      if (timeout < t->timeout)
    30c6:	8f 81       	ldd	r24, Y+7	; 0x07
    30c8:	98 85       	ldd	r25, Y+8	; 0x08
    30ca:	fc 01       	movw	r30, r24
    30cc:	22 81       	ldd	r18, Z+2	; 0x02
    30ce:	33 81       	ldd	r19, Z+3	; 0x03
    30d0:	44 81       	ldd	r20, Z+4	; 0x04
    30d2:	55 81       	ldd	r21, Z+5	; 0x05
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	ad 81       	ldd	r26, Y+5	; 0x05
    30da:	be 81       	ldd	r27, Y+6	; 0x06
    30dc:	82 17       	cp	r24, r18
    30de:	93 07       	cpc	r25, r19
    30e0:	a4 07       	cpc	r26, r20
    30e2:	b5 07       	cpc	r27, r21
    30e4:	d8 f4       	brcc	.+54     	; 0x311c <placeTimer+0xac>
      {
         t->timeout -= timeout;
    30e6:	8f 81       	ldd	r24, Y+7	; 0x07
    30e8:	98 85       	ldd	r25, Y+8	; 0x08
    30ea:	fc 01       	movw	r30, r24
    30ec:	22 81       	ldd	r18, Z+2	; 0x02
    30ee:	33 81       	ldd	r19, Z+3	; 0x03
    30f0:	44 81       	ldd	r20, Z+4	; 0x04
    30f2:	55 81       	ldd	r21, Z+5	; 0x05
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	ad 81       	ldd	r26, Y+5	; 0x05
    30fa:	be 81       	ldd	r27, Y+6	; 0x06
    30fc:	79 01       	movw	r14, r18
    30fe:	8a 01       	movw	r16, r20
    3100:	e8 1a       	sub	r14, r24
    3102:	f9 0a       	sbc	r15, r25
    3104:	0a 0b       	sbc	r16, r26
    3106:	1b 0b       	sbc	r17, r27
    3108:	d8 01       	movw	r26, r16
    310a:	c7 01       	movw	r24, r14
    310c:	2f 81       	ldd	r18, Y+7	; 0x07
    310e:	38 85       	ldd	r19, Y+8	; 0x08
    3110:	f9 01       	movw	r30, r18
    3112:	82 83       	std	Z+2, r24	; 0x02
    3114:	93 83       	std	Z+3, r25	; 0x03
    3116:	a4 83       	std	Z+4, r26	; 0x04
    3118:	b5 83       	std	Z+5, r27	; 0x05
         break;
    311a:	27 c0       	rjmp	.+78     	; 0x316a <placeTimer+0xfa>
      }
      else
        timeout -= t->timeout;
    311c:	8f 81       	ldd	r24, Y+7	; 0x07
    311e:	98 85       	ldd	r25, Y+8	; 0x08
    3120:	fc 01       	movw	r30, r24
    3122:	82 81       	ldd	r24, Z+2	; 0x02
    3124:	93 81       	ldd	r25, Z+3	; 0x03
    3126:	a4 81       	ldd	r26, Z+4	; 0x04
    3128:	b5 81       	ldd	r27, Z+5	; 0x05
    312a:	2b 81       	ldd	r18, Y+3	; 0x03
    312c:	3c 81       	ldd	r19, Y+4	; 0x04
    312e:	4d 81       	ldd	r20, Y+5	; 0x05
    3130:	5e 81       	ldd	r21, Y+6	; 0x06
    3132:	79 01       	movw	r14, r18
    3134:	8a 01       	movw	r16, r20
    3136:	e8 1a       	sub	r14, r24
    3138:	f9 0a       	sbc	r15, r25
    313a:	0a 0b       	sbc	r16, r26
    313c:	1b 0b       	sbc	r17, r27
    313e:	d8 01       	movw	r26, r16
    3140:	c7 01       	movw	r24, r14
    3142:	8b 83       	std	Y+3, r24	; 0x03
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	ad 83       	std	Y+5, r26	; 0x05
    3148:	be 83       	std	Y+6, r27	; 0x06

      prev = t;
    314a:	8f 81       	ldd	r24, Y+7	; 0x07
    314c:	98 85       	ldd	r25, Y+8	; 0x08
    314e:	9a 83       	std	Y+2, r25	; 0x02
    3150:	89 83       	std	Y+1, r24	; 0x01
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    3152:	8f 81       	ldd	r24, Y+7	; 0x07
    3154:	98 85       	ldd	r25, Y+8	; 0x08
    3156:	fc 01       	movw	r30, r24
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	98 87       	std	Y+8, r25	; 0x08
    315e:	8f 83       	std	Y+7, r24	; 0x07
    3160:	8f 81       	ldd	r24, Y+7	; 0x07
    3162:	98 85       	ldd	r25, Y+8	; 0x08
    3164:	89 2b       	or	r24, r25
    3166:	09 f0       	breq	.+2      	; 0x316a <placeTimer+0xfa>
    3168:	ae cf       	rjmp	.-164    	; 0x30c6 <placeTimer+0x56>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    316a:	29 85       	ldd	r18, Y+9	; 0x09
    316c:	3a 85       	ldd	r19, Y+10	; 0x0a
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	ad 81       	ldd	r26, Y+5	; 0x05
    3174:	be 81       	ldd	r27, Y+6	; 0x06
    3176:	f9 01       	movw	r30, r18
    3178:	82 83       	std	Z+2, r24	; 0x02
    317a:	93 83       	std	Z+3, r25	; 0x03
    317c:	a4 83       	std	Z+4, r26	; 0x04
    317e:	b5 83       	std	Z+5, r27	; 0x05

    if (prev)
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	89 2b       	or	r24, r25
    3186:	91 f0       	breq	.+36     	; 0x31ac <placeTimer+0x13c>
    {
      timer->next = prev->next;
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	9a 81       	ldd	r25, Y+2	; 0x02
    318c:	fc 01       	movw	r30, r24
    318e:	20 81       	ld	r18, Z
    3190:	31 81       	ldd	r19, Z+1	; 0x01
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	fc 01       	movw	r30, r24
    3198:	31 83       	std	Z+1, r19	; 0x01
    319a:	20 83       	st	Z, r18
      prev->next = timer;
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	29 85       	ldd	r18, Y+9	; 0x09
    31a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    31a4:	fc 01       	movw	r30, r24
    31a6:	31 83       	std	Z+1, r19	; 0x01
    31a8:	20 83       	st	Z, r18
  {
    timer->next = NULL;
    timer->timeout = timer->interval;
    timers = timer;
  }
}
    31aa:	29 c0       	rjmp	.+82     	; 0x31fe <placeTimer+0x18e>
      timer->next = prev->next;
      prev->next = timer;
    }
    else
    {
      timer->next = timers;
    31ac:	20 91 e4 19 	lds	r18, 0x19E4	; 0x8019e4 <timers>
    31b0:	30 91 e5 19 	lds	r19, 0x19E5	; 0x8019e5 <timers+0x1>
    31b4:	89 85       	ldd	r24, Y+9	; 0x09
    31b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b8:	fc 01       	movw	r30, r24
    31ba:	31 83       	std	Z+1, r19	; 0x01
    31bc:	20 83       	st	Z, r18
      timers = timer;
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    31c6:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
  {
    timer->next = NULL;
    timer->timeout = timer->interval;
    timers = timer;
  }
}
    31ca:	19 c0       	rjmp	.+50     	; 0x31fe <placeTimer+0x18e>
      timers = timer;
    }
  }
  else
  {
    timer->next = NULL;
    31cc:	89 85       	ldd	r24, Y+9	; 0x09
    31ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d0:	fc 01       	movw	r30, r24
    31d2:	11 82       	std	Z+1, r1	; 0x01
    31d4:	10 82       	st	Z, r1
    timer->timeout = timer->interval;
    31d6:	89 85       	ldd	r24, Y+9	; 0x09
    31d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31da:	fc 01       	movw	r30, r24
    31dc:	86 81       	ldd	r24, Z+6	; 0x06
    31de:	97 81       	ldd	r25, Z+7	; 0x07
    31e0:	a0 85       	ldd	r26, Z+8	; 0x08
    31e2:	b1 85       	ldd	r27, Z+9	; 0x09
    31e4:	29 85       	ldd	r18, Y+9	; 0x09
    31e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    31e8:	f9 01       	movw	r30, r18
    31ea:	82 83       	std	Z+2, r24	; 0x02
    31ec:	93 83       	std	Z+3, r25	; 0x03
    31ee:	a4 83       	std	Z+4, r26	; 0x04
    31f0:	b5 83       	std	Z+5, r27	; 0x05
    timers = timer;
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    31fa:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
  }
}
    31fe:	00 00       	nop
    3200:	2a 96       	adiw	r28, 0x0a	; 10
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	08 95       	ret

0000321a <__udivmodsi4>:
    321a:	a1 e2       	ldi	r26, 0x21	; 33
    321c:	1a 2e       	mov	r1, r26
    321e:	aa 1b       	sub	r26, r26
    3220:	bb 1b       	sub	r27, r27
    3222:	fd 01       	movw	r30, r26
    3224:	0d c0       	rjmp	.+26     	; 0x3240 <__udivmodsi4_ep>

00003226 <__udivmodsi4_loop>:
    3226:	aa 1f       	adc	r26, r26
    3228:	bb 1f       	adc	r27, r27
    322a:	ee 1f       	adc	r30, r30
    322c:	ff 1f       	adc	r31, r31
    322e:	a2 17       	cp	r26, r18
    3230:	b3 07       	cpc	r27, r19
    3232:	e4 07       	cpc	r30, r20
    3234:	f5 07       	cpc	r31, r21
    3236:	20 f0       	brcs	.+8      	; 0x3240 <__udivmodsi4_ep>
    3238:	a2 1b       	sub	r26, r18
    323a:	b3 0b       	sbc	r27, r19
    323c:	e4 0b       	sbc	r30, r20
    323e:	f5 0b       	sbc	r31, r21

00003240 <__udivmodsi4_ep>:
    3240:	66 1f       	adc	r22, r22
    3242:	77 1f       	adc	r23, r23
    3244:	88 1f       	adc	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	1a 94       	dec	r1
    324a:	69 f7       	brne	.-38     	; 0x3226 <__udivmodsi4_loop>
    324c:	60 95       	com	r22
    324e:	70 95       	com	r23
    3250:	80 95       	com	r24
    3252:	90 95       	com	r25
    3254:	9b 01       	movw	r18, r22
    3256:	ac 01       	movw	r20, r24
    3258:	bd 01       	movw	r22, r26
    325a:	cf 01       	movw	r24, r30
    325c:	08 95       	ret

0000325e <do_rand>:
    325e:	8f 92       	push	r8
    3260:	9f 92       	push	r9
    3262:	af 92       	push	r10
    3264:	bf 92       	push	r11
    3266:	cf 92       	push	r12
    3268:	df 92       	push	r13
    326a:	ef 92       	push	r14
    326c:	ff 92       	push	r15
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	ec 01       	movw	r28, r24
    3274:	68 81       	ld	r22, Y
    3276:	79 81       	ldd	r23, Y+1	; 0x01
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	61 15       	cp	r22, r1
    327e:	71 05       	cpc	r23, r1
    3280:	81 05       	cpc	r24, r1
    3282:	91 05       	cpc	r25, r1
    3284:	21 f4       	brne	.+8      	; 0x328e <do_rand+0x30>
    3286:	64 e2       	ldi	r22, 0x24	; 36
    3288:	79 ed       	ldi	r23, 0xD9	; 217
    328a:	8b e5       	ldi	r24, 0x5B	; 91
    328c:	97 e0       	ldi	r25, 0x07	; 7
    328e:	2d e1       	ldi	r18, 0x1D	; 29
    3290:	33 ef       	ldi	r19, 0xF3	; 243
    3292:	41 e0       	ldi	r20, 0x01	; 1
    3294:	50 e0       	ldi	r21, 0x00	; 0
    3296:	48 d0       	rcall	.+144    	; 0x3328 <__divmodsi4>
    3298:	49 01       	movw	r8, r18
    329a:	5a 01       	movw	r10, r20
    329c:	9b 01       	movw	r18, r22
    329e:	ac 01       	movw	r20, r24
    32a0:	a7 ea       	ldi	r26, 0xA7	; 167
    32a2:	b1 e4       	ldi	r27, 0x41	; 65
    32a4:	5d d0       	rcall	.+186    	; 0x3360 <__muluhisi3>
    32a6:	6b 01       	movw	r12, r22
    32a8:	7c 01       	movw	r14, r24
    32aa:	ac ee       	ldi	r26, 0xEC	; 236
    32ac:	b4 ef       	ldi	r27, 0xF4	; 244
    32ae:	a5 01       	movw	r20, r10
    32b0:	94 01       	movw	r18, r8
    32b2:	62 d0       	rcall	.+196    	; 0x3378 <__mulohisi3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	8c 0d       	add	r24, r12
    32ba:	9d 1d       	adc	r25, r13
    32bc:	ae 1d       	adc	r26, r14
    32be:	bf 1d       	adc	r27, r15
    32c0:	b7 ff       	sbrs	r27, 7
    32c2:	03 c0       	rjmp	.+6      	; 0x32ca <do_rand+0x6c>
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	a1 09       	sbc	r26, r1
    32c8:	b0 48       	sbci	r27, 0x80	; 128
    32ca:	88 83       	st	Y, r24
    32cc:	99 83       	std	Y+1, r25	; 0x01
    32ce:	aa 83       	std	Y+2, r26	; 0x02
    32d0:	bb 83       	std	Y+3, r27	; 0x03
    32d2:	9f 77       	andi	r25, 0x7F	; 127
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	df 90       	pop	r13
    32de:	cf 90       	pop	r12
    32e0:	bf 90       	pop	r11
    32e2:	af 90       	pop	r10
    32e4:	9f 90       	pop	r9
    32e6:	8f 90       	pop	r8
    32e8:	08 95       	ret

000032ea <rand_r>:
    32ea:	b9 cf       	rjmp	.-142    	; 0x325e <do_rand>

000032ec <rand>:
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	92 e0       	ldi	r25, 0x02	; 2
    32f0:	b6 cf       	rjmp	.-148    	; 0x325e <do_rand>

000032f2 <srand>:
    32f2:	a0 e0       	ldi	r26, 0x00	; 0
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    32fa:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    32fe:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    3302:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    3306:	08 95       	ret

00003308 <memcpy>:
    3308:	fb 01       	movw	r30, r22
    330a:	dc 01       	movw	r26, r24
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <memcpy+0xa>
    330e:	01 90       	ld	r0, Z+
    3310:	0d 92       	st	X+, r0
    3312:	41 50       	subi	r20, 0x01	; 1
    3314:	50 40       	sbci	r21, 0x00	; 0
    3316:	d8 f7       	brcc	.-10     	; 0x330e <memcpy+0x6>
    3318:	08 95       	ret

0000331a <memset>:
    331a:	dc 01       	movw	r26, r24
    331c:	01 c0       	rjmp	.+2      	; 0x3320 <memset+0x6>
    331e:	6d 93       	st	X+, r22
    3320:	41 50       	subi	r20, 0x01	; 1
    3322:	50 40       	sbci	r21, 0x00	; 0
    3324:	e0 f7       	brcc	.-8      	; 0x331e <memset+0x4>
    3326:	08 95       	ret

00003328 <__divmodsi4>:
    3328:	05 2e       	mov	r0, r21
    332a:	97 fb       	bst	r25, 7
    332c:	16 f4       	brtc	.+4      	; 0x3332 <__divmodsi4+0xa>
    332e:	00 94       	com	r0
    3330:	0f d0       	rcall	.+30     	; 0x3350 <__negsi2>
    3332:	57 fd       	sbrc	r21, 7
    3334:	05 d0       	rcall	.+10     	; 0x3340 <__divmodsi4_neg2>
    3336:	71 df       	rcall	.-286    	; 0x321a <__udivmodsi4>
    3338:	07 fc       	sbrc	r0, 7
    333a:	02 d0       	rcall	.+4      	; 0x3340 <__divmodsi4_neg2>
    333c:	46 f4       	brtc	.+16     	; 0x334e <__divmodsi4_exit>
    333e:	08 c0       	rjmp	.+16     	; 0x3350 <__negsi2>

00003340 <__divmodsi4_neg2>:
    3340:	50 95       	com	r21
    3342:	40 95       	com	r20
    3344:	30 95       	com	r19
    3346:	21 95       	neg	r18
    3348:	3f 4f       	sbci	r19, 0xFF	; 255
    334a:	4f 4f       	sbci	r20, 0xFF	; 255
    334c:	5f 4f       	sbci	r21, 0xFF	; 255

0000334e <__divmodsi4_exit>:
    334e:	08 95       	ret

00003350 <__negsi2>:
    3350:	90 95       	com	r25
    3352:	80 95       	com	r24
    3354:	70 95       	com	r23
    3356:	61 95       	neg	r22
    3358:	7f 4f       	sbci	r23, 0xFF	; 255
    335a:	8f 4f       	sbci	r24, 0xFF	; 255
    335c:	9f 4f       	sbci	r25, 0xFF	; 255
    335e:	08 95       	ret

00003360 <__muluhisi3>:
    3360:	0f d0       	rcall	.+30     	; 0x3380 <__umulhisi3>
    3362:	a5 9f       	mul	r26, r21
    3364:	90 0d       	add	r25, r0
    3366:	b4 9f       	mul	r27, r20
    3368:	90 0d       	add	r25, r0
    336a:	a4 9f       	mul	r26, r20
    336c:	80 0d       	add	r24, r0
    336e:	91 1d       	adc	r25, r1
    3370:	11 24       	eor	r1, r1
    3372:	08 95       	ret

00003374 <__mulshisi3>:
    3374:	b7 ff       	sbrs	r27, 7
    3376:	f4 cf       	rjmp	.-24     	; 0x3360 <__muluhisi3>

00003378 <__mulohisi3>:
    3378:	f3 df       	rcall	.-26     	; 0x3360 <__muluhisi3>
    337a:	82 1b       	sub	r24, r18
    337c:	93 0b       	sbc	r25, r19
    337e:	08 95       	ret

00003380 <__umulhisi3>:
    3380:	a2 9f       	mul	r26, r18
    3382:	b0 01       	movw	r22, r0
    3384:	b3 9f       	mul	r27, r19
    3386:	c0 01       	movw	r24, r0
    3388:	a3 9f       	mul	r26, r19
    338a:	70 0d       	add	r23, r0
    338c:	81 1d       	adc	r24, r1
    338e:	11 24       	eor	r1, r1
    3390:	91 1d       	adc	r25, r1
    3392:	b2 9f       	mul	r27, r18
    3394:	70 0d       	add	r23, r0
    3396:	81 1d       	adc	r24, r1
    3398:	11 24       	eor	r1, r1
    339a:	91 1d       	adc	r25, r1
    339c:	08 95       	ret

0000339e <_exit>:
    339e:	f8 94       	cli

000033a0 <__stop_program>:
    33a0:	ff cf       	rjmp	.-2      	; 0x33a0 <__stop_program>


LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  00001d54  00001de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001d90  00800290  00800290  00001e78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066fe  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d22  00000000  00000000  00008a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027c0  00000000  00000000  0000b750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a24  00000000  00000000  0000df10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000201e  00000000  00000000  0000e934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000264e  00000000  00000000  00010952  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00012fa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a0 c0       	rjmp	.+320    	; 0x142 <__ctors_end>
       2:	00 00       	nop
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	ac c0       	rjmp	.+344    	; 0x182 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	aa c0       	rjmp	.+340    	; 0x182 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c2       	rjmp	.+1222   	; 0x4fc <__vector_13>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ea c2       	rjmp	.+1492   	; 0x666 <__vector_36>
      92:	00 00       	nop
      94:	cc c2       	rjmp	.+1432   	; 0x62e <__vector_37>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	18 c2       	rjmp	.+1072   	; 0x4da <__vector_42>
      aa:	00 00       	nop
      ac:	6a c0       	rjmp	.+212    	; 0x182 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	68 c0       	rjmp	.+208    	; 0x182 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	66 c0       	rjmp	.+204    	; 0x182 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	64 c0       	rjmp	.+200    	; 0x182 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	62 c0       	rjmp	.+196    	; 0x182 <__bad_interrupt>
      be:	00 00       	nop
      c0:	60 c0       	rjmp	.+192    	; 0x182 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5e c0       	rjmp	.+188    	; 0x182 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5c c0       	rjmp	.+184    	; 0x182 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	5a c0       	rjmp	.+180    	; 0x182 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	58 c0       	rjmp	.+176    	; 0x182 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	56 c0       	rjmp	.+172    	; 0x182 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	54 c0       	rjmp	.+168    	; 0x182 <__bad_interrupt>
      da:	00 00       	nop
      dc:	52 c0       	rjmp	.+164    	; 0x182 <__bad_interrupt>
      de:	00 00       	nop
      e0:	50 c0       	rjmp	.+160    	; 0x182 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4e c0       	rjmp	.+156    	; 0x182 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	4c c0       	rjmp	.+152    	; 0x182 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	4a c0       	rjmp	.+148    	; 0x182 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	48 c0       	rjmp	.+144    	; 0x182 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	46 c0       	rjmp	.+140    	; 0x182 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	44 c0       	rjmp	.+136    	; 0x182 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	42 c0       	rjmp	.+132    	; 0x182 <__bad_interrupt>
      fe:	00 00       	nop
     100:	40 c0       	rjmp	.+128    	; 0x182 <__bad_interrupt>
     102:	00 00       	nop
     104:	3e c0       	rjmp	.+124    	; 0x182 <__bad_interrupt>
     106:	00 00       	nop
     108:	3c c0       	rjmp	.+120    	; 0x182 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	3a c0       	rjmp	.+116    	; 0x182 <__bad_interrupt>
     10e:	00 00       	nop
     110:	38 c0       	rjmp	.+112    	; 0x182 <__bad_interrupt>
     112:	00 00       	nop
     114:	36 c0       	rjmp	.+108    	; 0x182 <__bad_interrupt>
     116:	00 00       	nop
     118:	34 c0       	rjmp	.+104    	; 0x182 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	32 c0       	rjmp	.+100    	; 0x182 <__bad_interrupt>
     11e:	00 00       	nop
     120:	30 c0       	rjmp	.+96     	; 0x182 <__bad_interrupt>
     122:	00 00       	nop
     124:	2e c0       	rjmp	.+92     	; 0x182 <__bad_interrupt>
     126:	00 00       	nop
     128:	2c c0       	rjmp	.+88     	; 0x182 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	2a c0       	rjmp	.+84     	; 0x182 <__bad_interrupt>
     12e:	00 00       	nop
     130:	28 c0       	rjmp	.+80     	; 0x182 <__bad_interrupt>
     132:	00 00       	nop
     134:	c0 01       	movw	r24, r0
     136:	97 01       	movw	r18, r14
     138:	97 01       	movw	r18, r14
     13a:	a6 01       	movw	r20, r12
     13c:	7a 01       	movw	r14, r20
     13e:	89 01       	movw	r16, r18
     140:	54 01       	movw	r10, r8

00000142 <__ctors_end>:
     142:	11 24       	eor	r1, r1
     144:	1f be       	out	0x3f, r1	; 63
     146:	cf ef       	ldi	r28, 0xFF	; 255
     148:	d1 e8       	ldi	r29, 0x81	; 129
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0c bf       	out	0x3c, r16	; 60

00000152 <__do_copy_data>:
     152:	12 e0       	ldi	r17, 0x02	; 2
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	e4 e5       	ldi	r30, 0x54	; 84
     15a:	fd e1       	ldi	r31, 0x1D	; 29
     15c:	00 e0       	ldi	r16, 0x00	; 0
     15e:	0b bf       	out	0x3b, r16	; 59
     160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x14>
     162:	07 90       	elpm	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	a0 39       	cpi	r26, 0x90	; 144
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0x10>

0000016c <__do_clear_bss>:
     16c:	20 e2       	ldi	r18, 0x20	; 32
     16e:	a0 e9       	ldi	r26, 0x90	; 144
     170:	b2 e0       	ldi	r27, 0x02	; 2
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a0 32       	cpi	r26, 0x20	; 32
     178:	b2 07       	cpc	r27, r18
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	72 d1       	rcall	.+740    	; 0x462 <main>
     17e:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <APP_dataConf>:
}

void APP_timerHandler(SYS_Timer_t *timer) {
  char test[] = "SYSLOG: timer is being reset";
  for (int i = 0; strlen(test); i++) {
    HAL_UartWriteByte(test[i]);
     184:	08 95       	ret

00000186 <HAL_UartBytesReceived>:
static RouteTable_t routeTable[ROUTE_TABLE_SIZE];
static uint8_t routeTablePtr = 0;
static uint16_t meAddr = APP_ADDR;
static uint16_t meEndpoint = APP_ENDPOINT;

void HAL_UartBytesReceived(uint16_t bytes) { HAL_UartWriteString(bytes); }
     186:	45 c2       	rjmp	.+1162   	; 0x612 <HAL_UartWriteString>
     188:	08 95       	ret

0000018a <APP_dataSend>:

void APP_dataSend(AppMsgType_t msgType, uint8_t addr) {
  RouteTable_t route = routeTable[addr];
     18a:	26 2f       	mov	r18, r22
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	f9 01       	movw	r30, r18
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	e2 0f       	add	r30, r18
     196:	f3 1f       	adc	r31, r19
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	ef 56       	subi	r30, 0x6F	; 111
     19e:	fd 4f       	sbci	r31, 0xFD	; 253
     1a0:	92 81       	ldd	r25, Z+2	; 0x02
  dataReq.data->msgType = msgType;
     1a2:	e0 91 08 09 	lds	r30, 0x0908	; 0x800908 <dataReq+0xa>
     1a6:	f0 91 09 09 	lds	r31, 0x0909	; 0x800909 <dataReq+0xb>
     1aa:	81 83       	std	Z+1, r24	; 0x01
  switch (msgType) {
     1ac:	87 30       	cpi	r24, 0x07	; 7
     1ae:	61 f0       	breq	.+24     	; 0x1c8 <APP_dataSend+0x3e>
     1b0:	89 30       	cpi	r24, 0x09	; 9
     1b2:	91 f4       	brne	.+36     	; 0x1d8 <APP_dataSend+0x4e>
  case OFFER:
    dataReq.data->data = routeTablePtr;
     1b4:	e0 91 08 09 	lds	r30, 0x0908	; 0x800908 <dataReq+0xa>
     1b8:	f0 91 09 09 	lds	r31, 0x0909	; 0x800909 <dataReq+0xb>
     1bc:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <__data_end>
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	34 83       	std	Z+4, r19	; 0x04
     1c4:	23 83       	std	Z+3, r18	; 0x03
    break;
     1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <APP_dataSend+0x4e>
  case APPDATA:
    dataReq.data->data = "data";
     1c8:	e0 91 08 09 	lds	r30, 0x0908	; 0x800908 <dataReq+0xa>
     1cc:	f0 91 09 09 	lds	r31, 0x0909	; 0x800909 <dataReq+0xb>
     1d0:	21 e2       	ldi	r18, 0x21	; 33
     1d2:	32 e0       	ldi	r19, 0x02	; 2
     1d4:	34 83       	std	Z+4, r19	; 0x04
     1d6:	23 83       	std	Z+3, r18	; 0x03
    break;
  }
  dataReq.size = sizeof(dataReq.data) + sizeof(dataReq.data->data) + 2;
     1d8:	ee ef       	ldi	r30, 0xFE	; 254
     1da:	f8 e0       	ldi	r31, 0x08	; 8
     1dc:	86 e0       	ldi	r24, 0x06	; 6
     1de:	84 87       	std	Z+12, r24	; 0x0c

  dataReq.dstAddr = addr;
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	76 83       	std	Z+6, r23	; 0x06
     1e4:	65 83       	std	Z+5, r22	; 0x05
  //dataReq.dstAddr = 00;
  dataReq.dstEndpoint = route.endpoint;
     1e6:	97 83       	std	Z+7, r25	; 0x07
  //dataReq.dstEndpoint = meEndpoint;
  dataReq.srcEndpoint = meEndpoint;
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	80 87       	std	Z+8, r24	; 0x08
  dataReq.options = NWK_OPT_ENABLE_SECURITY;
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	81 87       	std	Z+9, r24	; 0x09
  dataReq.confirm = APP_dataConf;
     1f0:	82 ec       	ldi	r24, 0xC2	; 194
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	96 87       	std	Z+14, r25	; 0x0e
     1f6:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&dataReq);
     1f8:	cf 01       	movw	r24, r30
     1fa:	29 c3       	rjmp	.+1618   	; 0x84e <NWK_DataReq>
     1fc:	08 95       	ret

000001fe <APP_pushAddr>:
 * Should only be called when the server offers the config,
 * on accept from client, the in_use flag needs to be set,
 * otherwise the server will rewrite the entry on next pass.
 * The route table has 65535 entries
 */
uint16_t APP_pushAddr(uint8_t endpoint, uint8_t *data) {
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	48 2f       	mov	r20, r24
  if (routeTable[routeTablePtr].in_use) {
     204:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <__data_end>
     208:	29 2f       	mov	r18, r25
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	ee 0f       	add	r30, r30
     210:	ff 1f       	adc	r31, r31
     212:	e2 0f       	add	r30, r18
     214:	f3 1f       	adc	r31, r19
     216:	ee 0f       	add	r30, r30
     218:	ff 1f       	adc	r31, r31
     21a:	ef 56       	subi	r30, 0x6F	; 111
     21c:	fd 4f       	sbci	r31, 0xFD	; 253
     21e:	85 81       	ldd	r24, Z+5	; 0x05
     220:	88 23       	and	r24, r24
     222:	31 f0       	breq	.+12     	; 0x230 <APP_pushAddr+0x32>
     224:	84 2f       	mov	r24, r20
    routeTablePtr++;
     226:	9f 5f       	subi	r25, 0xFF	; 255
     228:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <__data_end>
    return APP_pushAddr(endpoint, data);
     22c:	e8 df       	rcall	.-48     	; 0x1fe <APP_pushAddr>
     22e:	1c c0       	rjmp	.+56     	; 0x268 <APP_pushAddr+0x6a>
  }

  routeTable[routeTablePtr].addr = routeTablePtr;
     230:	89 2f       	mov	r24, r25
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	f9 01       	movw	r30, r18
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	df 01       	movw	r26, r30
     23c:	a2 0f       	add	r26, r18
     23e:	b3 1f       	adc	r27, r19
     240:	aa 0f       	add	r26, r26
     242:	bb 1f       	adc	r27, r27
     244:	af 56       	subi	r26, 0x6F	; 111
     246:	bd 4f       	sbci	r27, 0xFD	; 253
     248:	11 96       	adiw	r26, 0x01	; 1
     24a:	9c 93       	st	X, r25
     24c:	8e 93       	st	-X, r24
  routeTable[routeTablePtr].endpoint = endpoint;
     24e:	12 96       	adiw	r26, 0x02	; 2
     250:	4c 93       	st	X, r20
     252:	12 97       	sbiw	r26, 0x02	; 2
  routeTable[routeTablePtr].sleeping = false;
     254:	14 96       	adiw	r26, 0x04	; 4
     256:	1c 92       	st	X, r1
     258:	14 97       	sbiw	r26, 0x04	; 4
  routeTable[routeTablePtr].type = (SensorType_t)(*data);
     25a:	eb 01       	movw	r28, r22
     25c:	48 81       	ld	r20, Y
     25e:	13 96       	adiw	r26, 0x03	; 3
     260:	4c 93       	st	X, r20
     262:	13 97       	sbiw	r26, 0x03	; 3
  // in_use only goes active on APP_ACK from client
  routeTable[routeTablePtr].in_use = false;
     264:	fd 01       	movw	r30, r26
     266:	15 82       	std	Z+5, r1	; 0x05
  return routeTablePtr;
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <APP_dataRecv>:

bool APP_dataRecv(NWK_DataInd_t *ind) {
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	8c 01       	movw	r16, r24
  AppMsg_t *recv = (AppMsg_t *)ind->data;
     27c:	dc 01       	movw	r26, r24
     27e:	17 96       	adiw	r26, 0x07	; 7
     280:	ed 90       	ld	r14, X+
     282:	fc 90       	ld	r15, X
     284:	18 97       	sbiw	r26, 0x08	; 8
     */
    APP_dataSend(APPDATA, ind->srcAddr);
    break;
  }
#else
  switch (recv->msgType) {
     286:	d7 01       	movw	r26, r14
     288:	11 96       	adiw	r26, 0x01	; 1
     28a:	ec 91       	ld	r30, X
     28c:	8e 2f       	mov	r24, r30
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	e7 30       	cpi	r30, 0x07	; 7
     296:	f1 05       	cpc	r31, r1
     298:	08 f0       	brcs	.+2      	; 0x29c <APP_dataRecv+0x2e>
     29a:	77 c0       	rjmp	.+238    	; 0x38a <APP_dataRecv+0x11c>
     29c:	88 27       	eor	r24, r24
     29e:	e6 56       	subi	r30, 0x66	; 102
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	8f 4f       	sbci	r24, 0xFF	; 255
     2a4:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__tablejump2__>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
     2a8:	f8 01       	movw	r30, r16
     2aa:	80 81       	ld	r24, Z
     2ac:	91 81       	ldd	r25, Z+1	; 0x01
     2ae:	fc 01       	movw	r30, r24
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	e8 0f       	add	r30, r24
     2b6:	f9 1f       	adc	r31, r25
     2b8:	ee 0f       	add	r30, r30
     2ba:	ff 1f       	adc	r31, r31
     2bc:	ef 56       	subi	r30, 0x6F	; 111
     2be:	fd 4f       	sbci	r31, 0xFD	; 253
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	84 83       	std	Z+4, r24	; 0x04
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < recv->size; i++) {
     2c4:	d7 01       	movw	r26, r14
     2c6:	8c 91       	ld	r24, X
     2c8:	88 23       	and	r24, r24
     2ca:	09 f4       	brne	.+2      	; 0x2ce <APP_dataRecv+0x60>
     2cc:	64 c0       	rjmp	.+200    	; 0x396 <APP_dataRecv+0x128>
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
      HAL_UartWriteByte(recv->data[i]);
     2d2:	d7 01       	movw	r26, r14
     2d4:	13 96       	adiw	r26, 0x03	; 3
     2d6:	ed 91       	ld	r30, X+
     2d8:	fc 91       	ld	r31, X
     2da:	14 97       	sbiw	r26, 0x04	; 4
     2dc:	ec 0f       	add	r30, r28
     2de:	fd 1f       	adc	r31, r29
     2e0:	80 81       	ld	r24, Z
     2e2:	70 d1       	rcall	.+736    	; 0x5c4 <HAL_UartWriteByte>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < recv->size; i++) {
     2e4:	21 96       	adiw	r28, 0x01	; 1
     2e6:	f7 01       	movw	r30, r14
     2e8:	80 81       	ld	r24, Z
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	c8 17       	cp	r28, r24
     2ee:	d9 07       	cpc	r29, r25
     2f0:	84 f3       	brlt	.-32     	; 0x2d2 <APP_dataRecv+0x64>
     2f2:	51 c0       	rjmp	.+162    	; 0x396 <APP_dataRecv+0x128>
      HAL_UartWriteByte(recv->data[i]);
    }
    break;
  case APP_SLEEP:
    routeTable[ind->srcAddr].sleeping = true;
     2f4:	d8 01       	movw	r26, r16
     2f6:	8d 91       	ld	r24, X+
     2f8:	9c 91       	ld	r25, X
     2fa:	fc 01       	movw	r30, r24
     2fc:	ee 0f       	add	r30, r30
     2fe:	ff 1f       	adc	r31, r31
     300:	e8 0f       	add	r30, r24
     302:	f9 1f       	adc	r31, r25
     304:	ee 0f       	add	r30, r30
     306:	ff 1f       	adc	r31, r31
     308:	ef 56       	subi	r30, 0x6F	; 111
     30a:	fd 4f       	sbci	r31, 0xFD	; 253
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	84 83       	std	Z+4, r24	; 0x04
    break;
     310:	42 c0       	rjmp	.+132    	; 0x396 <APP_dataRecv+0x128>
  case RECONNECT:
    routeTable[ind->srcAddr].sleeping = false;
     312:	f8 01       	movw	r30, r16
     314:	80 81       	ld	r24, Z
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	fc 01       	movw	r30, r24
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e8 0f       	add	r30, r24
     320:	f9 1f       	adc	r31, r25
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ef 56       	subi	r30, 0x6F	; 111
     328:	fd 4f       	sbci	r31, 0xFD	; 253
     32a:	14 82       	std	Z+4, r1	; 0x04
    break;
     32c:	34 c0       	rjmp	.+104    	; 0x396 <APP_dataRecv+0x128>
     * not evil.
     * Also, I presume that clients will not
     * request new adresses once they receive
     * one.
     */
    routeTablePtr++;
     32e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
     332:	8f 5f       	subi	r24, 0xFF	; 255
     334:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>
    int16_t addr = APP_pushAddr(ind->srcEndpoint, ind->data);
     338:	b7 01       	movw	r22, r14
     33a:	d8 01       	movw	r26, r16
     33c:	14 96       	adiw	r26, 0x04	; 4
     33e:	8c 91       	ld	r24, X
     340:	5e df       	rcall	.-324    	; 0x1fe <APP_pushAddr>
    APP_dataSend(OFFER, ind->srcAddr);
     342:	f8 01       	movw	r30, r16
     344:	60 81       	ld	r22, Z
     346:	89 e0       	ldi	r24, 0x09	; 9
     348:	20 df       	rcall	.-448    	; 0x18a <APP_dataSend>
    break;
     34a:	25 c0       	rjmp	.+74     	; 0x396 <APP_dataRecv+0x128>
     * Therefore, it is presumed the REQUEST message
     * will be sent with the server-assigned adress,
     * so the server can set their adress as in use
     * in the routing table.
     */
    routeTable[ind->srcAddr].in_use = true;
     34c:	d8 01       	movw	r26, r16
     34e:	8d 91       	ld	r24, X+
     350:	9c 91       	ld	r25, X
     352:	fc 01       	movw	r30, r24
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	e8 0f       	add	r30, r24
     35a:	f9 1f       	adc	r31, r25
     35c:	ee 0f       	add	r30, r30
     35e:	ff 1f       	adc	r31, r31
     360:	ef 56       	subi	r30, 0x6F	; 111
     362:	fd 4f       	sbci	r31, 0xFD	; 253
     364:	81 e0       	ldi	r24, 0x01	; 1
    HAL_UartWriteString("Accepted client on addr.: ");
     366:	85 83       	std	Z+5, r24	; 0x05
     368:	86 e2       	ldi	r24, 0x26	; 38
     36a:	92 e0       	ldi	r25, 0x02	; 2
    HAL_UartWriteString(ind->srcAddr);
     36c:	52 d1       	rcall	.+676    	; 0x612 <HAL_UartWriteString>
     36e:	f8 01       	movw	r30, r16
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
    APP_dataSend(APP_ACK, ind->srcAddr);
     374:	4e d1       	rcall	.+668    	; 0x612 <HAL_UartWriteString>
     376:	d8 01       	movw	r26, r16
     378:	6c 91       	ld	r22, X
     37a:	81 e0       	ldi	r24, 0x01	; 1
    break;
     37c:	06 df       	rcall	.-500    	; 0x18a <APP_dataSend>
  case APP_ACK:
    APP_dataSend(REQUEST_DATA, routeTablePtr);
     37e:	0b c0       	rjmp	.+22     	; 0x396 <APP_dataRecv+0x128>
     380:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <__data_end>
     384:	8b e0       	ldi	r24, 0x0B	; 11
    break;
     386:	01 df       	rcall	.-510    	; 0x18a <APP_dataSend>
  default:
    HAL_UartWriteString("Unknown msg type: ");
     388:	06 c0       	rjmp	.+12     	; 0x396 <APP_dataRecv+0x128>
     38a:	81 e4       	ldi	r24, 0x41	; 65
     38c:	92 e0       	ldi	r25, 0x02	; 2
    HAL_UartWriteByte(recv->msgType);
     38e:	41 d1       	rcall	.+642    	; 0x612 <HAL_UartWriteString>
     390:	f7 01       	movw	r30, r14
     392:	81 81       	ldd	r24, Z+1	; 0x01
    break;
  }
#endif

#ifdef DEBUG_PRINT
  HAL_UartWriteByte('\n');
     394:	17 d1       	rcall	.+558    	; 0x5c4 <HAL_UartWriteByte>
     396:	8a e0       	ldi	r24, 0x0A	; 10
  HAL_UartWriteString("To address: ");
     398:	15 d1       	rcall	.+554    	; 0x5c4 <HAL_UartWriteByte>
     39a:	84 e5       	ldi	r24, 0x54	; 84
     39c:	92 e0       	ldi	r25, 0x02	; 2
  HAL_UartWriteByte(ind->dstAddr >> 8);
     39e:	39 d1       	rcall	.+626    	; 0x612 <HAL_UartWriteString>
     3a0:	d8 01       	movw	r26, r16
     3a2:	13 96       	adiw	r26, 0x03	; 3
     3a4:	8c 91       	ld	r24, X
  HAL_UartWriteByte(ind->dstAddr);
     3a6:	0e d1       	rcall	.+540    	; 0x5c4 <HAL_UartWriteByte>
     3a8:	f8 01       	movw	r30, r16
     3aa:	82 81       	ldd	r24, Z+2	; 0x02
  HAL_UartWriteByte('\n');
     3ac:	0b d1       	rcall	.+534    	; 0x5c4 <HAL_UartWriteByte>
     3ae:	8a e0       	ldi	r24, 0x0A	; 10
  HAL_UartWriteString("From address: ");
     3b0:	09 d1       	rcall	.+530    	; 0x5c4 <HAL_UartWriteByte>
     3b2:	81 e6       	ldi	r24, 0x61	; 97
     3b4:	92 e0       	ldi	r25, 0x02	; 2
  HAL_UartWriteByte(ind->srcAddr >> 8);
     3b6:	2d d1       	rcall	.+602    	; 0x612 <HAL_UartWriteString>
     3b8:	d8 01       	movw	r26, r16
     3ba:	11 96       	adiw	r26, 0x01	; 1
  HAL_UartWriteByte(ind->srcAddr);
     3bc:	8c 91       	ld	r24, X
     3be:	02 d1       	rcall	.+516    	; 0x5c4 <HAL_UartWriteByte>
     3c0:	f8 01       	movw	r30, r16
  HAL_UartWriteByte('\n');
     3c2:	80 81       	ld	r24, Z
     3c4:	ff d0       	rcall	.+510    	; 0x5c4 <HAL_UartWriteByte>
  HAL_UartWriteString("Message type: ");
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	fd d0       	rcall	.+506    	; 0x5c4 <HAL_UartWriteByte>
     3ca:	80 e7       	ldi	r24, 0x70	; 112
  HAL_UartWriteByte(recv->msgType);
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	21 d1       	rcall	.+578    	; 0x612 <HAL_UartWriteString>
     3d0:	d7 01       	movw	r26, r14
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	8c 91       	ld	r24, X
  HAL_UartWriteByte('\n');
     3d6:	f6 d0       	rcall	.+492    	; 0x5c4 <HAL_UartWriteByte>
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	f4 d0       	rcall	.+488    	; 0x5c4 <HAL_UartWriteByte>
  HAL_UartWriteString("Size: ");
     3dc:	8f e7       	ldi	r24, 0x7F	; 127
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	18 d1       	rcall	.+560    	; 0x612 <HAL_UartWriteString>
     3e2:	f8 01       	movw	r30, r16
  HAL_UartWriteByte(ind->size);
     3e4:	81 85       	ldd	r24, Z+9	; 0x09
     3e6:	ee d0       	rcall	.+476    	; 0x5c4 <HAL_UartWriteByte>
     3e8:	8a e0       	ldi	r24, 0x0A	; 10
  HAL_UartWriteByte('\n');
     3ea:	ec d0       	rcall	.+472    	; 0x5c4 <HAL_UartWriteByte>
     3ec:	86 e8       	ldi	r24, 0x86	; 134
     3ee:	92 e0       	ldi	r25, 0x02	; 2
  HAL_UartWriteString("Payload: ");
     3f0:	10 d1       	rcall	.+544    	; 0x612 <HAL_UartWriteString>
     3f2:	d8 01       	movw	r26, r16
     3f4:	19 96       	adiw	r26, 0x09	; 9
  for (int i = 0; i < ind->size; i++) {
     3f6:	8c 91       	ld	r24, X
     3f8:	88 23       	and	r24, r24
     3fa:	91 f0       	breq	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3fc:	c0 e0       	ldi	r28, 0x00	; 0
     3fe:	d0 e0       	ldi	r29, 0x00	; 0
     400:	d7 01       	movw	r26, r14
     402:	13 96       	adiw	r26, 0x03	; 3
    HAL_UartWriteByte(recv->data[i]);
     404:	ed 91       	ld	r30, X+
     406:	fc 91       	ld	r31, X
     408:	14 97       	sbiw	r26, 0x04	; 4
     40a:	ec 0f       	add	r30, r28
     40c:	fd 1f       	adc	r31, r29
     40e:	80 81       	ld	r24, Z
     410:	d9 d0       	rcall	.+434    	; 0x5c4 <HAL_UartWriteByte>
     412:	21 96       	adiw	r28, 0x01	; 1
     414:	f8 01       	movw	r30, r16
     416:	81 85       	ldd	r24, Z+9	; 0x09
  HAL_UartWriteByte('\n');
  HAL_UartWriteString("Size: ");
  HAL_UartWriteByte(ind->size);
  HAL_UartWriteByte('\n');
  HAL_UartWriteString("Payload: ");
  for (int i = 0; i < ind->size; i++) {
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	c8 17       	cp	r28, r24
     41c:	d9 07       	cpc	r29, r25
     41e:	84 f3       	brlt	.-32     	; 0x400 <__LOCK_REGION_LENGTH__>
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	d0 d0       	rcall	.+416    	; 0x5c4 <HAL_UartWriteByte>
     424:	81 e0       	ldi	r24, 0x01	; 1
    HAL_UartWriteByte(recv->data[i]);
  }
  HAL_UartWriteByte('\n');
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
#endif

  return true;
}
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	08 95       	ret

00000434 <APP_init>:
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	c7 d1       	rcall	.+910    	; 0x7c8 <NWK_SetAddr>
     43a:	80 e8       	ldi	r24, 0x80	; 128
  (void)timer;
}

void APP_init(void) {
  NWK_SetAddr(APP_ADDR);
  NWK_SetPanId(APP_PANID);
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	cb d1       	rcall	.+918    	; 0x7d6 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     440:	8f e0       	ldi	r24, 0x0F	; 15
     442:	0e 94 0f 0c 	call	0x181e	; 0x181e <PHY_SetChannel>
  PHY_SetRxState(true);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 0b 0c 	call	0x1816	; 0x1816 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, APP_dataRecv);
     44c:	67 e3       	ldi	r22, 0x37	; 55
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	c8 d1       	rcall	.+912    	; 0x7e4 <NWK_OpenEndpoint>
  HAL_BoardInit();

  timer.interval = APP_FLUSH_TIMER_INTERVAL;
  timer.mode = SYS_TIMER_INTERVAL_MODE;
  timer.handler = APP_timerHandler;
  dataReq.data = dataReqBuffer;
     454:	81 e9       	ldi	r24, 0x91	; 145
     456:	98 e0       	ldi	r25, 0x08	; 8
     458:	90 93 09 09 	sts	0x0909, r25	; 0x800909 <dataReq+0xb>
     45c:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <dataReq+0xa>
     460:	08 95       	ret

00000462 <main>:
		break;
	}
}

int main(void) {
	SYS_Init();
     462:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <SYS_Init>
	HAL_UartInit(38400);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	76 e9       	ldi	r23, 0x96	; 150
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	55 d0       	rcall	.+170    	; 0x51a <HAL_UartInit>

static void APP_TaskHandler(void) {
	switch (appState) {
		case INIT: {
			APP_init();
			appState = IDLE;
     470:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	SYS_Init();
	HAL_UartInit(38400);

	while (1) {
		SYS_TaskHandler();
     472:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SYS_TaskHandler>
		HAL_UartTaskHandler();
     476:	4e d1       	rcall	.+668    	; 0x714 <HAL_UartTaskHandler>
#include "sys.h"

static AppState_t appState;

static void APP_TaskHandler(void) {
	switch (appState) {
     478:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <appState>
     47c:	81 11       	cpse	r24, r1
		case INIT: {
			APP_init();
     47e:	f9 cf       	rjmp	.-14     	; 0x472 <main+0x10>
     480:	d9 df       	rcall	.-78     	; 0x434 <APP_init>
			appState = IDLE;
     482:	c0 93 0f 09 	sts	0x090F, r28	; 0x80090f <appState>
     486:	f5 cf       	rjmp	.-22     	; 0x472 <main+0x10>

00000488 <HAL_Init>:
     488:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	a8 95       	wdr
     490:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     494:	88 61       	ori	r24, 0x18	; 24
     496:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     49a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	e1 e6       	ldi	r30, 0x61	; 97
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 e8       	ldi	r24, 0x80	; 128
     4a6:	80 83       	st	Z, r24
     4a8:	10 82       	st	Z, r1
     4aa:	78 94       	sei
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <HAL_TimerInit>
     4ae:	08 95       	ret

000004b0 <HAL_TimerInit>:
     4b0:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <halTimerIrqCount>
     4b4:	80 e1       	ldi	r24, 0x10	; 16
     4b6:	97 e2       	ldi	r25, 0x27	; 39
     4b8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     4bc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     4c0:	e1 ea       	ldi	r30, 0xA1	; 161
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	88 e0       	ldi	r24, 0x08	; 8
     4c6:	80 83       	st	Z, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	82 60       	ori	r24, 0x02	; 2
     4cc:	80 83       	st	Z, r24
     4ce:	e2 e7       	ldi	r30, 0x72	; 114
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	80 83       	st	Z, r24
     4d8:	08 95       	ret

000004da <__vector_42>:
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	8f 93       	push	r24
     4e6:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <halTimerIrqCount>
     4ea:	8f 5f       	subi	r24, 0xFF	; 255
     4ec:	80 93 f7 1f 	sts	0x1FF7, r24	; 0x801ff7 <halTimerIrqCount>
     4f0:	8f 91       	pop	r24
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <__vector_13>:
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	8f 93       	push	r24
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <halSleepTimerEvent>
     50e:	8f 91       	pop	r24
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <HAL_UartInit>:
    rxFifo.bytes--;
  ATOMIC_SECTION_LEAVE
  PRAGMA(diag_default=Pa082);

  return byte;
}
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	aa 1f       	adc	r26, r26
     524:	bb 1f       	adc	r27, r27
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	aa 1f       	adc	r26, r26
     52c:	bb 1f       	adc	r27, r27
     52e:	9c 01       	movw	r18, r24
     530:	ad 01       	movw	r20, r26
     532:	22 0f       	add	r18, r18
     534:	33 1f       	adc	r19, r19
     536:	44 1f       	adc	r20, r20
     538:	55 1f       	adc	r21, r21
     53a:	22 0f       	add	r18, r18
     53c:	33 1f       	adc	r19, r19
     53e:	44 1f       	adc	r20, r20
     540:	55 1f       	adc	r21, r21
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	74 e2       	ldi	r23, 0x24	; 36
     546:	84 ef       	ldi	r24, 0xF4	; 244
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__udivmodsi4>
     54e:	ba 01       	movw	r22, r20
     550:	a9 01       	movw	r20, r18
     552:	41 50       	subi	r20, 0x01	; 1
     554:	51 09       	sbc	r21, r1
     556:	61 09       	sbc	r22, r1
     558:	71 09       	sbc	r23, r1
     55a:	bb 27       	eor	r27, r27
     55c:	a7 2f       	mov	r26, r23
     55e:	96 2f       	mov	r25, r22
     560:	85 2f       	mov	r24, r21
     562:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     566:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     570:	88 e9       	ldi	r24, 0x98	; 152
     572:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     57c:	ef e3       	ldi	r30, 0x3F	; 63
     57e:	fc e0       	ldi	r31, 0x0C	; 12
     580:	8e ea       	ldi	r24, 0xAE	; 174
     582:	9a e0       	ldi	r25, 0x0A	; 10
     584:	91 87       	std	Z+9, r25	; 0x09
     586:	80 87       	std	Z+8, r24	; 0x08
     588:	80 e9       	ldi	r24, 0x90	; 144
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	95 83       	std	Z+5, r25	; 0x05
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	17 82       	std	Z+7, r1	; 0x07
     592:	16 82       	std	Z+6, r1	; 0x06
     594:	11 82       	std	Z+1, r1	; 0x01
     596:	10 82       	st	Z, r1
     598:	13 82       	std	Z+3, r1	; 0x03
     59a:	12 82       	std	Z+2, r1	; 0x02
     59c:	e4 ea       	ldi	r30, 0xA4	; 164
     59e:	fa e0       	ldi	r31, 0x0A	; 10
     5a0:	23 e1       	ldi	r18, 0x13	; 19
     5a2:	39 e0       	ldi	r19, 0x09	; 9
     5a4:	31 87       	std	Z+9, r19	; 0x09
     5a6:	20 87       	std	Z+8, r18	; 0x08
     5a8:	95 83       	std	Z+5, r25	; 0x05
     5aa:	84 83       	std	Z+4, r24	; 0x04
     5ac:	17 82       	std	Z+7, r1	; 0x07
     5ae:	16 82       	std	Z+6, r1	; 0x06
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1
     5b4:	13 82       	std	Z+3, r1	; 0x03
     5b6:	12 82       	std	Z+2, r1	; 0x02
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <udrEmpty>
     5be:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <newData>
     5c2:	08 95       	ret

000005c4 <HAL_UartWriteByte>:
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ef e3       	ldi	r30, 0x3F	; 63
     5ca:	fc e0       	ldi	r31, 0x0C	; 12
     5cc:	26 81       	ldd	r18, Z+6	; 0x06
     5ce:	37 81       	ldd	r19, Z+7	; 0x07
     5d0:	64 81       	ldd	r22, Z+4	; 0x04
     5d2:	75 81       	ldd	r23, Z+5	; 0x05
     5d4:	26 17       	cp	r18, r22
     5d6:	37 07       	cpc	r19, r23
     5d8:	c9 f0       	breq	.+50     	; 0x60c <HAL_UartWriteByte+0x48>
     5da:	c0 85       	ldd	r28, Z+8	; 0x08
     5dc:	d1 85       	ldd	r29, Z+9	; 0x09
     5de:	42 81       	ldd	r20, Z+2	; 0x02
     5e0:	53 81       	ldd	r21, Z+3	; 0x03
     5e2:	da 01       	movw	r26, r20
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	b3 83       	std	Z+3, r27	; 0x03
     5e8:	a2 83       	std	Z+2, r26	; 0x02
     5ea:	fe 01       	movw	r30, r28
     5ec:	e4 0f       	add	r30, r20
     5ee:	f5 1f       	adc	r31, r21
     5f0:	80 83       	st	Z, r24
     5f2:	6a 17       	cp	r22, r26
     5f4:	7b 07       	cpc	r23, r27
     5f6:	21 f4       	brne	.+8      	; 0x600 <HAL_UartWriteByte+0x3c>
     5f8:	10 92 42 0c 	sts	0x0C42, r1	; 0x800c42 <txFifo+0x3>
     5fc:	10 92 41 0c 	sts	0x0C41, r1	; 0x800c41 <txFifo+0x2>
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	30 93 46 0c 	sts	0x0C46, r19	; 0x800c46 <txFifo+0x7>
     608:	20 93 45 0c 	sts	0x0C45, r18	; 0x800c45 <txFifo+0x6>
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <HAL_UartWriteString>:
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	ec 01       	movw	r28, r24
     618:	88 81       	ld	r24, Y
     61a:	88 23       	and	r24, r24
     61c:	29 f0       	breq	.+10     	; 0x628 <HAL_UartWriteString+0x16>
     61e:	21 96       	adiw	r28, 0x01	; 1
     620:	d1 df       	rcall	.-94     	; 0x5c4 <HAL_UartWriteByte>
     622:	89 91       	ld	r24, Y+
     624:	81 11       	cpse	r24, r1
     626:	fc cf       	rjmp	.-8      	; 0x620 <HAL_UartWriteString+0xe>
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	0b b6       	in	r0, 0x3b	; 59
     63a:	0f 92       	push	r0
     63c:	8f 93       	push	r24
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
  udrEmpty = true;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     648:	e9 ec       	ldi	r30, 0xC9	; 201
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	8f 7d       	andi	r24, 0xDF	; 223
     650:	80 83       	st	Z, r24
}
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	8f 91       	pop	r24
     658:	0f 90       	pop	r0
     65a:	0b be       	out	0x3b, r0	; 59
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     666:	1f 92       	push	r1
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	0b b6       	in	r0, 0x3b	; 59
     672:	0f 92       	push	r0
     674:	2f 93       	push	r18
     676:	3f 93       	push	r19
     678:	4f 93       	push	r20
     67a:	5f 93       	push	r21
     67c:	6f 93       	push	r22
     67e:	7f 93       	push	r23
     680:	8f 93       	push	r24
     682:	9f 93       	push	r25
     684:	af 93       	push	r26
     686:	bf 93       	push	r27
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     68c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     690:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     694:	8c 71       	andi	r24, 0x1C	; 28
     696:	59 f5       	brne	.+86     	; 0x6ee <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     698:	e4 ea       	ldi	r30, 0xA4	; 164
     69a:	fa e0       	ldi	r31, 0x0A	; 10
     69c:	46 81       	ldd	r20, Z+6	; 0x06
     69e:	57 81       	ldd	r21, Z+7	; 0x07
     6a0:	84 81       	ldd	r24, Z+4	; 0x04
     6a2:	95 81       	ldd	r25, Z+5	; 0x05
     6a4:	48 17       	cp	r20, r24
     6a6:	59 07       	cpc	r21, r25
     6a8:	11 f1       	breq	.+68     	; 0x6ee <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     6aa:	40 85       	ldd	r20, Z+8	; 0x08
     6ac:	51 85       	ldd	r21, Z+9	; 0x09
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
     6b2:	bc 01       	movw	r22, r24
     6b4:	6f 5f       	subi	r22, 0xFF	; 255
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	73 83       	std	Z+3, r23	; 0x03
     6ba:	62 83       	std	Z+2, r22	; 0x02
     6bc:	da 01       	movw	r26, r20
     6be:	a8 0f       	add	r26, r24
     6c0:	b9 1f       	adc	r27, r25
     6c2:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     6c4:	22 81       	ldd	r18, Z+2	; 0x02
     6c6:	33 81       	ldd	r19, Z+3	; 0x03
     6c8:	84 81       	ldd	r24, Z+4	; 0x04
     6ca:	95 81       	ldd	r25, Z+5	; 0x05
     6cc:	28 17       	cp	r18, r24
     6ce:	39 07       	cpc	r19, r25
     6d0:	21 f4       	brne	.+8      	; 0x6da <__vector_36+0x74>
      rxFifo.tail = 0;
     6d2:	10 92 a7 0a 	sts	0x0AA7, r1	; 0x800aa7 <rxFifo+0x3>
     6d6:	10 92 a6 0a 	sts	0x0AA6, r1	; 0x800aa6 <rxFifo+0x2>
    rxFifo.bytes++;
     6da:	e4 ea       	ldi	r30, 0xA4	; 164
     6dc:	fa e0       	ldi	r31, 0x0A	; 10
     6de:	86 81       	ldd	r24, Z+6	; 0x06
     6e0:	97 81       	ldd	r25, Z+7	; 0x07
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	97 83       	std	Z+7, r25	; 0x07
     6e6:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     6ee:	ff 91       	pop	r31
     6f0:	ef 91       	pop	r30
     6f2:	bf 91       	pop	r27
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	7f 91       	pop	r23
     6fc:	6f 91       	pop	r22
     6fe:	5f 91       	pop	r21
     700:	4f 91       	pop	r20
     702:	3f 91       	pop	r19
     704:	2f 91       	pop	r18
     706:	0f 90       	pop	r0
     708:	0b be       	out	0x3b, r0	; 59
     70a:	0f 90       	pop	r0
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	0f 90       	pop	r0
     710:	1f 90       	pop	r1
     712:	18 95       	reti

00000714 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     714:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <txFifo+0x6>
     718:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <txFifo+0x7>
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	69 f1       	breq	.+90     	; 0x77a <HAL_UartTaskHandler+0x66>
     720:	20 91 12 09 	lds	r18, 0x0912	; 0x800912 <udrEmpty>
     724:	22 23       	and	r18, r18
     726:	49 f1       	breq	.+82     	; 0x77a <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     728:	ef e3       	ldi	r30, 0x3F	; 63
     72a:	fc e0       	ldi	r31, 0x0C	; 12
     72c:	60 85       	ldd	r22, Z+8	; 0x08
     72e:	71 85       	ldd	r23, Z+9	; 0x09
     730:	20 81       	ld	r18, Z
     732:	31 81       	ldd	r19, Z+1	; 0x01
     734:	a9 01       	movw	r20, r18
     736:	4f 5f       	subi	r20, 0xFF	; 255
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	51 83       	std	Z+1, r21	; 0x01
     73c:	40 83       	st	Z, r20
     73e:	db 01       	movw	r26, r22
     740:	a2 0f       	add	r26, r18
     742:	b3 1f       	adc	r27, r19
     744:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     746:	64 81       	ldd	r22, Z+4	; 0x04
     748:	75 81       	ldd	r23, Z+5	; 0x05
     74a:	46 17       	cp	r20, r22
     74c:	57 07       	cpc	r21, r23
     74e:	21 f4       	brne	.+8      	; 0x758 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     750:	10 92 40 0c 	sts	0x0C40, r1	; 0x800c40 <txFifo+0x1>
     754:	10 92 3f 0c 	sts	0x0C3F, r1	; 0x800c3f <txFifo>
    txFifo.bytes--;
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <txFifo+0x7>
     75e:	80 93 45 0c 	sts	0x0C45, r24	; 0x800c45 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     762:	9f b7       	in	r25, 0x3f	; 63
     764:	f8 94       	cli
      UDRx = byte;
     766:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     76a:	e9 ec       	ldi	r30, 0xC9	; 201
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	80 62       	ori	r24, 0x20	; 32
     772:	80 83       	st	Z, r24
      udrEmpty = false;
     774:	10 92 12 09 	sts	0x0912, r1	; 0x800912 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     778:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     77a:	2f b7       	in	r18, 0x3f	; 63
     77c:	f8 94       	cli
      new = newData;
     77e:	90 91 11 09 	lds	r25, 0x0911	; 0x800911 <newData>
      newData = false;
     782:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <newData>
      bytes = rxFifo.bytes;
     786:	40 91 aa 0a 	lds	r20, 0x0AAA	; 0x800aaa <rxFifo+0x6>
     78a:	50 91 ab 0a 	lds	r21, 0x0AAB	; 0x800aab <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     78e:	2f bf       	out	0x3f, r18	; 63

    if (new)
     790:	99 23       	and	r25, r25
     792:	11 f0       	breq	.+4      	; 0x798 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     794:	ca 01       	movw	r24, r20
     796:	f7 cc       	rjmp	.-1554   	; 0x186 <HAL_UartBytesReceived>
     798:	08 95       	ret

0000079a <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     79a:	e8 ef       	ldi	r30, 0xF8	; 248
     79c:	ff e1       	ldi	r31, 0x1F	; 31
     79e:	14 82       	std	Z+4, r1	; 0x04
     7a0:	15 82       	std	Z+5, r1	; 0x05
     7a2:	11 82       	std	Z+1, r1	; 0x01
     7a4:	10 82       	st	Z, r1
     7a6:	17 a2       	std	Z+39, r1	; 0x27
     7a8:	16 a2       	std	Z+38, r1	; 0x26
     7aa:	ee ef       	ldi	r30, 0xFE	; 254
     7ac:	ff e1       	ldi	r31, 0x1F	; 31
     7ae:	8e e1       	ldi	r24, 0x1E	; 30
     7b0:	90 e2       	ldi	r25, 0x20	; 32
     7b2:	11 92       	st	Z+, r1
     7b4:	11 92       	st	Z+, r1
     7b6:	e8 17       	cp	r30, r24
     7b8:	f9 07       	cpc	r31, r25
     7ba:	d9 f7       	brne	.-10     	; 0x7b2 <NWK_Init+0x18>
     7bc:	42 d6       	rcall	.+3204   	; 0x1442 <nwkTxInit>
     7be:	60 d3       	rcall	.+1728   	; 0xe80 <nwkRxInit>
     7c0:	0d d1       	rcall	.+538    	; 0x9dc <nwkFrameInit>
     7c2:	40 d0       	rcall	.+128    	; 0x844 <nwkDataReqInit>
     7c4:	92 c1       	rjmp	.+804    	; 0xaea <nwkRouteInit>
     7c6:	08 95       	ret

000007c8 <NWK_SetAddr>:
     7c8:	90 93 f9 1f 	sts	0x1FF9, r25	; 0x801ff9 <nwkIb+0x1>
     7cc:	80 93 f8 1f 	sts	0x1FF8, r24	; 0x801ff8 <nwkIb>
     7d0:	0c 94 25 0c 	jmp	0x184a	; 0x184a <PHY_SetShortAddr>
     7d4:	08 95       	ret

000007d6 <NWK_SetPanId>:
     7d6:	90 93 fb 1f 	sts	0x1FFB, r25	; 0x801ffb <nwkIb+0x3>
     7da:	80 93 fa 1f 	sts	0x1FFA, r24	; 0x801ffa <nwkIb+0x2>
     7de:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <PHY_SetPanId>
     7e2:	08 95       	ret

000007e4 <NWK_OpenEndpoint>:
     7e4:	e8 2f       	mov	r30, r24
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	e2 50       	subi	r30, 0x02	; 2
     7ee:	f0 4e       	sbci	r31, 0xE0	; 224
     7f0:	71 83       	std	Z+1, r23	; 0x01
     7f2:	60 83       	st	Z, r22
     7f4:	08 95       	ret

000007f6 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     7f6:	8b d3       	rcall	.+1814   	; 0xf0e <nwkRxTaskHandler>
  nwkTxTaskHandler();
     7f8:	20 d7       	rcall	.+3648   	; 0x163a <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     7fa:	4d c0       	rjmp	.+154    	; 0x896 <nwkDataReqTaskHandler>
     7fc:	08 95       	ret

000007fe <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7fe:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <nwkDataReqQueue>
     802:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <nwkDataReqQueue+0x1>
     806:	30 97       	sbiw	r30, 0x00	; 0
     808:	d9 f0       	breq	.+54     	; 0x840 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     80a:	22 81       	ldd	r18, Z+2	; 0x02
     80c:	33 81       	ldd	r19, Z+3	; 0x03
     80e:	82 17       	cp	r24, r18
     810:	93 07       	cpc	r25, r19
     812:	89 f4       	brne	.+34     	; 0x836 <nwkDataReqTxConf+0x38>
     814:	05 c0       	rjmp	.+10     	; 0x820 <nwkDataReqTxConf+0x22>
     816:	22 81       	ldd	r18, Z+2	; 0x02
     818:	33 81       	ldd	r19, Z+3	; 0x03
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	59 f4       	brne	.+22     	; 0x836 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     820:	dc 01       	movw	r26, r24
     822:	ad 57       	subi	r26, 0x7D	; 125
     824:	bf 4f       	sbci	r27, 0xFF	; 255
     826:	2c 91       	ld	r18, X
     828:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	2c 91       	ld	r18, X
     82e:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     830:	22 e0       	ldi	r18, 0x02	; 2
     832:	24 83       	std	Z+4, r18	; 0x04
      break;
     834:	05 c0       	rjmp	.+10     	; 0x840 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     836:	01 90       	ld	r0, Z+
     838:	f0 81       	ld	r31, Z
     83a:	e0 2d       	mov	r30, r0
     83c:	30 97       	sbiw	r30, 0x00	; 0
     83e:	59 f7       	brne	.-42     	; 0x816 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     840:	11 c1       	rjmp	.+546    	; 0xa64 <nwkFrameFree>
     842:	08 95       	ret

00000844 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     844:	10 92 4a 0c 	sts	0x0C4A, r1	; 0x800c4a <nwkDataReqQueue+0x1>
     848:	10 92 49 0c 	sts	0x0C49, r1	; 0x800c49 <nwkDataReqQueue>
     84c:	08 95       	ret

0000084e <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     84e:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     850:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     852:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     854:	13 82       	std	Z+3, r1	; 0x03
     856:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     858:	a8 ef       	ldi	r26, 0xF8	; 248
     85a:	bf e1       	ldi	r27, 0x1F	; 31
     85c:	96 96       	adiw	r26, 0x26	; 38
     85e:	8d 91       	ld	r24, X+
     860:	9c 91       	ld	r25, X
     862:	97 97       	sbiw	r26, 0x27	; 39
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	97 96       	adiw	r26, 0x27	; 39
     868:	9c 93       	st	X, r25
     86a:	8e 93       	st	-X, r24
     86c:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     86e:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <nwkDataReqQueue>
     872:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <nwkDataReqQueue+0x1>
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	39 f4       	brne	.+14     	; 0x888 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     87a:	11 82       	std	Z+1, r1	; 0x01
     87c:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     87e:	f0 93 4a 0c 	sts	0x0C4A, r31	; 0x800c4a <nwkDataReqQueue+0x1>
     882:	e0 93 49 0c 	sts	0x0C49, r30	; 0x800c49 <nwkDataReqQueue>
     886:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     888:	91 83       	std	Z+1, r25	; 0x01
     88a:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     88c:	f0 93 4a 0c 	sts	0x0C4A, r31	; 0x800c4a <nwkDataReqQueue+0x1>
     890:	e0 93 49 0c 	sts	0x0C49, r30	; 0x800c49 <nwkDataReqQueue>
     894:	08 95       	ret

00000896 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     89e:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <nwkDataReqQueue>
     8a2:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <nwkDataReqQueue+0x1>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	09 f4       	brne	.+2      	; 0x8ac <nwkDataReqTaskHandler+0x16>
     8aa:	93 c0       	rjmp	.+294    	; 0x9d2 <nwkDataReqTaskHandler+0x13c>
     8ac:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	88 23       	and	r24, r24
     8b2:	21 f0       	breq	.+8      	; 0x8bc <nwkDataReqTaskHandler+0x26>
     8b4:	82 30       	cpi	r24, 0x02	; 2
     8b6:	09 f4       	brne	.+2      	; 0x8ba <nwkDataReqTaskHandler+0x24>
     8b8:	66 c0       	rjmp	.+204    	; 0x986 <nwkDataReqTaskHandler+0xf0>
     8ba:	85 c0       	rjmp	.+266    	; 0x9c6 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     8bc:	9a d0       	rcall	.+308    	; 0x9f2 <nwkFrameAlloc>
     8be:	8c 01       	movw	r16, r24
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	21 f4       	brne	.+8      	; 0x8cc <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     8c8:	8f 87       	std	Y+15, r24	; 0x0f
     8ca:	83 c0       	rjmp	.+262    	; 0x9d2 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     8cc:	9b 83       	std	Y+3, r25	; 0x03
     8ce:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     8d4:	f8 01       	movw	r30, r16
     8d6:	e9 57       	subi	r30, 0x79	; 121
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	89 85       	ldd	r24, Y+9	; 0x09
     8e6:	82 fb       	bst	r24, 2
     8e8:	88 27       	eor	r24, r24
     8ea:	80 f9       	bld	r24, 0
     8ec:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     8ee:	99 85       	ldd	r25, Y+9	; 0x09
     8f0:	d8 01       	movw	r26, r16
     8f2:	1b 96       	adiw	r26, 0x0b	; 11
     8f4:	8c 91       	ld	r24, X
     8f6:	1b 97       	sbiw	r26, 0x0b	; 11
     8f8:	90 fb       	bst	r25, 0
     8fa:	80 f9       	bld	r24, 0
     8fc:	1b 96       	adiw	r26, 0x0b	; 11
     8fe:	8c 93       	st	X, r24
     900:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     902:	99 85       	ldd	r25, Y+9	; 0x09
     904:	93 fb       	bst	r25, 3
     906:	99 27       	eor	r25, r25
     908:	90 f9       	bld	r25, 0
     90a:	90 fb       	bst	r25, 0
     90c:	82 f9       	bld	r24, 2
     90e:	1b 96       	adiw	r26, 0x0b	; 11
     910:	8c 93       	st	X, r24
     912:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     914:	e8 ef       	ldi	r30, 0xF8	; 248
     916:	ff e1       	ldi	r31, 0x1F	; 31
     918:	84 81       	ldd	r24, Z+4	; 0x04
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	84 83       	std	Z+4, r24	; 0x04
     91e:	1c 96       	adiw	r26, 0x0c	; 12
     920:	8c 93       	st	X, r24
     922:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	1e 96       	adiw	r26, 0x0e	; 14
     92a:	9c 93       	st	X, r25
     92c:	8e 93       	st	-X, r24
     92e:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     930:	8d 81       	ldd	r24, Y+5	; 0x05
     932:	9e 81       	ldd	r25, Y+6	; 0x06
     934:	50 96       	adiw	r26, 0x10	; 16
     936:	9c 93       	st	X, r25
     938:	8e 93       	st	-X, r24
     93a:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     93c:	88 85       	ldd	r24, Y+8	; 0x08
     93e:	98 2f       	mov	r25, r24
     940:	9f 70       	andi	r25, 0x0F	; 15
     942:	51 96       	adiw	r26, 0x11	; 17
     944:	8c 91       	ld	r24, X
     946:	51 97       	sbiw	r26, 0x11	; 17
     948:	80 7f       	andi	r24, 0xF0	; 240
     94a:	89 2b       	or	r24, r25
     94c:	51 96       	adiw	r26, 0x11	; 17
     94e:	8c 93       	st	X, r24
     950:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     952:	9f 81       	ldd	r25, Y+7	; 0x07
     954:	92 95       	swap	r25
     956:	90 7f       	andi	r25, 0xF0	; 240
     958:	8f 70       	andi	r24, 0x0F	; 15
     95a:	89 2b       	or	r24, r25
     95c:	51 96       	adiw	r26, 0x11	; 17
     95e:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     960:	f8 01       	movw	r30, r16
     962:	ef 57       	subi	r30, 0x7F	; 127
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	4c 85       	ldd	r20, Y+12	; 0x0c
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	6a 85       	ldd	r22, Y+10	; 0x0a
     96c:	7b 85       	ldd	r23, Y+11	; 0x0b
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <memcpy>
  frame->size += req->size;
     976:	f8 01       	movw	r30, r16
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	8c 85       	ldd	r24, Y+12	; 0x0c
     97c:	89 0f       	add	r24, r25
     97e:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     980:	c8 01       	movw	r24, r16
     982:	82 d5       	rcall	.+2820   	; 0x1488 <nwkTxFrame>
     984:	26 c0       	rjmp	.+76     	; 0x9d2 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     986:	ec 17       	cp	r30, r28
     988:	fd 07       	cpc	r31, r29
     98a:	41 f4       	brne	.+16     	; 0x99c <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <nwkDataReqQueue+0x1>
     994:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <nwkDataReqQueue>
     998:	0a c0       	rjmp	.+20     	; 0x9ae <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     99a:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     99c:	80 81       	ld	r24, Z
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	8c 17       	cp	r24, r28
     9a2:	9d 07       	cpc	r25, r29
     9a4:	d1 f7       	brne	.-12     	; 0x99a <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     9a6:	88 81       	ld	r24, Y
     9a8:	99 81       	ldd	r25, Y+1	; 0x01
     9aa:	91 83       	std	Z+1, r25	; 0x01
     9ac:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     9ae:	e8 ef       	ldi	r30, 0xF8	; 248
     9b0:	ff e1       	ldi	r31, 0x1F	; 31
     9b2:	86 a1       	ldd	r24, Z+38	; 0x26
     9b4:	97 a1       	ldd	r25, Z+39	; 0x27
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	97 a3       	std	Z+39, r25	; 0x27
     9ba:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     9bc:	ed 85       	ldd	r30, Y+13	; 0x0d
     9be:	fe 85       	ldd	r31, Y+14	; 0x0e
     9c0:	ce 01       	movw	r24, r28
     9c2:	19 95       	eicall
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     9c6:	09 90       	ld	r0, Y+
     9c8:	d8 81       	ld	r29, Y
     9ca:	c0 2d       	mov	r28, r0
     9cc:	20 97       	sbiw	r28, 0x00	; 0
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <nwkDataReqTaskHandler+0x13c>
     9d0:	6e cf       	rjmp	.-292    	; 0x8ae <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     9dc:	eb e4       	ldi	r30, 0x4B	; 75
     9de:	fc e0       	ldi	r31, 0x0C	; 12
     9e0:	89 e5       	ldi	r24, 0x59	; 89
     9e2:	9c e1       	ldi	r25, 0x1C	; 28
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     9e4:	10 82       	st	Z, r1
     9e6:	e7 57       	subi	r30, 0x77	; 119
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9ea:	e8 17       	cp	r30, r24
     9ec:	f9 07       	cpc	r31, r25
     9ee:	d1 f7       	brne	.-12     	; 0x9e4 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     9f0:	08 95       	ret

000009f2 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     9f2:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <nwkFrameFrames>
     9f6:	88 23       	and	r24, r24
     9f8:	59 f0       	breq	.+22     	; 0xa10 <nwkFrameAlloc+0x1e>
     9fa:	e4 ed       	ldi	r30, 0xD4	; 212
     9fc:	fc e0       	ldi	r31, 0x0C	; 12
     9fe:	69 e5       	ldi	r22, 0x59	; 89
     a00:	7c e1       	ldi	r23, 0x1C	; 28
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	ac 01       	movw	r20, r24
     a08:	20 81       	ld	r18, Z
     a0a:	21 11       	cpse	r18, r1
     a0c:	22 c0       	rjmp	.+68     	; 0xa52 <nwkFrameAlloc+0x60>
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <nwkFrameAlloc+0x22>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     a14:	69 e8       	ldi	r22, 0x89	; 137
     a16:	64 9f       	mul	r22, r20
     a18:	90 01       	movw	r18, r0
     a1a:	65 9f       	mul	r22, r21
     a1c:	30 0d       	add	r19, r0
     a1e:	11 24       	eor	r1, r1
     a20:	c9 01       	movw	r24, r18
     a22:	85 5b       	subi	r24, 0xB5	; 181
     a24:	93 4f       	sbci	r25, 0xF3	; 243
     a26:	fc 01       	movw	r30, r24
     a28:	11 92       	st	Z+, r1
     a2a:	6a 95       	dec	r22
     a2c:	e9 f7       	brne	.-6      	; 0xa28 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     a2e:	40 e1       	ldi	r20, 0x10	; 16
     a30:	fc 01       	movw	r30, r24
     a32:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     a34:	ef 57       	subi	r30, 0x7F	; 127
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	23 5a       	subi	r18, 0xA3	; 163
     a3a:	33 4f       	sbci	r19, 0xF3	; 243
     a3c:	31 83       	std	Z+1, r19	; 0x01
     a3e:	20 83       	st	Z, r18
      nwkIb.lock++;
     a40:	e8 ef       	ldi	r30, 0xF8	; 248
     a42:	ff e1       	ldi	r31, 0x1F	; 31
     a44:	26 a1       	ldd	r18, Z+38	; 0x26
     a46:	37 a1       	ldd	r19, Z+39	; 0x27
     a48:	2f 5f       	subi	r18, 0xFF	; 255
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	37 a3       	std	Z+39, r19	; 0x27
     a4e:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     a50:	08 95       	ret
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	e7 57       	subi	r30, 0x77	; 119
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     a58:	e6 17       	cp	r30, r22
     a5a:	f7 07       	cpc	r31, r23
     a5c:	a1 f6       	brne	.-88     	; 0xa06 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
}
     a62:	08 95       	ret

00000a64 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     a64:	fc 01       	movw	r30, r24
     a66:	10 82       	st	Z, r1
  nwkIb.lock--;
     a68:	e8 ef       	ldi	r30, 0xF8	; 248
     a6a:	ff e1       	ldi	r31, 0x1F	; 31
     a6c:	86 a1       	ldd	r24, Z+38	; 0x26
     a6e:	97 a1       	ldd	r25, Z+39	; 0x27
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	97 a3       	std	Z+39, r25	; 0x27
     a74:	86 a3       	std	Z+38, r24	; 0x26
     a76:	08 95       	ret

00000a78 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	41 f0       	breq	.+16     	; 0xa8c <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     a7c:	fc 01       	movw	r30, r24
     a7e:	e7 57       	subi	r30, 0x77	; 119
     a80:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a82:	8c e1       	ldi	r24, 0x1C	; 28
     a84:	e9 35       	cpi	r30, 0x59	; 89
     a86:	f8 07       	cpc	r31, r24
     a88:	18 f0       	brcs	.+6      	; 0xa90 <nwkFrameNext+0x18>
     a8a:	12 c0       	rjmp	.+36     	; 0xab0 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     a8c:	eb e4       	ldi	r30, 0x4B	; 75
     a8e:	fc e0       	ldi	r31, 0x0C	; 12
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a90:	80 81       	ld	r24, Z
     a92:	88 23       	and	r24, r24
     a94:	21 f0       	breq	.+8      	; 0xa9e <nwkFrameNext+0x26>
     a96:	0f c0       	rjmp	.+30     	; 0xab6 <nwkFrameNext+0x3e>
     a98:	80 81       	ld	r24, Z
     a9a:	81 11       	cpse	r24, r1
     a9c:	0f c0       	rjmp	.+30     	; 0xabc <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a9e:	e7 57       	subi	r30, 0x77	; 119
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	8c e1       	ldi	r24, 0x1C	; 28
     aa4:	e9 35       	cpi	r30, 0x59	; 89
     aa6:	f8 07       	cpc	r31, r24
     aa8:	b8 f3       	brcs	.-18     	; 0xa98 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	08 95       	ret
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     ab6:	8e 2f       	mov	r24, r30
     ab8:	9f 2f       	mov	r25, r31
     aba:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     abc:	8e 2f       	mov	r24, r30
     abe:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     ac0:	08 95       	ret

00000ac2 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     ac2:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     ac4:	dc 01       	movw	r26, r24
     ac6:	ad 57       	subi	r26, 0x7D	; 125
     ac8:	bf 4f       	sbci	r27, 0xFF	; 255
     aca:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     acc:	a8 ef       	ldi	r26, 0xF8	; 248
     ace:	bf e1       	ldi	r27, 0x1F	; 31
     ad0:	14 96       	adiw	r26, 0x04	; 4
     ad2:	9c 91       	ld	r25, X
     ad4:	14 97       	sbiw	r26, 0x04	; 4
     ad6:	9f 5f       	subi	r25, 0xFF	; 255
     ad8:	14 96       	adiw	r26, 0x04	; 4
     ada:	9c 93       	st	X, r25
     adc:	14 97       	sbiw	r26, 0x04	; 4
     ade:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     ae0:	8d 91       	ld	r24, X+
     ae2:	9c 91       	ld	r25, X
     ae4:	96 87       	std	Z+14, r25	; 0x0e
     ae6:	85 87       	std	Z+13, r24	; 0x0d
     ae8:	08 95       	ret

00000aea <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     aea:	aa e5       	ldi	r26, 0x5A	; 90
     aec:	bc e1       	ldi	r27, 0x1C	; 28
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	5f ef       	ldi	r21, 0xFF	; 255
     af6:	11 96       	adiw	r26, 0x01	; 1
     af8:	5c 93       	st	X, r21
     afa:	4e 93       	st	-X, r20
     afc:	fc 01       	movw	r30, r24
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	e8 1b       	sub	r30, r24
     b0c:	f9 0b       	sbc	r31, r25
     b0e:	e7 5a       	subi	r30, 0xA7	; 167
     b10:	f3 4e       	sbci	r31, 0xE3	; 227
     b12:	20 81       	ld	r18, Z
     b14:	2e 7f       	andi	r18, 0xFE	; 254
     b16:	20 83       	st	Z, r18
     b18:	14 96       	adiw	r26, 0x04	; 4
     b1a:	1c 92       	st	X, r1
     b1c:	14 97       	sbiw	r26, 0x04	; 4
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	17 96       	adiw	r26, 0x07	; 7
     b22:	84 36       	cpi	r24, 0x64	; 100
     b24:	91 05       	cpc	r25, r1
     b26:	39 f7       	brne	.-50     	; 0xaf6 <nwkRouteInit+0xc>
     b28:	08 95       	ret

00000b2a <NWK_RouteFindEntry>:
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	ea e5       	ldi	r30, 0x5A	; 90
     b34:	fc e1       	ldi	r31, 0x1C	; 28
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	06 2f       	mov	r16, r22
     b3c:	10 e0       	ldi	r17, 0x00	; 0
     b3e:	40 81       	ld	r20, Z
     b40:	51 81       	ldd	r21, Z+1	; 0x01
     b42:	48 17       	cp	r20, r24
     b44:	59 07       	cpc	r21, r25
     b46:	b1 f4       	brne	.+44     	; 0xb74 <NWK_RouteFindEntry+0x4a>
     b48:	d9 01       	movw	r26, r18
     b4a:	aa 0f       	add	r26, r26
     b4c:	bb 1f       	adc	r27, r27
     b4e:	aa 0f       	add	r26, r26
     b50:	bb 1f       	adc	r27, r27
     b52:	aa 0f       	add	r26, r26
     b54:	bb 1f       	adc	r27, r27
     b56:	a2 1b       	sub	r26, r18
     b58:	b3 0b       	sbc	r27, r19
     b5a:	a7 5a       	subi	r26, 0xA7	; 167
     b5c:	b3 4e       	sbci	r27, 0xE3	; 227
     b5e:	4c 91       	ld	r20, X
     b60:	46 95       	lsr	r20
     b62:	41 70       	andi	r20, 0x01	; 1
     b64:	c4 2f       	mov	r28, r20
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	d4 2f       	mov	r29, r20
     b6a:	c0 17       	cp	r28, r16
     b6c:	d1 07       	cpc	r29, r17
     b6e:	11 f4       	brne	.+4      	; 0xb74 <NWK_RouteFindEntry+0x4a>
     b70:	cd 01       	movw	r24, r26
     b72:	08 c0       	rjmp	.+16     	; 0xb84 <NWK_RouteFindEntry+0x5a>
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	37 96       	adiw	r30, 0x07	; 7
     b7a:	24 36       	cpi	r18, 0x64	; 100
     b7c:	31 05       	cpc	r19, r1
     b7e:	f9 f6       	brne	.-66     	; 0xb3e <NWK_RouteFindEntry+0x14>
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	08 95       	ret

00000b8e <NWK_RouteNewEntry>:
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e9 e5       	ldi	r30, 0x59	; 89
     b94:	fc e1       	ldi	r31, 0x1C	; 28
     b96:	80 81       	ld	r24, Z
     b98:	80 fd       	sbrc	r24, 0
     b9a:	0d c0       	rjmp	.+26     	; 0xbb6 <NWK_RouteNewEntry+0x28>
     b9c:	85 81       	ldd	r24, Z+5	; 0x05
     b9e:	88 23       	and	r24, r24
     ba0:	81 f0       	breq	.+32     	; 0xbc2 <NWK_RouteNewEntry+0x34>
     ba2:	10 97       	sbiw	r26, 0x00	; 0
     ba4:	39 f0       	breq	.+14     	; 0xbb4 <NWK_RouteNewEntry+0x26>
     ba6:	15 96       	adiw	r26, 0x05	; 5
     ba8:	9c 91       	ld	r25, X
     baa:	15 97       	sbiw	r26, 0x05	; 5
     bac:	89 17       	cp	r24, r25
     bae:	18 f4       	brcc	.+6      	; 0xbb6 <NWK_RouteNewEntry+0x28>
     bb0:	df 01       	movw	r26, r30
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <NWK_RouteNewEntry+0x28>
     bb4:	df 01       	movw	r26, r30
     bb6:	37 96       	adiw	r30, 0x07	; 7
     bb8:	8f e1       	ldi	r24, 0x1F	; 31
     bba:	e5 31       	cpi	r30, 0x15	; 21
     bbc:	f8 07       	cpc	r31, r24
     bbe:	59 f7       	brne	.-42     	; 0xb96 <NWK_RouteNewEntry+0x8>
     bc0:	fd 01       	movw	r30, r26
     bc2:	80 81       	ld	r24, Z
     bc4:	8d 70       	andi	r24, 0x0D	; 13
     bc6:	80 63       	ori	r24, 0x30	; 48
     bc8:	80 83       	st	Z, r24
     bca:	80 e8       	ldi	r24, 0x80	; 128
     bcc:	85 83       	std	Z+5, r24	; 0x05
     bce:	cf 01       	movw	r24, r30
     bd0:	08 95       	ret

00000bd2 <NWK_RouteFreeEntry>:
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	80 fd       	sbrc	r24, 0
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <NWK_RouteFreeEntry+0x12>
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	9f ef       	ldi	r25, 0xFF	; 255
     bde:	92 83       	std	Z+2, r25	; 0x02
     be0:	81 83       	std	Z+1, r24	; 0x01
     be2:	15 82       	std	Z+5, r1	; 0x05
     be4:	08 95       	ret

00000be6 <NWK_RouteNextHop>:
     be6:	a1 df       	rcall	.-190    	; 0xb2a <NWK_RouteFindEntry>
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	21 f0       	breq	.+8      	; 0xbf4 <NWK_RouteNextHop+0xe>
     bec:	fc 01       	movw	r30, r24
     bee:	83 81       	ldd	r24, Z+3	; 0x03
     bf0:	94 81       	ldd	r25, Z+4	; 0x04
     bf2:	08 95       	ret
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	08 95       	ret

00000bfa <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     bfa:	97 df       	rcall	.-210    	; 0xb2a <NWK_RouteFindEntry>
  if (entry)
     bfc:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     bfe:	09 f0       	breq	.+2      	; 0xc02 <nwkRouteRemove+0x8>
     c00:	e8 cf       	rjmp	.-48     	; 0xbd2 <NWK_RouteFreeEntry>
     c02:	08 95       	ret

00000c04 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     c0e:	01 85       	ldd	r16, Z+9	; 0x09
     c10:	12 85       	ldd	r17, Z+10	; 0x0a
     c12:	11 23       	and	r17, r17
     c14:	2c f4       	brge	.+10     	; 0xc20 <nwkRouteFrameReceived+0x1c>
     c16:	85 85       	ldd	r24, Z+13	; 0x0d
     c18:	96 85       	ldd	r25, Z+14	; 0x0e
     c1a:	08 17       	cp	r16, r24
     c1c:	19 07       	cpc	r17, r25
     c1e:	e1 f5       	brne	.+120    	; 0xc98 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     c20:	85 81       	ldd	r24, Z+5	; 0x05
     c22:	96 81       	ldd	r25, Z+6	; 0x06
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	c1 f1       	breq	.+112    	; 0xc98 <nwkRouteFrameReceived+0x94>
     c28:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	85 85       	ldd	r24, Z+13	; 0x0d
     c2e:	96 85       	ldd	r25, Z+14	; 0x0e
     c30:	7c df       	rcall	.-264    	; 0xb2a <NWK_RouteFindEntry>
     c32:	fc 01       	movw	r30, r24

  if (entry)
     c34:	89 2b       	or	r24, r25
     c36:	a1 f0       	breq	.+40     	; 0xc60 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     c38:	8f 81       	ldd	r24, Y+7	; 0x07
     c3a:	98 85       	ldd	r25, Y+8	; 0x08
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	f9 f4       	brne	.+62     	; 0xc7e <nwkRouteFrameReceived+0x7a>
     c40:	20 91 f8 1f 	lds	r18, 0x1FF8	; 0x801ff8 <nwkIb>
     c44:	30 91 f9 1f 	lds	r19, 0x1FF9	; 0x801ff9 <nwkIb+0x1>
     c48:	8f 85       	ldd	r24, Y+15	; 0x0f
     c4a:	98 89       	ldd	r25, Y+16	; 0x10
     c4c:	28 17       	cp	r18, r24
     c4e:	39 07       	cpc	r19, r25
     c50:	b1 f4       	brne	.+44     	; 0xc7e <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     c52:	14 83       	std	Z+4, r17	; 0x04
     c54:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c56:	80 81       	ld	r24, Z
     c58:	8f 70       	andi	r24, 0x0F	; 15
     c5a:	80 63       	ori	r24, 0x30	; 48
     c5c:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     c5e:	0a c0       	rjmp	.+20     	; 0xc74 <nwkRouteFrameReceived+0x70>
     c60:	96 df       	rcall	.-212    	; 0xb8e <NWK_RouteNewEntry>
     c62:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     c64:	8d 85       	ldd	r24, Y+13	; 0x0d
     c66:	9e 85       	ldd	r25, Y+14	; 0x0e
     c68:	92 83       	std	Z+2, r25	; 0x02
     c6a:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c70:	94 83       	std	Z+4, r25	; 0x04
     c72:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     c74:	cd 57       	subi	r28, 0x7D	; 125
     c76:	df 4f       	sbci	r29, 0xFF	; 255
     c78:	88 81       	ld	r24, Y
     c7a:	86 83       	std	Z+6, r24	; 0x06
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     c7e:	83 81       	ldd	r24, Z+3	; 0x03
     c80:	94 81       	ldd	r25, Z+4	; 0x04
     c82:	08 17       	cp	r16, r24
     c84:	19 07       	cpc	r17, r25
     c86:	b1 f3       	breq	.-20     	; 0xc74 <nwkRouteFrameReceived+0x70>
     c88:	96 81       	ldd	r25, Z+6	; 0x06
     c8a:	de 01       	movw	r26, r28
     c8c:	ad 57       	subi	r26, 0x7D	; 125
     c8e:	bf 4f       	sbci	r27, 0xFF	; 255
     c90:	8c 91       	ld	r24, X
     c92:	98 17       	cp	r25, r24
     c94:	f0 f2       	brcs	.-68     	; 0xc52 <nwkRouteFrameReceived+0x4e>
     c96:	ee cf       	rjmp	.-36     	; 0xc74 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     ca8:	87 85       	ldd	r24, Z+15	; 0x0f
     caa:	90 89       	ldd	r25, Z+16	; 0x10
     cac:	8f 3f       	cpi	r24, 0xFF	; 255
     cae:	2f ef       	ldi	r18, 0xFF	; 255
     cb0:	92 07       	cpc	r25, r18
     cb2:	d9 f1       	breq	.+118    	; 0xd2a <nwkRouteFrameSent+0x88>
     cb4:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     cb6:	63 85       	ldd	r22, Z+11	; 0x0b
     cb8:	63 fb       	bst	r22, 3
     cba:	66 27       	eor	r22, r22
     cbc:	60 f9       	bld	r22, 0
     cbe:	35 df       	rcall	.-406    	; 0xb2a <NWK_RouteFindEntry>
     cc0:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     cc2:	89 2b       	or	r24, r25
     cc4:	91 f1       	breq	.+100    	; 0xd2a <nwkRouteFrameSent+0x88>
     cc6:	8c 91       	ld	r24, X
     cc8:	80 fd       	sbrc	r24, 0
     cca:	2f c0       	rjmp	.+94     	; 0xd2a <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     ccc:	fe 01       	movw	r30, r28
     cce:	ed 57       	subi	r30, 0x7D	; 125
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	80 81       	ld	r24, Z
     cd4:	81 11       	cpse	r24, r1
     cd6:	19 c0       	rjmp	.+50     	; 0xd0a <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     cd8:	8c 91       	ld	r24, X
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	80 63       	ori	r24, 0x30	; 48
     cde:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     ce0:	15 96       	adiw	r26, 0x05	; 5
     ce2:	8c 91       	ld	r24, X
     ce4:	15 97       	sbiw	r26, 0x05	; 5
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	15 96       	adiw	r26, 0x05	; 5
     cea:	8c 93       	st	X, r24
     cec:	8f 3f       	cpi	r24, 0xFF	; 255
     cee:	e9 f4       	brne	.+58     	; 0xd2a <nwkRouteFrameSent+0x88>
     cf0:	ee e5       	ldi	r30, 0x5E	; 94
     cf2:	fc e1       	ldi	r31, 0x1C	; 28
     cf4:	2a e1       	ldi	r18, 0x1A	; 26
     cf6:	3f e1       	ldi	r19, 0x1F	; 31
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     cf8:	80 81       	ld	r24, Z
     cfa:	86 95       	lsr	r24
     cfc:	8f 5f       	subi	r24, 0xFF	; 255
     cfe:	80 83       	st	Z, r24
     d00:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     d02:	e2 17       	cp	r30, r18
     d04:	f3 07       	cpc	r31, r19
     d06:	c1 f7       	brne	.-16     	; 0xcf8 <nwkRouteFrameSent+0x56>
     d08:	10 c0       	rjmp	.+32     	; 0xd2a <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     d0a:	9c 91       	ld	r25, X
     d0c:	89 2f       	mov	r24, r25
     d0e:	82 95       	swap	r24
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	81 5f       	subi	r24, 0xF1	; 241
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	28 2f       	mov	r18, r24
     d18:	22 95       	swap	r18
     d1a:	20 7f       	andi	r18, 0xF0	; 240
     d1c:	9f 70       	andi	r25, 0x0F	; 15
     d1e:	92 2b       	or	r25, r18
     d20:	9c 93       	st	X, r25
     d22:	81 11       	cpse	r24, r1
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     d26:	cd 01       	movw	r24, r26
     d28:	54 df       	rcall	.-344    	; 0xbd2 <NWK_RouteFreeEntry>
  }
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     d36:	87 85       	ldd	r24, Z+15	; 0x0f
     d38:	90 89       	ldd	r25, Z+16	; 0x10
     d3a:	8f 3f       	cpi	r24, 0xFF	; 255
     d3c:	2f ef       	ldi	r18, 0xFF	; 255
     d3e:	92 07       	cpc	r25, r18
     d40:	29 f4       	brne	.+10     	; 0xd4c <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	9f ef       	ldi	r25, 0xFF	; 255
     d46:	90 87       	std	Z+8, r25	; 0x08
     d48:	87 83       	std	Z+7, r24	; 0x07
     d4a:	0e c0       	rjmp	.+28     	; 0xd68 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     d4c:	23 85       	ldd	r18, Z+11	; 0x0b
     d4e:	22 ff       	sbrs	r18, 2
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     d52:	90 87       	std	Z+8, r25	; 0x08
     d54:	87 83       	std	Z+7, r24	; 0x07
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <nwkRoutePrepareTx+0x38>
     d58:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     d5a:	63 85       	ldd	r22, Z+11	; 0x0b
     d5c:	63 fb       	bst	r22, 3
     d5e:	66 27       	eor	r22, r22
     d60:	60 f9       	bld	r22, 0
     d62:	41 df       	rcall	.-382    	; 0xbe6 <NWK_RouteNextHop>
     d64:	98 87       	std	Y+8, r25	; 0x08
     d66:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	08 95       	ret

00000d6e <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     d6e:	af 92       	push	r10
     d70:	bf 92       	push	r11
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     d82:	1b 85       	ldd	r17, Y+11	; 0x0b
     d84:	13 fb       	bst	r17, 3
     d86:	11 27       	eor	r17, r17
     d88:	10 f9       	bld	r17, 0
     d8a:	cf 84       	ldd	r12, Y+15	; 0x0f
     d8c:	d8 88       	ldd	r13, Y+16	; 0x10
     d8e:	61 2f       	mov	r22, r17
     d90:	c6 01       	movw	r24, r12
     d92:	29 df       	rcall	.-430    	; 0xbe6 <NWK_RouteNextHop>
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	59 f0       	breq	.+22     	; 0xdae <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     d98:	fe 01       	movw	r30, r28
     d9a:	e9 57       	subi	r30, 0x79	; 121
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	11 82       	std	Z+1, r1	; 0x01
     da0:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     da8:	ce 01       	movw	r24, r28
     daa:	6e d3       	rcall	.+1756   	; 0x1488 <nwkTxFrame>
     dac:	22 c0       	rjmp	.+68     	; 0xdf2 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     dae:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     db0:	be 84       	ldd	r11, Y+14	; 0x0e
     db2:	1f de       	rcall	.-962    	; 0x9f2 <nwkFrameAlloc>
     db4:	7c 01       	movw	r14, r24
     db6:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     db8:	d1 f0       	breq	.+52     	; 0xdee <nwkRouteFrame+0x80>
     dba:	83 de       	rcall	.-762    	; 0xac2 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     dbc:	f7 01       	movw	r30, r14
     dbe:	81 81       	ldd	r24, Z+1	; 0x01
     dc0:	8a 5f       	subi	r24, 0xFA	; 250
     dc2:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     dc4:	e9 57       	subi	r30, 0x79	; 121
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	11 82       	std	Z+1, r1	; 0x01
     dca:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     dcc:	f7 01       	movw	r30, r14
     dce:	b0 8a       	std	Z+16, r11	; 0x10
     dd0:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     dd2:	ef 57       	subi	r30, 0x7F	; 127
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	01 90       	ld	r0, Z+
     dd8:	f0 81       	ld	r31, Z
     dda:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	80 83       	st	Z, r24
  command->srcAddr = src;
     de0:	b2 82       	std	Z+2, r11	; 0x02
     de2:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     de4:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     de6:	c3 82       	std	Z+3, r12	; 0x03
     de8:	15 83       	std	Z+5, r17	; 0x05
     dea:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     dec:	4d d3       	rcall	.+1690   	; 0x1488 <nwkTxFrame>
     dee:	ce 01       	movw	r24, r28
     df0:	39 de       	rcall	.-910    	; 0xa64 <nwkFrameFree>
  }
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	bf 90       	pop	r11
     e02:	af 90       	pop	r10
     e04:	08 95       	ret

00000e06 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     e06:	fc 01       	movw	r30, r24
     e08:	21 85       	ldd	r18, Z+9	; 0x09
     e0a:	26 30       	cpi	r18, 0x06	; 6
     e0c:	49 f4       	brne	.+18     	; 0xe20 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     e0e:	07 80       	ldd	r0, Z+7	; 0x07
     e10:	f0 85       	ldd	r31, Z+8	; 0x08
     e12:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     e14:	65 81       	ldd	r22, Z+5	; 0x05
     e16:	83 81       	ldd	r24, Z+3	; 0x03
     e18:	94 81       	ldd	r25, Z+4	; 0x04
     e1a:	ef de       	rcall	.-546    	; 0xbfa <nwkRouteRemove>

  return true;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     e20:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     e22:	08 95       	ret

00000e24 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     e24:	dc 01       	movw	r26, r24
     e26:	19 96       	adiw	r26, 0x09	; 9
     e28:	2c 91       	ld	r18, X
     e2a:	19 97       	sbiw	r26, 0x09	; 9
     e2c:	22 23       	and	r18, r18
     e2e:	71 f0       	breq	.+28     	; 0xe4c <nwkRxServiceDataInd+0x28>
     e30:	17 96       	adiw	r26, 0x07	; 7
     e32:	ed 91       	ld	r30, X+
     e34:	fc 91       	ld	r31, X
     e36:	18 97       	sbiw	r26, 0x08	; 8
     e38:	20 81       	ld	r18, Z
     e3a:	22 23       	and	r18, r18
     e3c:	19 f0       	breq	.+6      	; 0xe44 <nwkRxServiceDataInd+0x20>
     e3e:	21 30       	cpi	r18, 0x01	; 1
     e40:	19 f0       	breq	.+6      	; 0xe48 <nwkRxServiceDataInd+0x24>
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <nwkRxServiceDataInd+0x2c>
     e44:	b2 c3       	rjmp	.+1892   	; 0x15aa <nwkTxAckReceived>
     e46:	08 95       	ret
     e48:	de cf       	rjmp	.-68     	; 0xe06 <nwkRouteErrorReceived>
     e4a:	08 95       	ret
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	08 95       	ret
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 95       	ret

00000e54 <nwkRxDuplicateRejectionTimerHandler>:
     e54:	bc 01       	movw	r22, r24
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	ff e1       	ldi	r31, 0x1F	; 31
     e5a:	29 e5       	ldi	r18, 0x59	; 89
     e5c:	3f e1       	ldi	r19, 0x1F	; 31
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	51 e0       	ldi	r21, 0x01	; 1
     e62:	90 81       	ld	r25, Z
     e64:	99 23       	and	r25, r25
     e66:	19 f0       	breq	.+6      	; 0xe6e <nwkRxDuplicateRejectionTimerHandler+0x1a>
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	90 83       	st	Z, r25
     e6c:	45 2f       	mov	r20, r21
     e6e:	35 96       	adiw	r30, 0x05	; 5
     e70:	e2 17       	cp	r30, r18
     e72:	f3 07       	cpc	r31, r19
     e74:	b1 f7       	brne	.-20     	; 0xe62 <nwkRxDuplicateRejectionTimerHandler+0xe>
     e76:	44 23       	and	r20, r20
     e78:	11 f0       	breq	.+4      	; 0xe7e <nwkRxDuplicateRejectionTimerHandler+0x2a>
     e7a:	cb 01       	movw	r24, r22
     e7c:	30 c6       	rjmp	.+3168   	; 0x1ade <SYS_TimerStart>
     e7e:	08 95       	ret

00000e80 <nwkRxInit>:
     e80:	e7 e2       	ldi	r30, 0x27	; 39
     e82:	ff e1       	ldi	r31, 0x1F	; 31
     e84:	89 e5       	ldi	r24, 0x59	; 89
     e86:	9f e1       	ldi	r25, 0x1F	; 31
     e88:	10 82       	st	Z, r1
     e8a:	35 96       	adiw	r30, 0x05	; 5
     e8c:	e8 17       	cp	r30, r24
     e8e:	f9 07       	cpc	r31, r25
     e90:	d9 f7       	brne	.-10     	; 0xe88 <nwkRxInit+0x8>
     e92:	e5 e1       	ldi	r30, 0x15	; 21
     e94:	ff e1       	ldi	r31, 0x1F	; 31
     e96:	84 e6       	ldi	r24, 0x64	; 100
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	86 83       	std	Z+6, r24	; 0x06
     ea0:	97 83       	std	Z+7, r25	; 0x07
     ea2:	a0 87       	std	Z+8, r26	; 0x08
     ea4:	b1 87       	std	Z+9, r27	; 0x09
     ea6:	12 86       	std	Z+10, r1	; 0x0a
     ea8:	8a e2       	ldi	r24, 0x2A	; 42
     eaa:	97 e0       	ldi	r25, 0x07	; 7
     eac:	94 87       	std	Z+12, r25	; 0x0c
     eae:	83 87       	std	Z+11, r24	; 0x0b
     eb0:	62 e1       	ldi	r22, 0x12	; 18
     eb2:	77 e0       	ldi	r23, 0x07	; 7
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	96 cc       	rjmp	.-1748   	; 0x7e4 <NWK_OpenEndpoint>
     eb8:	08 95       	ret

00000eba <PHY_DataInd>:
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	dc 01       	movw	r26, r24
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	11 97       	sbiw	r26, 0x01	; 1
     ec6:	21 81       	ldd	r18, Z+1	; 0x01
     ec8:	28 38       	cpi	r18, 0x88	; 136
     eca:	f1 f4       	brne	.+60     	; 0xf08 <PHY_DataInd+0x4e>
     ecc:	20 81       	ld	r18, Z
     ece:	2f 7d       	andi	r18, 0xDF	; 223
     ed0:	21 34       	cpi	r18, 0x41	; 65
     ed2:	d1 f4       	brne	.+52     	; 0xf08 <PHY_DataInd+0x4e>
     ed4:	12 96       	adiw	r26, 0x02	; 2
     ed6:	2c 91       	ld	r18, X
     ed8:	20 31       	cpi	r18, 0x10	; 16
     eda:	b0 f0       	brcs	.+44     	; 0xf08 <PHY_DataInd+0x4e>
     edc:	ec 01       	movw	r28, r24
     ede:	89 dd       	rcall	.-1262   	; 0x9f2 <nwkFrameAlloc>
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	91 f0       	breq	.+36     	; 0xf08 <PHY_DataInd+0x4e>
     ee4:	20 e2       	ldi	r18, 0x20	; 32
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 83       	st	Z, r18
     eea:	2a 81       	ldd	r18, Y+2	; 0x02
     eec:	21 83       	std	Z+1, r18	; 0x01
     eee:	2b 81       	ldd	r18, Y+3	; 0x03
     ef0:	ed 57       	subi	r30, 0x7D	; 125
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	20 83       	st	Z, r18
     ef6:	2c 81       	ldd	r18, Y+4	; 0x04
     ef8:	31 96       	adiw	r30, 0x01	; 1
     efa:	20 83       	st	Z, r18
     efc:	4a 81       	ldd	r20, Y+2	; 0x02
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	68 81       	ld	r22, Y
     f02:	79 81       	ldd	r23, Y+1	; 0x01
     f04:	02 96       	adiw	r24, 0x02	; 2
     f06:	e0 d6       	rcall	.+3520   	; 0x1cc8 <memcpy>
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     f0e:	2f 92       	push	r2
     f10:	3f 92       	push	r3
     f12:	4f 92       	push	r4
     f14:	5f 92       	push	r5
     f16:	6f 92       	push	r6
     f18:	7f 92       	push	r7
     f1a:	8f 92       	push	r8
     f1c:	9f 92       	push	r9
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	2c 97       	sbiw	r28, 0x0c	; 12
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     f46:	0f 2e       	mov	r0, r31
     f48:	f4 e2       	ldi	r31, 0x24	; 36
     f4a:	bf 2e       	mov	r11, r31
     f4c:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     f4e:	0f 2e       	mov	r0, r31
     f50:	f8 ef       	ldi	r31, 0xF8	; 248
     f52:	ef 2e       	mov	r14, r31
     f54:	ff e1       	ldi	r31, 0x1F	; 31
     f56:	ff 2e       	mov	r15, r31
     f58:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     f5a:	55 24       	eor	r5, r5
     f5c:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     f5e:	68 94       	set
     f60:	aa 24       	eor	r10, r10
     f62:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     f64:	68 94       	set
     f66:	77 24       	eor	r7, r7
     f68:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     f6a:	68 94       	set
     f6c:	66 24       	eor	r6, r6
     f6e:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f70:	31 2c       	mov	r3, r1
     f72:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     f74:	0f 2e       	mov	r0, r31
     f76:	ff e1       	ldi	r31, 0x1F	; 31
     f78:	4f 2e       	mov	r4, r31
     f7a:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     f7c:	cc 24       	eor	r12, r12
     f7e:	c3 94       	inc	r12
     f80:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     f82:	da c1       	rjmp	.+948    	; 0x1338 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     f84:	d8 01       	movw	r26, r16
     f86:	8c 91       	ld	r24, X
     f88:	82 32       	cpi	r24, 0x22	; 34
     f8a:	09 f4       	brne	.+2      	; 0xf8e <nwkRxTaskHandler+0x80>
     f8c:	05 c1       	rjmp	.+522    	; 0x1198 <nwkRxTaskHandler+0x28a>
     f8e:	18 f4       	brcc	.+6      	; 0xf96 <nwkRxTaskHandler+0x88>
     f90:	80 32       	cpi	r24, 0x20	; 32
     f92:	41 f0       	breq	.+16     	; 0xfa4 <nwkRxTaskHandler+0x96>
     f94:	d1 c1       	rjmp	.+930    	; 0x1338 <nwkRxTaskHandler+0x42a>
     f96:	83 32       	cpi	r24, 0x23	; 35
     f98:	09 f4       	brne	.+2      	; 0xf9c <nwkRxTaskHandler+0x8e>
     f9a:	c9 c1       	rjmp	.+914    	; 0x132e <nwkRxTaskHandler+0x420>
     f9c:	84 32       	cpi	r24, 0x24	; 36
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <nwkRxTaskHandler+0x94>
     fa0:	c9 c1       	rjmp	.+914    	; 0x1334 <nwkRxTaskHandler+0x426>
     fa2:	ca c1       	rjmp	.+916    	; 0x1338 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     fa4:	f8 01       	movw	r30, r16
     fa6:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     fa8:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     faa:	98 2f       	mov	r25, r24
     fac:	9a 70       	andi	r25, 0x0A	; 10
     fae:	09 f0       	breq	.+2      	; 0xfb2 <nwkRxTaskHandler+0xa4>
     fb0:	c3 c1       	rjmp	.+902    	; 0x1338 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     fb2:	25 81       	ldd	r18, Z+5	; 0x05
     fb4:	36 81       	ldd	r19, Z+6	; 0x06
     fb6:	2f 3f       	cpi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	91 f4       	brne	.+36     	; 0xfe0 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     fbc:	d8 01       	movw	r26, r16
     fbe:	1f 96       	adiw	r26, 0x0f	; 15
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	50 97       	sbiw	r26, 0x10	; 16
     fc6:	f7 01       	movw	r30, r14
     fc8:	20 81       	ld	r18, Z
     fca:	31 81       	ldd	r19, Z+1	; 0x01
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <nwkRxTaskHandler+0xca>
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <nwkRxTaskHandler+0xca>
     fd6:	b0 c1       	rjmp	.+864    	; 0x1338 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     fd8:	e2 e2       	ldi	r30, 0x22	; 34
     fda:	d8 01       	movw	r26, r16
     fdc:	ec 93       	st	X, r30
     fde:	ac c1       	rjmp	.+856    	; 0x1338 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     fe0:	d8 01       	movw	r26, r16
     fe2:	1f 96       	adiw	r26, 0x0f	; 15
     fe4:	2d 91       	ld	r18, X+
     fe6:	3c 91       	ld	r19, X
     fe8:	50 97       	sbiw	r26, 0x10	; 16
     fea:	2f 3f       	cpi	r18, 0xFF	; 255
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	11 f4       	brne	.+4      	; 0xff4 <nwkRxTaskHandler+0xe6>
     ff0:	80 fd       	sbrc	r24, 0
     ff2:	a2 c1       	rjmp	.+836    	; 0x1338 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     ff4:	f7 01       	movw	r30, r14
     ff6:	20 81       	ld	r18, Z
     ff8:	31 81       	ldd	r19, Z+1	; 0x01
     ffa:	d8 01       	movw	r26, r16
     ffc:	1d 96       	adiw	r26, 0x0d	; 13
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	1e 97       	sbiw	r26, 0x0e	; 14
    1004:	28 17       	cp	r18, r24
    1006:	39 07       	cpc	r19, r25
    1008:	09 f4       	brne	.+2      	; 0x100c <nwkRxTaskHandler+0xfe>
    100a:	96 c1       	rjmp	.+812    	; 0x1338 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    100c:	c8 01       	movw	r24, r16
    100e:	fa dd       	rcall	.-1036   	; 0xc04 <nwkRouteFrameReceived>
    1010:	e3 e2       	ldi	r30, 0x23	; 35
    1012:	ff e1       	ldi	r31, 0x1F	; 31
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1018:	83 2c       	mov	r8, r3
    101a:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    101c:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    101e:	44 81       	ldd	r20, Z+4	; 0x04
    1020:	44 23       	and	r20, r20
    1022:	09 f4       	brne	.+2      	; 0x1026 <nwkRxTaskHandler+0x118>
    1024:	74 c0       	rjmp	.+232    	; 0x110e <nwkRxTaskHandler+0x200>
    1026:	d8 01       	movw	r26, r16
    1028:	1d 96       	adiw	r26, 0x0d	; 13
    102a:	6d 91       	ld	r22, X+
    102c:	7c 91       	ld	r23, X
    102e:	1e 97       	sbiw	r26, 0x0e	; 14
    1030:	40 81       	ld	r20, Z
    1032:	51 81       	ldd	r21, Z+1	; 0x01
    1034:	64 17       	cp	r22, r20
    1036:	75 07       	cpc	r23, r21
    1038:	09 f0       	breq	.+2      	; 0x103c <nwkRxTaskHandler+0x12e>
    103a:	6a c0       	rjmp	.+212    	; 0x1110 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    103c:	1c 96       	adiw	r26, 0x0c	; 12
    103e:	8c 91       	ld	r24, X
    1040:	1c 97       	sbiw	r26, 0x0c	; 12
    1042:	f9 01       	movw	r30, r18
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	e2 0f       	add	r30, r18
    104e:	f3 1f       	adc	r31, r19
    1050:	ed 5d       	subi	r30, 0xDD	; 221
    1052:	f0 4e       	sbci	r31, 0xE0	; 224
    1054:	92 81       	ldd	r25, Z+2	; 0x02
    1056:	98 1b       	sub	r25, r24

      if (diff < 8)
    1058:	98 30       	cpi	r25, 0x08	; 8
    105a:	08 f0       	brcs	.+2      	; 0x105e <nwkRxTaskHandler+0x150>
    105c:	3e c0       	rjmp	.+124    	; 0x10da <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
    105e:	f9 01       	movw	r30, r18
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	e2 0f       	add	r30, r18
    106a:	f3 1f       	adc	r31, r19
    106c:	ed 5d       	subi	r30, 0xDD	; 221
    106e:	f0 4e       	sbci	r31, 0xE0	; 224
    1070:	83 81       	ldd	r24, Z+3	; 0x03
    1072:	48 2f       	mov	r20, r24
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	09 2e       	mov	r0, r25
    1078:	02 c0       	rjmp	.+4      	; 0x107e <nwkRxTaskHandler+0x170>
    107a:	55 95       	asr	r21
    107c:	47 95       	ror	r20
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <nwkRxTaskHandler+0x16c>
    1082:	40 ff       	sbrs	r20, 0
    1084:	17 c0       	rjmp	.+46     	; 0x10b4 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1086:	f7 01       	movw	r30, r14
    1088:	20 81       	ld	r18, Z
    108a:	31 81       	ldd	r19, Z+1	; 0x01
    108c:	17 96       	adiw	r26, 0x07	; 7
    108e:	8d 91       	ld	r24, X+
    1090:	9c 91       	ld	r25, X
    1092:	18 97       	sbiw	r26, 0x08	; 8
    1094:	28 17       	cp	r18, r24
    1096:	39 07       	cpc	r19, r25
    1098:	09 f0       	breq	.+2      	; 0x109c <nwkRxTaskHandler+0x18e>
    109a:	4e c1       	rjmp	.+668    	; 0x1338 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    109c:	1b 96       	adiw	r26, 0x0b	; 11
    109e:	6c 91       	ld	r22, X
    10a0:	1b 97       	sbiw	r26, 0x0b	; 11
    10a2:	63 fb       	bst	r22, 3
    10a4:	66 27       	eor	r22, r22
    10a6:	60 f9       	bld	r22, 0
    10a8:	1f 96       	adiw	r26, 0x0f	; 15
    10aa:	8d 91       	ld	r24, X+
    10ac:	9c 91       	ld	r25, X
    10ae:	50 97       	sbiw	r26, 0x10	; 16
    10b0:	a4 dd       	rcall	.-1208   	; 0xbfa <nwkRouteRemove>
    10b2:	42 c1       	rjmp	.+644    	; 0x1338 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    10b4:	f9 01       	movw	r30, r18
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	2e 0f       	add	r18, r30
    10c0:	3f 1f       	adc	r19, r31
    10c2:	f9 01       	movw	r30, r18
    10c4:	ed 5d       	subi	r30, 0xDD	; 221
    10c6:	f0 4e       	sbci	r31, 0xE0	; 224
    10c8:	96 01       	movw	r18, r12
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <nwkRxTaskHandler+0x1c2>
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	9a 95       	dec	r25
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <nwkRxTaskHandler+0x1be>
    10d4:	82 2b       	or	r24, r18
    10d6:	83 83       	std	Z+3, r24	; 0x03
    10d8:	36 c1       	rjmp	.+620    	; 0x1346 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    10da:	f9 01       	movw	r30, r18
    10dc:	ee 0f       	add	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	2e 0f       	add	r18, r30
    10e6:	3f 1f       	adc	r19, r31
    10e8:	f9 01       	movw	r30, r18
    10ea:	ed 5d       	subi	r30, 0xDD	; 221
    10ec:	f0 4e       	sbci	r31, 0xE0	; 224
    10ee:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    10f0:	83 81       	ldd	r24, Z+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	91 95       	neg	r25
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <nwkRxTaskHandler+0x1f2>
    10fc:	44 0f       	add	r20, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	9a 95       	dec	r25
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <nwkRxTaskHandler+0x1ee>
    1104:	ca 01       	movw	r24, r20
    1106:	81 60       	ori	r24, 0x01	; 1
    1108:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    110a:	44 82       	std	Z+4, r4	; 0x04
    110c:	1c c1       	rjmp	.+568    	; 0x1346 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    110e:	4f 01       	movw	r8, r30
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1114:	8a 30       	cpi	r24, 0x0A	; 10
    1116:	91 05       	cpc	r25, r1
    1118:	09 f0       	breq	.+2      	; 0x111c <nwkRxTaskHandler+0x20e>
    111a:	80 cf       	rjmp	.-256    	; 0x101c <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    111c:	81 14       	cp	r8, r1
    111e:	91 04       	cpc	r9, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <nwkRxTaskHandler+0x216>
    1122:	0a c1       	rjmp	.+532    	; 0x1338 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1124:	d8 01       	movw	r26, r16
    1126:	1d 96       	adiw	r26, 0x0d	; 13
    1128:	8d 91       	ld	r24, X+
    112a:	9c 91       	ld	r25, X
    112c:	1e 97       	sbiw	r26, 0x0e	; 14
    112e:	f4 01       	movw	r30, r8
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1134:	1c 96       	adiw	r26, 0x0c	; 12
    1136:	8c 91       	ld	r24, X
    1138:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    113a:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    113c:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    113e:	85 e1       	ldi	r24, 0x15	; 21
    1140:	9f e1       	ldi	r25, 0x1F	; 31
    1142:	cd d4       	rcall	.+2458   	; 0x1ade <SYS_TimerStart>
    1144:	00 c1       	rjmp	.+512    	; 0x1346 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1146:	d7 01       	movw	r26, r14
    1148:	2d 91       	ld	r18, X+
    114a:	3c 91       	ld	r19, X
    114c:	f8 01       	movw	r30, r16
    114e:	87 85       	ldd	r24, Z+15	; 0x0f
    1150:	90 89       	ldd	r25, Z+16	; 0x10
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	81 f0       	breq	.+32     	; 0x1178 <nwkRxTaskHandler+0x26a>
    1158:	43 85       	ldd	r20, Z+11	; 0x0b
    115a:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    115c:	0b c0       	rjmp	.+22     	; 0x1174 <nwkRxTaskHandler+0x266>
    115e:	c8 01       	movw	r24, r16
    1160:	e1 d1       	rcall	.+962    	; 0x1524 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1162:	d7 01       	movw	r26, r14
    1164:	2d 91       	ld	r18, X+
    1166:	3c 91       	ld	r19, X
    1168:	f8 01       	movw	r30, r16
    116a:	87 85       	ldd	r24, Z+15	; 0x0f
    116c:	90 89       	ldd	r25, Z+16	; 0x10
    116e:	28 17       	cp	r18, r24
    1170:	39 07       	cpc	r19, r25
    1172:	11 f0       	breq	.+4      	; 0x1178 <nwkRxTaskHandler+0x26a>
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	21 f4       	brne	.+8      	; 0x1180 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1178:	e2 e2       	ldi	r30, 0x22	; 34
    117a:	d8 01       	movw	r26, r16
    117c:	ec 93       	st	X, r30
    117e:	dc c0       	rjmp	.+440    	; 0x1338 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1180:	d8 01       	movw	r26, r16
    1182:	17 96       	adiw	r26, 0x07	; 7
    1184:	8d 91       	ld	r24, X+
    1186:	9c 91       	ld	r25, X
    1188:	18 97       	sbiw	r26, 0x08	; 8
    118a:	82 17       	cp	r24, r18
    118c:	93 07       	cpc	r25, r19
    118e:	09 f0       	breq	.+2      	; 0x1192 <nwkRxTaskHandler+0x284>
    1190:	d3 c0       	rjmp	.+422    	; 0x1338 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1192:	e3 e2       	ldi	r30, 0x23	; 35
    1194:	ec 93       	st	X, r30
    1196:	d0 c0       	rjmp	.+416    	; 0x1338 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1198:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    119c:	d8 01       	movw	r26, r16
    119e:	51 96       	adiw	r26, 0x11	; 17
    11a0:	8c 91       	ld	r24, X
    11a2:	51 97       	sbiw	r26, 0x11	; 17
    11a4:	82 95       	swap	r24
    11a6:	8f 70       	andi	r24, 0x0F	; 15
    11a8:	e8 2f       	mov	r30, r24
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	e2 50       	subi	r30, 0x02	; 2
    11b2:	f0 4e       	sbci	r31, 0xE0	; 224
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <nwkRxTaskHandler+0x2b2>
    11be:	60 c0       	rjmp	.+192    	; 0x1280 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    11c0:	1d 96       	adiw	r26, 0x0d	; 13
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	1e 97       	sbiw	r26, 0x0e	; 14
    11c8:	3a 83       	std	Y+2, r19	; 0x02
    11ca:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    11cc:	1f 96       	adiw	r26, 0x0f	; 15
    11ce:	4d 91       	ld	r20, X+
    11d0:	5c 91       	ld	r21, X
    11d2:	50 97       	sbiw	r26, 0x10	; 16
    11d4:	5c 83       	std	Y+4, r21	; 0x04
    11d6:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    11d8:	51 96       	adiw	r26, 0x11	; 17
    11da:	9c 91       	ld	r25, X
    11dc:	51 97       	sbiw	r26, 0x11	; 17
    11de:	9f 70       	andi	r25, 0x0F	; 15
    11e0:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    11e2:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    11e4:	af 57       	subi	r26, 0x7F	; 127
    11e6:	bf 4f       	sbci	r27, 0xFF	; 255
    11e8:	8d 91       	ld	r24, X+
    11ea:	9c 91       	ld	r25, X
    11ec:	99 87       	std	Y+9, r25	; 0x09
    11ee:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    11f0:	b8 01       	movw	r22, r16
    11f2:	6e 5f       	subi	r22, 0xFE	; 254
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    11f6:	86 1b       	sub	r24, r22
    11f8:	97 0b       	sbc	r25, r23
    11fa:	d8 01       	movw	r26, r16
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	9c 91       	ld	r25, X
    1200:	11 97       	sbiw	r26, 0x01	; 1
    1202:	98 1b       	sub	r25, r24
    1204:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1206:	ad 57       	subi	r26, 0x7D	; 125
    1208:	bf 4f       	sbci	r27, 0xFF	; 255
    120a:	8c 91       	ld	r24, X
    120c:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	8c 91       	ld	r24, X
    1212:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1214:	d8 01       	movw	r26, r16
    1216:	1b 96       	adiw	r26, 0x0b	; 11
    1218:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    121a:	69 2f       	mov	r22, r25
    121c:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    121e:	92 fd       	sbrc	r25, 2
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <nwkRxTaskHandler+0x318>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <nwkRxTaskHandler+0x31a>
    1226:	80 e2       	ldi	r24, 0x20	; 32
    1228:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    122a:	93 fd       	sbrc	r25, 3
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <nwkRxTaskHandler+0x324>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <nwkRxTaskHandler+0x326>
    1232:	90 e4       	ldi	r25, 0x40	; 64
    1234:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1236:	4f 3f       	cpi	r20, 0xFF	; 255
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	11 f0       	breq	.+4      	; 0x1240 <nwkRxTaskHandler+0x332>
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <nwkRxTaskHandler+0x334>
    1240:	96 2d       	mov	r25, r6
    1242:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1244:	d8 01       	movw	r26, r16
    1246:	19 96       	adiw	r26, 0x09	; 9
    1248:	4d 91       	ld	r20, X+
    124a:	5c 91       	ld	r21, X
    124c:	1a 97       	sbiw	r26, 0x0a	; 10
    124e:	24 17       	cp	r18, r20
    1250:	35 07       	cpc	r19, r21
    1252:	11 f0       	breq	.+4      	; 0x1258 <nwkRxTaskHandler+0x34a>
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	01 c0       	rjmp	.+2      	; 0x125a <nwkRxTaskHandler+0x34c>
    1258:	97 2d       	mov	r25, r7
    125a:	89 2b       	or	r24, r25
    125c:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    125e:	d8 01       	movw	r26, r16
    1260:	15 96       	adiw	r26, 0x05	; 5
    1262:	2d 91       	ld	r18, X+
    1264:	3c 91       	ld	r19, X
    1266:	16 97       	sbiw	r26, 0x06	; 6
    1268:	2f 3f       	cpi	r18, 0xFF	; 255
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	11 f0       	breq	.+4      	; 0x1272 <nwkRxTaskHandler+0x364>
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <nwkRxTaskHandler+0x366>
    1272:	9a 2d       	mov	r25, r10
    1274:	89 2b       	or	r24, r25
    1276:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	19 95       	eicall
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1280:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1282:	f8 01       	movw	r30, r16
    1284:	93 85       	ldd	r25, Z+11	; 0x0b
    1286:	90 ff       	sbrs	r25, 0
    ack = false;
    1288:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    128a:	d8 01       	movw	r26, r16
    128c:	17 96       	adiw	r26, 0x07	; 7
    128e:	2d 91       	ld	r18, X+
    1290:	3c 91       	ld	r19, X
    1292:	18 97       	sbiw	r26, 0x08	; 8
    1294:	2f 3f       	cpi	r18, 0xFF	; 255
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	69 f4       	brne	.+26     	; 0x12b4 <nwkRxTaskHandler+0x3a6>
    129a:	f7 01       	movw	r30, r14
    129c:	40 81       	ld	r20, Z
    129e:	51 81       	ldd	r21, Z+1	; 0x01
    12a0:	d8 01       	movw	r26, r16
    12a2:	1f 96       	adiw	r26, 0x0f	; 15
    12a4:	2d 91       	ld	r18, X+
    12a6:	3c 91       	ld	r19, X
    12a8:	50 97       	sbiw	r26, 0x10	; 16
    12aa:	42 17       	cp	r20, r18
    12ac:	53 07       	cpc	r21, r19
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    12b0:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    12b2:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    12b4:	f8 01       	movw	r30, r16
    12b6:	25 81       	ldd	r18, Z+5	; 0x05
    12b8:	36 81       	ldd	r19, Z+6	; 0x06
    12ba:	2f 3f       	cpi	r18, 0xFF	; 255
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	a1 f1       	breq	.+104    	; 0x1328 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    12c0:	d7 01       	movw	r26, r14
    12c2:	2d 91       	ld	r18, X+
    12c4:	3c 91       	ld	r19, X
    12c6:	2f 3f       	cpi	r18, 0xFF	; 255
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    12ca:	71 f1       	breq	.+92     	; 0x1328 <nwkRxTaskHandler+0x41a>
    12cc:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    12ce:	61 f1       	breq	.+88     	; 0x1328 <nwkRxTaskHandler+0x41a>
    12d0:	90 db       	rcall	.-2272   	; 0x9f2 <nwkFrameAlloc>
    12d2:	4c 01       	movw	r8, r24
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    12d6:	41 f1       	breq	.+80     	; 0x1328 <nwkRxTaskHandler+0x41a>
    12d8:	f4 db       	rcall	.-2072   	; 0xac2 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    12da:	f4 01       	movw	r30, r8
    12dc:	81 81       	ldd	r24, Z+1	; 0x01
    12de:	8d 5f       	subi	r24, 0xFD	; 253
    12e0:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    12e2:	e9 57       	subi	r30, 0x79	; 121
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	11 82       	std	Z+1, r1	; 0x01
    12e8:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    12ea:	d8 01       	movw	r26, r16
    12ec:	1b 96       	adiw	r26, 0x0b	; 11
    12ee:	8c 91       	ld	r24, X
    12f0:	1b 97       	sbiw	r26, 0x0b	; 11
    12f2:	86 95       	lsr	r24
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	f4 01       	movw	r30, r8
    12f8:	93 85       	ldd	r25, Z+11	; 0x0b
    12fa:	80 fb       	bst	r24, 0
    12fc:	91 f9       	bld	r25, 1
    12fe:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1300:	1d 96       	adiw	r26, 0x0d	; 13
    1302:	8d 91       	ld	r24, X+
    1304:	9c 91       	ld	r25, X
    1306:	1e 97       	sbiw	r26, 0x0e	; 14
    1308:	90 8b       	std	Z+16, r25	; 0x10
    130a:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    130c:	ef 57       	subi	r30, 0x7F	; 127
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	01 90       	ld	r0, Z+
    1312:	f0 81       	ld	r31, Z
    1314:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1316:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1318:	80 91 22 1f 	lds	r24, 0x1F22	; 0x801f22 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    131c:	82 83       	std	Z+2, r24	; 0x02
    131e:	1c 96       	adiw	r26, 0x0c	; 12
    1320:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1322:	81 83       	std	Z+1, r24	; 0x01
    1324:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1326:	b0 d0       	rcall	.+352    	; 0x1488 <nwkTxFrame>
    1328:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    132a:	bc 92       	st	X, r11
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <nwkRxTaskHandler+0x42a>
    132e:	c8 01       	movw	r24, r16
      } break;
    1330:	1e dd       	rcall	.-1476   	; 0xd6e <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <nwkRxTaskHandler+0x42a>
    1334:	c8 01       	movw	r24, r16
    1336:	96 db       	rcall	.-2260   	; 0xa64 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1338:	c8 01       	movw	r24, r16
    133a:	9e db       	rcall	.-2244   	; 0xa78 <nwkFrameNext>
    133c:	8c 01       	movw	r16, r24
    133e:	89 2b       	or	r24, r25
    1340:	09 f0       	breq	.+2      	; 0x1344 <nwkRxTaskHandler+0x436>
    1342:	20 ce       	rjmp	.-960    	; 0xf84 <nwkRxTaskHandler+0x76>
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <nwkRxTaskHandler+0x446>
    1346:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1348:	87 81       	ldd	r24, Z+7	; 0x07
    134a:	90 85       	ldd	r25, Z+8	; 0x08
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	09 f0       	breq	.+2      	; 0x1352 <nwkRxTaskHandler+0x444>
    1350:	08 cf       	rjmp	.-496    	; 0x1162 <nwkRxTaskHandler+0x254>
    1352:	f9 ce       	rjmp	.-526    	; 0x1146 <nwkRxTaskHandler+0x238>
    1354:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	bf 90       	pop	r11
    1372:	af 90       	pop	r10
    1374:	9f 90       	pop	r9
    1376:	8f 90       	pop	r8
    1378:	7f 90       	pop	r7
    137a:	6f 90       	pop	r6
    137c:	5f 90       	pop	r5
    137e:	4f 90       	pop	r4
    1380:	3f 90       	pop	r3
    1382:	2f 90       	pop	r2
    1384:	08 95       	ret

00001386 <nwkTxDelayTimerHandler>:
    1386:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	7c 01       	movw	r14, r24
    1392:	10 e0       	ldi	r17, 0x00	; 0
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	01 e0       	ldi	r16, 0x01	; 1
    139a:	c3 e1       	ldi	r28, 0x13	; 19
    139c:	13 c0       	rjmp	.+38     	; 0x13c4 <nwkTxDelayTimerHandler+0x3e>
    139e:	fc 01       	movw	r30, r24
    13a0:	20 81       	ld	r18, Z
    13a2:	21 31       	cpi	r18, 0x11	; 17
    13a4:	79 f4       	brne	.+30     	; 0x13c4 <nwkTxDelayTimerHandler+0x3e>
    13a6:	ec 57       	subi	r30, 0x7C	; 124
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	20 81       	ld	r18, Z
    13ac:	31 81       	ldd	r19, Z+1	; 0x01
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	31 09       	sbc	r19, r1
    13b2:	31 83       	std	Z+1, r19	; 0x01
    13b4:	20 83       	st	Z, r18
    13b6:	23 2b       	or	r18, r19
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <nwkTxDelayTimerHandler+0x3c>
    13ba:	fc 01       	movw	r30, r24
    13bc:	c0 83       	st	Z, r28
    13be:	10 2f       	mov	r17, r16
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <nwkTxDelayTimerHandler+0x3e>
    13c2:	10 2f       	mov	r17, r16
    13c4:	59 db       	rcall	.-2382   	; 0xa78 <nwkFrameNext>
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	51 f7       	brne	.-44     	; 0x139e <nwkTxDelayTimerHandler+0x18>
    13ca:	11 23       	and	r17, r17
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <nwkTxDelayTimerHandler+0x4c>
    13ce:	c7 01       	movw	r24, r14
    13d0:	86 d3       	rcall	.+1804   	; 0x1ade <SYS_TimerStart>
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	08 95       	ret

000013de <nwkTxAckWaitTimerHandler>:
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	7c 01       	movw	r14, r24
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	01 e0       	ldi	r16, 0x01	; 1
    13f4:	d7 e1       	ldi	r29, 0x17	; 23
    13f6:	c0 e1       	ldi	r28, 0x10	; 16
    13f8:	16 c0       	rjmp	.+44     	; 0x1426 <nwkTxAckWaitTimerHandler+0x48>
    13fa:	fc 01       	movw	r30, r24
    13fc:	20 81       	ld	r18, Z
    13fe:	26 31       	cpi	r18, 0x16	; 22
    1400:	91 f4       	brne	.+36     	; 0x1426 <nwkTxAckWaitTimerHandler+0x48>
    1402:	ec 57       	subi	r30, 0x7C	; 124
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	20 81       	ld	r18, Z
    1408:	31 81       	ldd	r19, Z+1	; 0x01
    140a:	21 50       	subi	r18, 0x01	; 1
    140c:	31 09       	sbc	r19, r1
    140e:	31 83       	std	Z+1, r19	; 0x01
    1410:	20 83       	st	Z, r18
    1412:	23 2b       	or	r18, r19
    1414:	39 f4       	brne	.+14     	; 0x1424 <nwkTxAckWaitTimerHandler+0x46>
    1416:	fc 01       	movw	r30, r24
    1418:	d0 83       	st	Z, r29
    141a:	ed 57       	subi	r30, 0x7D	; 125
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	c0 83       	st	Z, r28
    1420:	10 2f       	mov	r17, r16
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <nwkTxAckWaitTimerHandler+0x48>
    1424:	10 2f       	mov	r17, r16
    1426:	28 db       	rcall	.-2480   	; 0xa78 <nwkFrameNext>
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	39 f7       	brne	.-50     	; 0x13fa <nwkTxAckWaitTimerHandler+0x1c>
    142c:	11 23       	and	r17, r17
    142e:	11 f0       	breq	.+4      	; 0x1434 <nwkTxAckWaitTimerHandler+0x56>
    1430:	c7 01       	movw	r24, r14
    1432:	55 d3       	rcall	.+1706   	; 0x1ade <SYS_TimerStart>
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	08 95       	ret

00001442 <nwkTxInit>:
    1442:	10 92 70 1f 	sts	0x1F70, r1	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    1446:	10 92 6f 1f 	sts	0x1F6F, r1	; 0x801f6f <nwkTxPhyActiveFrame>
    144a:	e2 e6       	ldi	r30, 0x62	; 98
    144c:	ff e1       	ldi	r31, 0x1F	; 31
    144e:	82 e3       	ldi	r24, 0x32	; 50
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	86 83       	std	Z+6, r24	; 0x06
    1458:	97 83       	std	Z+7, r25	; 0x07
    145a:	a0 87       	std	Z+8, r26	; 0x08
    145c:	b1 87       	std	Z+9, r27	; 0x09
    145e:	12 86       	std	Z+10, r1	; 0x0a
    1460:	8f ee       	ldi	r24, 0xEF	; 239
    1462:	99 e0       	ldi	r25, 0x09	; 9
    1464:	94 87       	std	Z+12, r25	; 0x0c
    1466:	83 87       	std	Z+11, r24	; 0x0b
    1468:	e5 e5       	ldi	r30, 0x55	; 85
    146a:	ff e1       	ldi	r31, 0x1F	; 31
    146c:	8a e0       	ldi	r24, 0x0A	; 10
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	86 83       	std	Z+6, r24	; 0x06
    1476:	97 83       	std	Z+7, r25	; 0x07
    1478:	a0 87       	std	Z+8, r26	; 0x08
    147a:	b1 87       	std	Z+9, r27	; 0x09
    147c:	12 86       	std	Z+10, r1	; 0x0a
    147e:	83 ec       	ldi	r24, 0xC3	; 195
    1480:	99 e0       	ldi	r25, 0x09	; 9
    1482:	94 87       	std	Z+12, r25	; 0x0c
    1484:	83 87       	std	Z+11, r24	; 0x0b
    1486:	08 95       	ret

00001488 <nwkTxFrame>:
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
    148e:	fc 01       	movw	r30, r24
    1490:	ea 57       	subi	r30, 0x7A	; 122
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 81       	ld	r24, Z
    1496:	81 ff       	sbrs	r24, 1
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <nwkTxFrame+0x18>
    149a:	92 e1       	ldi	r25, 0x12	; 18
    149c:	98 83       	st	Y, r25
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <nwkTxFrame+0x1c>
    14a0:	92 e1       	ldi	r25, 0x12	; 18
    14a2:	98 83       	st	Y, r25
    14a4:	fe 01       	movw	r30, r28
    14a6:	ed 57       	subi	r30, 0x7D	; 125
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	10 82       	st	Z, r1
    14ac:	80 ff       	sbrs	r24, 0
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <nwkTxFrame+0x32>
    14b0:	2f ef       	ldi	r18, 0xFF	; 255
    14b2:	3f ef       	ldi	r19, 0xFF	; 255
    14b4:	3e 83       	std	Y+6, r19	; 0x06
    14b6:	2d 83       	std	Y+5, r18	; 0x05
    14b8:	06 c0       	rjmp	.+12     	; 0x14c6 <nwkTxFrame+0x3e>
    14ba:	20 91 fa 1f 	lds	r18, 0x1FFA	; 0x801ffa <nwkIb+0x2>
    14be:	30 91 fb 1f 	lds	r19, 0x1FFB	; 0x801ffb <nwkIb+0x3>
    14c2:	3e 83       	std	Y+6, r19	; 0x06
    14c4:	2d 83       	std	Y+5, r18	; 0x05
    14c6:	85 70       	andi	r24, 0x05	; 5
    14c8:	19 f4       	brne	.+6      	; 0x14d0 <nwkTxFrame+0x48>
    14ca:	ce 01       	movw	r24, r28
    14cc:	31 dc       	rcall	.-1950   	; 0xd30 <nwkRoutePrepareTx>
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <nwkTxFrame+0x50>
    14d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d2:	98 89       	ldd	r25, Y+16	; 0x10
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	8f 83       	std	Y+7, r24	; 0x07
    14d8:	e8 ef       	ldi	r30, 0xF8	; 248
    14da:	ff e1       	ldi	r31, 0x1F	; 31
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	9a 87       	std	Y+10, r25	; 0x0a
    14e2:	89 87       	std	Y+9, r24	; 0x09
    14e4:	85 81       	ldd	r24, Z+5	; 0x05
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	85 83       	std	Z+5, r24	; 0x05
    14ea:	8c 83       	std	Y+4, r24	; 0x04
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
    14ee:	98 85       	ldd	r25, Y+8	; 0x08
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	69 f4       	brne	.+26     	; 0x150e <nwkTxFrame+0x86>
    14f4:	81 e4       	ldi	r24, 0x41	; 65
    14f6:	98 e8       	ldi	r25, 0x88	; 136
    14f8:	9b 83       	std	Y+3, r25	; 0x03
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	d7 d3       	rcall	.+1966   	; 0x1cac <rand>
    14fe:	cc 57       	subi	r28, 0x7C	; 124
    1500:	df 4f       	sbci	r29, 0xFF	; 255
    1502:	87 70       	andi	r24, 0x07	; 7
    1504:	99 27       	eor	r25, r25
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	99 83       	std	Y+1, r25	; 0x01
    150a:	88 83       	st	Y, r24
    150c:	08 c0       	rjmp	.+16     	; 0x151e <nwkTxFrame+0x96>
    150e:	81 e6       	ldi	r24, 0x61	; 97
    1510:	98 e8       	ldi	r25, 0x88	; 136
    1512:	9b 83       	std	Y+3, r25	; 0x03
    1514:	8a 83       	std	Y+2, r24	; 0x02
    1516:	cc 57       	subi	r28, 0x7C	; 124
    1518:	df 4f       	sbci	r29, 0xFF	; 255
    151a:	19 82       	std	Y+1, r1	; 0x01
    151c:	18 82       	st	Y, r1
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <nwkTxBroadcastFrame>:
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8c 01       	movw	r16, r24
    152e:	61 da       	rcall	.-2878   	; 0x9f2 <nwkFrameAlloc>
    1530:	ec 01       	movw	r28, r24
    1532:	89 2b       	or	r24, r25
    1534:	a9 f1       	breq	.+106    	; 0x15a0 <nwkTxBroadcastFrame+0x7c>
    1536:	82 e1       	ldi	r24, 0x12	; 18
    1538:	88 83       	st	Y, r24
    153a:	f8 01       	movw	r30, r16
    153c:	81 81       	ldd	r24, Z+1	; 0x01
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	fe 01       	movw	r30, r28
    1542:	ed 57       	subi	r30, 0x7D	; 125
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	10 82       	st	Z, r1
    1548:	b1 d3       	rcall	.+1890   	; 0x1cac <rand>
    154a:	fe 01       	movw	r30, r28
    154c:	ec 57       	subi	r30, 0x7C	; 124
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	87 70       	andi	r24, 0x07	; 7
    1552:	99 27       	eor	r25, r25
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
    155a:	33 96       	adiw	r30, 0x03	; 3
    155c:	11 82       	std	Z+1, r1	; 0x01
    155e:	10 82       	st	Z, r1
    1560:	f8 01       	movw	r30, r16
    1562:	41 81       	ldd	r20, Z+1	; 0x01
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	b8 01       	movw	r22, r16
    1568:	6e 5f       	subi	r22, 0xFE	; 254
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	ce 01       	movw	r24, r28
    156e:	02 96       	adiw	r24, 0x02	; 2
    1570:	ab d3       	rcall	.+1878   	; 0x1cc8 <memcpy>
    1572:	81 e4       	ldi	r24, 0x41	; 65
    1574:	98 e8       	ldi	r25, 0x88	; 136
    1576:	9b 83       	std	Y+3, r25	; 0x03
    1578:	8a 83       	std	Y+2, r24	; 0x02
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	9f ef       	ldi	r25, 0xFF	; 255
    157e:	98 87       	std	Y+8, r25	; 0x08
    1580:	8f 83       	std	Y+7, r24	; 0x07
    1582:	f8 01       	movw	r30, r16
    1584:	85 81       	ldd	r24, Z+5	; 0x05
    1586:	96 81       	ldd	r25, Z+6	; 0x06
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	e8 ef       	ldi	r30, 0xF8	; 248
    158e:	ff e1       	ldi	r31, 0x1F	; 31
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	9a 87       	std	Y+10, r25	; 0x0a
    1596:	89 87       	std	Y+9, r24	; 0x09
    1598:	85 81       	ldd	r24, Z+5	; 0x05
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	85 83       	std	Z+5, r24	; 0x05
    159e:	8c 83       	std	Y+4, r24	; 0x04
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <nwkTxAckReceived>:
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	fc 01       	movw	r30, r24
    15b0:	21 85       	ldd	r18, Z+9	; 0x09
    15b2:	23 30       	cpi	r18, 0x03	; 3
    15b4:	d9 f4       	brne	.+54     	; 0x15ec <nwkTxAckReceived+0x42>
    15b6:	10 c0       	rjmp	.+32     	; 0x15d8 <nwkTxAckReceived+0x2e>
    15b8:	fc 01       	movw	r30, r24
    15ba:	20 81       	ld	r18, Z
    15bc:	26 31       	cpi	r18, 0x16	; 22
    15be:	89 f4       	brne	.+34     	; 0x15e2 <nwkTxAckReceived+0x38>
    15c0:	34 85       	ldd	r19, Z+12	; 0x0c
    15c2:	29 81       	ldd	r18, Y+1	; 0x01
    15c4:	32 13       	cpse	r19, r18
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <nwkTxAckReceived+0x38>
    15c8:	27 e1       	ldi	r18, 0x17	; 23
    15ca:	20 83       	st	Z, r18
    15cc:	2a 81       	ldd	r18, Y+2	; 0x02
    15ce:	ea 57       	subi	r30, 0x7A	; 122
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	20 83       	st	Z, r18
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	0b c0       	rjmp	.+22     	; 0x15ee <nwkTxAckReceived+0x44>
    15d8:	fc 01       	movw	r30, r24
    15da:	c7 81       	ldd	r28, Z+7	; 0x07
    15dc:	d0 85       	ldd	r29, Z+8	; 0x08
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	4a da       	rcall	.-2924   	; 0xa78 <nwkFrameNext>
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	41 f7       	brne	.-48     	; 0x15b8 <nwkTxAckReceived+0xe>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <nwkTxAckReceived+0x44>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    15f4:	e0 91 6f 1f 	lds	r30, 0x1F6F	; 0x801f6f <nwkTxPhyActiveFrame>
    15f8:	f0 91 70 1f 	lds	r31, 0x1F70	; 0x801f70 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	21 f0       	breq	.+8      	; 0x1608 <PHY_DataConf+0x14>
    1600:	48 f0       	brcs	.+18     	; 0x1614 <PHY_DataConf+0x20>
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	19 f0       	breq	.+6      	; 0x160c <PHY_DataConf+0x18>
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    160c:	81 e2       	ldi	r24, 0x21	; 33
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1614:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1616:	df 01       	movw	r26, r30
    1618:	ad 57       	subi	r26, 0x7D	; 125
    161a:	bf 4f       	sbci	r27, 0xFF	; 255
    161c:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    161e:	85 e1       	ldi	r24, 0x15	; 21
    1620:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1622:	10 92 70 1f 	sts	0x1F70, r1	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    1626:	10 92 6f 1f 	sts	0x1F6F, r1	; 0x801f6f <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    162a:	e8 ef       	ldi	r30, 0xF8	; 248
    162c:	ff e1       	ldi	r31, 0x1F	; 31
    162e:	86 a1       	ldd	r24, Z+38	; 0x26
    1630:	97 a1       	ldd	r25, Z+39	; 0x27
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	97 a3       	std	Z+39, r25	; 0x27
    1636:	86 a3       	std	Z+38, r24	; 0x26
    1638:	08 95       	ret

0000163a <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1650:	c0 e0       	ldi	r28, 0x00	; 0
    1652:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1654:	0f 2e       	mov	r0, r31
    1656:	f4 e1       	ldi	r31, 0x14	; 20
    1658:	af 2e       	mov	r10, r31
    165a:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    165c:	08 ef       	ldi	r16, 0xF8	; 248
    165e:	1f e1       	ldi	r17, 0x1F	; 31
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1660:	0f 2e       	mov	r0, r31
    1662:	f7 e1       	ldi	r31, 0x17	; 23
    1664:	df 2e       	mov	r13, r31
    1666:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1668:	0f 2e       	mov	r0, r31
    166a:	f6 e1       	ldi	r31, 0x16	; 22
    166c:	9f 2e       	mov	r9, r31
    166e:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1670:	0f 2e       	mov	r0, r31
    1672:	f9 e2       	ldi	r31, 0x29	; 41
    1674:	ef 2e       	mov	r14, r31
    1676:	f1 2c       	mov	r15, r1
    1678:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    167a:	0f 2e       	mov	r0, r31
    167c:	f3 e1       	ldi	r31, 0x13	; 19
    167e:	cf 2e       	mov	r12, r31
    1680:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1682:	0f 2e       	mov	r0, r31
    1684:	f1 e1       	ldi	r31, 0x11	; 17
    1686:	bf 2e       	mov	r11, r31
    1688:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    168a:	60 c0       	rjmp	.+192    	; 0x174c <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    168c:	88 81       	ld	r24, Y
    168e:	83 31       	cpi	r24, 0x13	; 19
    1690:	c1 f0       	breq	.+48     	; 0x16c2 <nwkTxTaskHandler+0x88>
    1692:	18 f4       	brcc	.+6      	; 0x169a <nwkTxTaskHandler+0x60>
    1694:	82 31       	cpi	r24, 0x12	; 18
    1696:	39 f0       	breq	.+14     	; 0x16a6 <nwkTxTaskHandler+0x6c>
    1698:	59 c0       	rjmp	.+178    	; 0x174c <nwkTxTaskHandler+0x112>
    169a:	85 31       	cpi	r24, 0x15	; 21
    169c:	49 f1       	breq	.+82     	; 0x16f0 <nwkTxTaskHandler+0xb6>
    169e:	87 31       	cpi	r24, 0x17	; 23
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <nwkTxTaskHandler+0x6a>
    16a2:	45 c0       	rjmp	.+138    	; 0x172e <nwkTxTaskHandler+0xf4>
    16a4:	53 c0       	rjmp	.+166    	; 0x174c <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    16a6:	fe 01       	movw	r30, r28
    16a8:	ec 57       	subi	r30, 0x7C	; 124
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	89 2b       	or	r24, r25
    16b2:	29 f0       	breq	.+10     	; 0x16be <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    16b4:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    16b6:	85 e5       	ldi	r24, 0x55	; 85
    16b8:	9f e1       	ldi	r25, 0x1F	; 31
    16ba:	11 d2       	rcall	.+1058   	; 0x1ade <SYS_TimerStart>
    16bc:	47 c0       	rjmp	.+142    	; 0x174c <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    16be:	c8 82       	st	Y, r12
    16c0:	45 c0       	rjmp	.+138    	; 0x174c <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    16c2:	80 91 6f 1f 	lds	r24, 0x1F6F	; 0x801f6f <nwkTxPhyActiveFrame>
    16c6:	90 91 70 1f 	lds	r25, 0x1F70	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    16ca:	89 2b       	or	r24, r25
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <nwkTxTaskHandler+0x96>
    16ce:	3e c0       	rjmp	.+124    	; 0x174c <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    16d0:	d0 93 70 1f 	sts	0x1F70, r29	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    16d4:	c0 93 6f 1f 	sts	0x1F6F, r28	; 0x801f6f <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    16d8:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    16da:	69 81       	ldd	r22, Y+1	; 0x01
    16dc:	ce 01       	movw	r24, r28
    16de:	02 96       	adiw	r24, 0x02	; 2
    16e0:	cb d0       	rcall	.+406    	; 0x1878 <PHY_DataReq>
          nwkIb.lock++;
    16e2:	f8 01       	movw	r30, r16
    16e4:	86 a1       	ldd	r24, Z+38	; 0x26
    16e6:	97 a1       	ldd	r25, Z+39	; 0x27
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	97 a3       	std	Z+39, r25	; 0x27
    16ec:	86 a3       	std	Z+38, r24	; 0x26
    16ee:	2e c0       	rjmp	.+92     	; 0x174c <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    16f0:	fe 01       	movw	r30, r28
    16f2:	ed 57       	subi	r30, 0x7D	; 125
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 81       	ld	r24, Z
    16f8:	81 11       	cpse	r24, r1
    16fa:	17 c0       	rjmp	.+46     	; 0x172a <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    16fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    16fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1700:	f8 01       	movw	r30, r16
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	28 17       	cp	r18, r24
    1708:	39 07       	cpc	r19, r25
    170a:	69 f4       	brne	.+26     	; 0x1726 <nwkTxTaskHandler+0xec>
    170c:	8b 85       	ldd	r24, Y+11	; 0x0b
    170e:	80 ff       	sbrs	r24, 0
    1710:	0a c0       	rjmp	.+20     	; 0x1726 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1712:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1714:	fe 01       	movw	r30, r28
    1716:	ec 57       	subi	r30, 0x7C	; 124
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	f1 82       	std	Z+1, r15	; 0x01
    171c:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    171e:	82 e6       	ldi	r24, 0x62	; 98
    1720:	9f e1       	ldi	r25, 0x1F	; 31
    1722:	dd d1       	rcall	.+954    	; 0x1ade <SYS_TimerStart>
    1724:	13 c0       	rjmp	.+38     	; 0x174c <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1726:	d8 82       	st	Y, r13
    1728:	11 c0       	rjmp	.+34     	; 0x174c <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    172a:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    172c:	0f c0       	rjmp	.+30     	; 0x174c <nwkTxTaskHandler+0x112>
    172e:	ce 01       	movw	r24, r28
    1730:	b8 da       	rcall	.-2704   	; 0xca2 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1732:	fe 01       	movw	r30, r28
    1734:	e9 57       	subi	r30, 0x79	; 121
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	01 90       	ld	r0, Z+
    173a:	f0 81       	ld	r31, Z
    173c:	e0 2d       	mov	r30, r0
    173e:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    1740:	19 f4       	brne	.+6      	; 0x1748 <nwkTxTaskHandler+0x10e>
    1742:	ce 01       	movw	r24, r28
    1744:	8f d9       	rcall	.-3298   	; 0xa64 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1746:	02 c0       	rjmp	.+4      	; 0x174c <nwkTxTaskHandler+0x112>
    1748:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    174a:	19 95       	eicall
    174c:	ce 01       	movw	r24, r28
    174e:	94 d9       	rcall	.-3288   	; 0xa78 <nwkFrameNext>
    1750:	ec 01       	movw	r28, r24
    1752:	89 2b       	or	r24, r25
    1754:	09 f0       	breq	.+2      	; 0x1758 <nwkTxTaskHandler+0x11e>
    1756:	9a cf       	rjmp	.-204    	; 0x168c <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	9f 90       	pop	r9
    176e:	08 95       	ret

00001770 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1770:	80 91 71 1f 	lds	r24, 0x1F71	; 0x801f71 <phyBand>
    1774:	98 2f       	mov	r25, r24
    1776:	9f 70       	andi	r25, 0x0F	; 15
    1778:	e4 e5       	ldi	r30, 0x54	; 84
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	80 81       	ld	r24, Z
    177e:	80 7f       	andi	r24, 0xF0	; 240
    1780:	89 2b       	or	r24, r25
    1782:	80 83       	st	Z, r24
    1784:	80 91 71 1f 	lds	r24, 0x1F71	; 0x801f71 <phyBand>
    1788:	88 23       	and	r24, r24
    178a:	29 f0       	breq	.+10     	; 0x1796 <phySetChannel+0x26>
    178c:	80 91 72 1f 	lds	r24, 0x1F72	; 0x801f72 <phyChannel>
    1790:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    1794:	08 95       	ret
    1796:	80 91 72 1f 	lds	r24, 0x1F72	; 0x801f72 <phyChannel>
    179a:	98 2f       	mov	r25, r24
    179c:	9f 71       	andi	r25, 0x1F	; 31
    179e:	e8 e4       	ldi	r30, 0x48	; 72
    17a0:	f1 e0       	ldi	r31, 0x01	; 1
    17a2:	80 81       	ld	r24, Z
    17a4:	80 7e       	andi	r24, 0xE0	; 224
    17a6:	89 2b       	or	r24, r25
    17a8:	80 83       	st	Z, r24
    17aa:	08 95       	ret

000017ac <phyTrxSetState>:
    17ac:	93 e0       	ldi	r25, 0x03	; 3
    17ae:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    17b2:	e1 e4       	ldi	r30, 0x41	; 65
    17b4:	f1 e0       	ldi	r31, 0x01	; 1
    17b6:	90 81       	ld	r25, Z
    17b8:	9f 71       	andi	r25, 0x1F	; 31
    17ba:	98 30       	cpi	r25, 0x08	; 8
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <phyTrxSetState+0xa>
    17be:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    17c2:	e1 e4       	ldi	r30, 0x41	; 65
    17c4:	f1 e0       	ldi	r31, 0x01	; 1
    17c6:	90 81       	ld	r25, Z
    17c8:	9f 71       	andi	r25, 0x1F	; 31
    17ca:	89 13       	cpse	r24, r25
    17cc:	fc cf       	rjmp	.-8      	; 0x17c6 <phyTrxSetState+0x1a>
    17ce:	08 95       	ret

000017d0 <phySetRxState>:
    17d0:	88 e0       	ldi	r24, 0x08	; 8
    17d2:	ec df       	rcall	.-40     	; 0x17ac <phyTrxSetState>
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    17da:	80 91 73 1f 	lds	r24, 0x1F73	; 0x801f73 <phyRxState>
    17de:	88 23       	and	r24, r24
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <phySetRxState+0x16>
    17e2:	86 e1       	ldi	r24, 0x16	; 22
    17e4:	e3 cf       	rjmp	.-58     	; 0x17ac <phyTrxSetState>
    17e6:	08 95       	ret

000017e8 <PHY_Init>:
    17e8:	e9 e3       	ldi	r30, 0x39	; 57
    17ea:	f1 e0       	ldi	r31, 0x01	; 1
    17ec:	80 81       	ld	r24, Z
    17ee:	81 60       	ori	r24, 0x01	; 1
    17f0:	80 83       	st	Z, r24
    17f2:	10 92 73 1f 	sts	0x1F73, r1	; 0x801f73 <phyRxState>
    17f6:	10 92 71 1f 	sts	0x1F71, r1	; 0x801f71 <phyBand>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <phyState>
    1800:	88 e0       	ldi	r24, 0x08	; 8
    1802:	d4 df       	rcall	.-88     	; 0x17ac <phyTrxSetState>
    1804:	8b ee       	ldi	r24, 0xEB	; 235
    1806:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    180a:	ec e4       	ldi	r30, 0x4C	; 76
    180c:	f1 e0       	ldi	r31, 0x01	; 1
    180e:	80 81       	ld	r24, Z
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	80 83       	st	Z, r24
    1814:	08 95       	ret

00001816 <PHY_SetRxState>:
    1816:	80 93 73 1f 	sts	0x1F73, r24	; 0x801f73 <phyRxState>
    181a:	da cf       	rjmp	.-76     	; 0x17d0 <phySetRxState>
    181c:	08 95       	ret

0000181e <PHY_SetChannel>:
    181e:	80 93 72 1f 	sts	0x1F72, r24	; 0x801f72 <phyChannel>
    1822:	a6 cf       	rjmp	.-180    	; 0x1770 <phySetChannel>
    1824:	08 95       	ret

00001826 <PHY_SetPanId>:
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	1f 92       	push	r1
    182c:	1f 92       	push	r1
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <PHY_SetShortAddr>:
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	1f 92       	push	r1
    1850:	1f 92       	push	r1
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    1864:	99 81       	ldd	r25, Y+1	; 0x01
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	89 0f       	add	r24, r25
    186a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	18 2f       	mov	r17, r24
    1880:	d9 2f       	mov	r29, r25
    1882:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1884:	89 e1       	ldi	r24, 0x19	; 25
    1886:	92 df       	rcall	.-220    	; 0x17ac <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1888:	8f ef       	ldi	r24, 0xFF	; 255
    188a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	8c 0f       	add	r24, r28
    1892:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    1896:	cc 23       	and	r28, r28
    1898:	71 f0       	breq	.+28     	; 0x18b6 <PHY_DataReq+0x3e>
    189a:	a1 2f       	mov	r26, r17
    189c:	bd 2f       	mov	r27, r29
    189e:	c1 50       	subi	r28, 0x01	; 1
    18a0:	6c 2f       	mov	r22, r28
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	6e 57       	subi	r22, 0x7E	; 126
    18a6:	7e 4f       	sbci	r23, 0xFE	; 254
    18a8:	e1 e8       	ldi	r30, 0x81	; 129
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    18ac:	8d 91       	ld	r24, X+
    18ae:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    18b0:	e6 17       	cp	r30, r22
    18b2:	f7 07       	cpc	r31, r23
    18b4:	d9 f7       	brne	.-10     	; 0x18ac <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    18b6:	83 e0       	ldi	r24, 0x03	; 3
    18b8:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	08 95       	ret

000018ca <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <PHY_TaskHandler+0x8>
    18d2:	1f 92       	push	r1
    18d4:	1f 92       	push	r1
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    18da:	80 91 f4 1f 	lds	r24, 0x1FF4	; 0x801ff4 <phyState>
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <PHY_TaskHandler+0x1a>
    18e2:	65 c0       	rjmp	.+202    	; 0x19ae <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    18e4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    18e8:	83 ff       	sbrs	r24, 3
    18ea:	3e c0       	rjmp	.+124    	; 0x1968 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    18ec:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    18f0:	6a 2f       	mov	r22, r26
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	ab 01       	movw	r20, r22
    18f6:	4f 5f       	subi	r20, 0xFF	; 255
    18f8:	5f 4f       	sbci	r21, 0xFF	; 255
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1900:	fc 01       	movw	r30, r24
    1902:	e0 58       	subi	r30, 0x80	; 128
    1904:	fe 4f       	sbci	r31, 0xFE	; 254
    1906:	30 81       	ld	r19, Z
    1908:	fc 01       	movw	r30, r24
    190a:	ec 58       	subi	r30, 0x8C	; 140
    190c:	f0 4e       	sbci	r31, 0xE0	; 224
    190e:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	82 2f       	mov	r24, r18
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	84 17       	cp	r24, r20
    1918:	95 07       	cpc	r25, r21
    191a:	94 f3       	brlt	.-28     	; 0x1900 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    191c:	84 e7       	ldi	r24, 0x74	; 116
    191e:	9f e1       	ldi	r25, 0x1F	; 31
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1924:	a2 50       	subi	r26, 0x02	; 2
    1926:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1928:	fb 01       	movw	r30, r22
    192a:	ec 58       	subi	r30, 0x8C	; 140
    192c:	f0 4e       	sbci	r31, 0xE0	; 224
    192e:	80 81       	ld	r24, Z
    1930:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1932:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1936:	8a 55       	subi	r24, 0x5A	; 90
    1938:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	bd da       	rcall	.-2694   	; 0xeba <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1940:	e1 e4       	ldi	r30, 0x41	; 65
    1942:	f1 e0       	ldi	r31, 0x01	; 1
    1944:	80 81       	ld	r24, Z
    1946:	8f 71       	andi	r24, 0x1F	; 31
    1948:	86 31       	cpi	r24, 0x16	; 22
    194a:	e1 f7       	brne	.-8      	; 0x1944 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    194c:	ef e4       	ldi	r30, 0x4F	; 79
    194e:	f1 e0       	ldi	r31, 0x01	; 1
    1950:	80 81       	ld	r24, Z
    1952:	88 60       	ori	r24, 0x08	; 8
    1954:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1956:	ec e4       	ldi	r30, 0x4C	; 76
    1958:	f1 e0       	ldi	r31, 0x01	; 1
    195a:	80 81       	ld	r24, Z
    195c:	8f 77       	andi	r24, 0x7F	; 127
    195e:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1960:	80 81       	ld	r24, Z
    1962:	80 68       	ori	r24, 0x80	; 128
    1964:	80 83       	st	Z, r24
    1966:	23 c0       	rjmp	.+70     	; 0x19ae <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    1968:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    196c:	86 ff       	sbrs	r24, 6
    196e:	1f c0       	rjmp	.+62     	; 0x19ae <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1970:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1974:	8f 71       	andi	r24, 0x1F	; 31
    1976:	89 31       	cpi	r24, 0x19	; 25
    1978:	a9 f4       	brne	.+42     	; 0x19a4 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    197a:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    197e:	12 95       	swap	r17
    1980:	16 95       	lsr	r17
    1982:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1984:	49 f0       	breq	.+18     	; 0x1998 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1986:	13 30       	cpi	r17, 0x03	; 3
    1988:	21 f0       	breq	.+8      	; 0x1992 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    198a:	15 30       	cpi	r17, 0x05	; 5
    198c:	21 f0       	breq	.+8      	; 0x1996 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    198e:	13 e0       	ldi	r17, 0x03	; 3
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1992:	11 e0       	ldi	r17, 0x01	; 1
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    1996:	12 e0       	ldi	r17, 0x02	; 2
    1998:	1b df       	rcall	.-458    	; 0x17d0 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <phyState>

      PHY_DataConf(status);
    19a0:	81 2f       	mov	r24, r17
    19a2:	28 de       	rcall	.-944    	; 0x15f4 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    19a4:	ef e4       	ldi	r30, 0x4F	; 79
    19a6:	f1 e0       	ldi	r31, 0x01	; 1
    19a8:	80 81       	ld	r24, Z
    19aa:	80 64       	ori	r24, 0x40	; 64
    19ac:	80 83       	st	Z, r24
  }
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	08 95       	ret

000019c0 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    19c0:	0e 94 44 02 	call	0x488	; 0x488 <HAL_Init>
  SYS_TimerInit();
    19c4:	6d d0       	rcall	.+218    	; 0x1aa0 <SYS_TimerInit>
  PHY_Init();
    19c6:	10 df       	rcall	.-480    	; 0x17e8 <PHY_Init>
    19c8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <NWK_Init>
  NWK_Init();
    19cc:	08 95       	ret

000019ce <SYS_TaskHandler>:
    19ce:	7d df       	rcall	.-262    	; 0x18ca <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    19d0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    19d4:	8f c0       	rjmp	.+286    	; 0x1af4 <SYS_TimerTaskHandler>
    19d6:	08 95       	ret

000019d8 <placeTimer>:
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	ec 01       	movw	r28, r24
    19e2:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <timers>
    19e6:	90 91 f6 1f 	lds	r25, 0x1FF6	; 0x801ff6 <timers+0x1>
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <placeTimer+0x18>
    19ee:	45 c0       	rjmp	.+138    	; 0x1a7a <placeTimer+0xa2>
    19f0:	4e 81       	ldd	r20, Y+6	; 0x06
    19f2:	5f 81       	ldd	r21, Y+7	; 0x07
    19f4:	68 85       	ldd	r22, Y+8	; 0x08
    19f6:	79 85       	ldd	r23, Y+9	; 0x09
    19f8:	fc 01       	movw	r30, r24
    19fa:	02 81       	ldd	r16, Z+2	; 0x02
    19fc:	13 81       	ldd	r17, Z+3	; 0x03
    19fe:	24 81       	ldd	r18, Z+4	; 0x04
    1a00:	35 81       	ldd	r19, Z+5	; 0x05
    1a02:	40 17       	cp	r20, r16
    1a04:	51 07       	cpc	r21, r17
    1a06:	62 07       	cpc	r22, r18
    1a08:	73 07       	cpc	r23, r19
    1a0a:	60 f0       	brcs	.+24     	; 0x1a24 <placeTimer+0x4c>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	17 c0       	rjmp	.+46     	; 0x1a3e <placeTimer+0x66>
    1a10:	02 81       	ldd	r16, Z+2	; 0x02
    1a12:	13 81       	ldd	r17, Z+3	; 0x03
    1a14:	24 81       	ldd	r18, Z+4	; 0x04
    1a16:	35 81       	ldd	r19, Z+5	; 0x05
    1a18:	40 17       	cp	r20, r16
    1a1a:	51 07       	cpc	r21, r17
    1a1c:	62 07       	cpc	r22, r18
    1a1e:	73 07       	cpc	r23, r19
    1a20:	68 f4       	brcc	.+26     	; 0x1a3c <placeTimer+0x64>
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <placeTimer+0x52>
    1a24:	fc 01       	movw	r30, r24
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	04 1b       	sub	r16, r20
    1a2c:	15 0b       	sbc	r17, r21
    1a2e:	26 0b       	sbc	r18, r22
    1a30:	37 0b       	sbc	r19, r23
    1a32:	02 83       	std	Z+2, r16	; 0x02
    1a34:	13 83       	std	Z+3, r17	; 0x03
    1a36:	24 83       	std	Z+4, r18	; 0x04
    1a38:	35 83       	std	Z+5, r19	; 0x05
    1a3a:	0a c0       	rjmp	.+20     	; 0x1a50 <placeTimer+0x78>
    1a3c:	df 01       	movw	r26, r30
    1a3e:	40 1b       	sub	r20, r16
    1a40:	51 0b       	sbc	r21, r17
    1a42:	62 0b       	sbc	r22, r18
    1a44:	73 0b       	sbc	r23, r19
    1a46:	ed 91       	ld	r30, X+
    1a48:	fc 91       	ld	r31, X
    1a4a:	11 97       	sbiw	r26, 0x01	; 1
    1a4c:	30 97       	sbiw	r30, 0x00	; 0
    1a4e:	01 f7       	brne	.-64     	; 0x1a10 <placeTimer+0x38>
    1a50:	4a 83       	std	Y+2, r20	; 0x02
    1a52:	5b 83       	std	Y+3, r21	; 0x03
    1a54:	6c 83       	std	Y+4, r22	; 0x04
    1a56:	7d 83       	std	Y+5, r23	; 0x05
    1a58:	10 97       	sbiw	r26, 0x00	; 0
    1a5a:	41 f0       	breq	.+16     	; 0x1a6c <placeTimer+0x94>
    1a5c:	8d 91       	ld	r24, X+
    1a5e:	9c 91       	ld	r25, X
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	99 83       	std	Y+1, r25	; 0x01
    1a64:	88 83       	st	Y, r24
    1a66:	cd 93       	st	X+, r28
    1a68:	dc 93       	st	X, r29
    1a6a:	15 c0       	rjmp	.+42     	; 0x1a96 <placeTimer+0xbe>
    1a6c:	99 83       	std	Y+1, r25	; 0x01
    1a6e:	88 83       	st	Y, r24
    1a70:	d0 93 f6 1f 	sts	0x1FF6, r29	; 0x801ff6 <timers+0x1>
    1a74:	c0 93 f5 1f 	sts	0x1FF5, r28	; 0x801ff5 <timers>
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <placeTimer+0xbe>
    1a7a:	19 82       	std	Y+1, r1	; 0x01
    1a7c:	18 82       	st	Y, r1
    1a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a80:	9f 81       	ldd	r25, Y+7	; 0x07
    1a82:	a8 85       	ldd	r26, Y+8	; 0x08
    1a84:	b9 85       	ldd	r27, Y+9	; 0x09
    1a86:	8a 83       	std	Y+2, r24	; 0x02
    1a88:	9b 83       	std	Y+3, r25	; 0x03
    1a8a:	ac 83       	std	Y+4, r26	; 0x04
    1a8c:	bd 83       	std	Y+5, r27	; 0x05
    1a8e:	d0 93 f6 1f 	sts	0x1FF6, r29	; 0x801ff6 <timers+0x1>
    1a92:	c0 93 f5 1f 	sts	0x1FF5, r28	; 0x801ff5 <timers>
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <SYS_TimerInit>:
    1aa0:	10 92 f6 1f 	sts	0x1FF6, r1	; 0x801ff6 <timers+0x1>
    1aa4:	10 92 f5 1f 	sts	0x1FF5, r1	; 0x801ff5 <timers>
    1aa8:	08 95       	ret

00001aaa <SYS_TimerStarted>:
    1aaa:	e0 91 f5 1f 	lds	r30, 0x1FF5	; 0x801ff5 <timers>
    1aae:	f0 91 f6 1f 	lds	r31, 0x1FF6	; 0x801ff6 <timers+0x1>
    1ab2:	30 97       	sbiw	r30, 0x00	; 0
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <SYS_TimerStarted+0x28>
    1ab6:	e8 17       	cp	r30, r24
    1ab8:	f9 07       	cpc	r31, r25
    1aba:	21 f4       	brne	.+8      	; 0x1ac4 <SYS_TimerStarted+0x1a>
    1abc:	0c c0       	rjmp	.+24     	; 0x1ad6 <SYS_TimerStarted+0x2c>
    1abe:	8e 17       	cp	r24, r30
    1ac0:	9f 07       	cpc	r25, r31
    1ac2:	59 f0       	breq	.+22     	; 0x1ada <SYS_TimerStarted+0x30>
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	f0 81       	ld	r31, Z
    1ac8:	e0 2d       	mov	r30, r0
    1aca:	30 97       	sbiw	r30, 0x00	; 0
    1acc:	c1 f7       	brne	.-16     	; 0x1abe <SYS_TimerStarted+0x14>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	08 95       	ret
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	08 95       	ret
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	08 95       	ret
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	08 95       	ret

00001ade <SYS_TimerStart>:
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	ec 01       	movw	r28, r24
    1ae4:	e2 df       	rcall	.-60     	; 0x1aaa <SYS_TimerStarted>
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <SYS_TimerStart+0x10>
    1aea:	ce 01       	movw	r24, r28
    1aec:	75 df       	rcall	.-278    	; 0x19d8 <placeTimer>
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	08 95       	ret

00001af4 <SYS_TimerTaskHandler>:
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <halTimerIrqCount>
    1b04:	88 23       	and	r24, r24
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <SYS_TimerTaskHandler+0x16>
    1b08:	59 c0       	rjmp	.+178    	; 0x1bbc <SYS_TimerTaskHandler+0xc8>
    1b0a:	8f b7       	in	r24, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	c0 90 f7 1f 	lds	r12, 0x1FF7	; 0x801ff7 <halTimerIrqCount>
    1b12:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <halTimerIrqCount>
    1b16:	8f bf       	out	0x3f, r24	; 63
    1b18:	d1 2c       	mov	r13, r1
    1b1a:	e1 2c       	mov	r14, r1
    1b1c:	f1 2c       	mov	r15, r1
    1b1e:	cc 0c       	add	r12, r12
    1b20:	dd 1c       	adc	r13, r13
    1b22:	ee 1c       	adc	r14, r14
    1b24:	ff 1c       	adc	r15, r15
    1b26:	d7 01       	movw	r26, r14
    1b28:	c6 01       	movw	r24, r12
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	aa 1f       	adc	r26, r26
    1b30:	bb 1f       	adc	r27, r27
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	aa 1f       	adc	r26, r26
    1b38:	bb 1f       	adc	r27, r27
    1b3a:	c8 0e       	add	r12, r24
    1b3c:	d9 1e       	adc	r13, r25
    1b3e:	ea 1e       	adc	r14, r26
    1b40:	fb 1e       	adc	r15, r27
    1b42:	c0 91 f5 1f 	lds	r28, 0x1FF5	; 0x801ff5 <timers>
    1b46:	d0 91 f6 1f 	lds	r29, 0x1FF6	; 0x801ff6 <timers+0x1>
    1b4a:	20 97       	sbiw	r28, 0x00	; 0
    1b4c:	b9 f1       	breq	.+110    	; 0x1bbc <SYS_TimerTaskHandler+0xc8>
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	9b 81       	ldd	r25, Y+3	; 0x03
    1b52:	ac 81       	ldd	r26, Y+4	; 0x04
    1b54:	bd 81       	ldd	r27, Y+5	; 0x05
    1b56:	c8 16       	cp	r12, r24
    1b58:	d9 06       	cpc	r13, r25
    1b5a:	ea 06       	cpc	r14, r26
    1b5c:	fb 06       	cpc	r15, r27
    1b5e:	10 f1       	brcs	.+68     	; 0x1ba4 <SYS_TimerTaskHandler+0xb0>
    1b60:	c8 1a       	sub	r12, r24
    1b62:	d9 0a       	sbc	r13, r25
    1b64:	ea 0a       	sbc	r14, r26
    1b66:	fb 0a       	sbc	r15, r27
    1b68:	88 81       	ld	r24, Y
    1b6a:	99 81       	ldd	r25, Y+1	; 0x01
    1b6c:	90 93 f6 1f 	sts	0x1FF6, r25	; 0x801ff6 <timers+0x1>
    1b70:	80 93 f5 1f 	sts	0x1FF5, r24	; 0x801ff5 <timers>
    1b74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <SYS_TimerTaskHandler+0x8a>
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	2d df       	rcall	.-422    	; 0x19d8 <placeTimer>
    1b7e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b80:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b82:	ce 01       	movw	r24, r28
    1b84:	19 95       	eicall
    1b86:	c0 91 f5 1f 	lds	r28, 0x1FF5	; 0x801ff5 <timers>
    1b8a:	d0 91 f6 1f 	lds	r29, 0x1FF6	; 0x801ff6 <timers+0x1>
    1b8e:	20 97       	sbiw	r28, 0x00	; 0
    1b90:	a9 f0       	breq	.+42     	; 0x1bbc <SYS_TimerTaskHandler+0xc8>
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	ac 81       	ldd	r26, Y+4	; 0x04
    1b98:	bd 81       	ldd	r27, Y+5	; 0x05
    1b9a:	c8 16       	cp	r12, r24
    1b9c:	d9 06       	cpc	r13, r25
    1b9e:	ea 06       	cpc	r14, r26
    1ba0:	fb 06       	cpc	r15, r27
    1ba2:	f0 f6       	brcc	.-68     	; 0x1b60 <SYS_TimerTaskHandler+0x6c>
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba8:	ac 81       	ldd	r26, Y+4	; 0x04
    1baa:	bd 81       	ldd	r27, Y+5	; 0x05
    1bac:	8c 19       	sub	r24, r12
    1bae:	9d 09       	sbc	r25, r13
    1bb0:	ae 09       	sbc	r26, r14
    1bb2:	bf 09       	sbc	r27, r15
    1bb4:	8a 83       	std	Y+2, r24	; 0x02
    1bb6:	9b 83       	std	Y+3, r25	; 0x03
    1bb8:	ac 83       	std	Y+4, r26	; 0x04
    1bba:	bd 83       	std	Y+5, r27	; 0x05
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	08 95       	ret

00001bca <__udivmodsi4>:
    1bca:	a1 e2       	ldi	r26, 0x21	; 33
    1bcc:	1a 2e       	mov	r1, r26
    1bce:	aa 1b       	sub	r26, r26
    1bd0:	bb 1b       	sub	r27, r27
    1bd2:	fd 01       	movw	r30, r26
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <__udivmodsi4_ep>

00001bd6 <__udivmodsi4_loop>:
    1bd6:	aa 1f       	adc	r26, r26
    1bd8:	bb 1f       	adc	r27, r27
    1bda:	ee 1f       	adc	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	a2 17       	cp	r26, r18
    1be0:	b3 07       	cpc	r27, r19
    1be2:	e4 07       	cpc	r30, r20
    1be4:	f5 07       	cpc	r31, r21
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__udivmodsi4_ep>
    1be8:	a2 1b       	sub	r26, r18
    1bea:	b3 0b       	sbc	r27, r19
    1bec:	e4 0b       	sbc	r30, r20
    1bee:	f5 0b       	sbc	r31, r21

00001bf0 <__udivmodsi4_ep>:
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	1a 94       	dec	r1
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <__udivmodsi4_loop>
    1bfc:	60 95       	com	r22
    1bfe:	70 95       	com	r23
    1c00:	80 95       	com	r24
    1c02:	90 95       	com	r25
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	bd 01       	movw	r22, r26
    1c0a:	cf 01       	movw	r24, r30
    1c0c:	08 95       	ret

00001c0e <__tablejump2__>:
    1c0e:	ee 0f       	add	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	88 1f       	adc	r24, r24
    1c14:	8b bf       	out	0x3b, r24	; 59
    1c16:	07 90       	elpm	r0, Z+
    1c18:	f6 91       	elpm	r31, Z
    1c1a:	e0 2d       	mov	r30, r0
    1c1c:	19 94       	eijmp

00001c1e <do_rand>:
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	ec 01       	movw	r28, r24
    1c34:	68 81       	ld	r22, Y
    1c36:	79 81       	ldd	r23, Y+1	; 0x01
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	61 15       	cp	r22, r1
    1c3e:	71 05       	cpc	r23, r1
    1c40:	81 05       	cpc	r24, r1
    1c42:	91 05       	cpc	r25, r1
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <do_rand+0x30>
    1c46:	64 e2       	ldi	r22, 0x24	; 36
    1c48:	79 ed       	ldi	r23, 0xD9	; 217
    1c4a:	8b e5       	ldi	r24, 0x5B	; 91
    1c4c:	97 e0       	ldi	r25, 0x07	; 7
    1c4e:	2d e1       	ldi	r18, 0x1D	; 29
    1c50:	33 ef       	ldi	r19, 0xF3	; 243
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	41 d0       	rcall	.+130    	; 0x1cda <__divmodsi4>
    1c58:	49 01       	movw	r8, r18
    1c5a:	5a 01       	movw	r10, r20
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	ac 01       	movw	r20, r24
    1c60:	a7 ea       	ldi	r26, 0xA7	; 167
    1c62:	b1 e4       	ldi	r27, 0x41	; 65
    1c64:	56 d0       	rcall	.+172    	; 0x1d12 <__muluhisi3>
    1c66:	6b 01       	movw	r12, r22
    1c68:	7c 01       	movw	r14, r24
    1c6a:	ac ee       	ldi	r26, 0xEC	; 236
    1c6c:	b4 ef       	ldi	r27, 0xF4	; 244
    1c6e:	a5 01       	movw	r20, r10
    1c70:	94 01       	movw	r18, r8
    1c72:	5b d0       	rcall	.+182    	; 0x1d2a <__mulohisi3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8c 0d       	add	r24, r12
    1c7a:	9d 1d       	adc	r25, r13
    1c7c:	ae 1d       	adc	r26, r14
    1c7e:	bf 1d       	adc	r27, r15
    1c80:	b7 ff       	sbrs	r27, 7
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <do_rand+0x6c>
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	a1 09       	sbc	r26, r1
    1c88:	b0 48       	sbci	r27, 0x80	; 128
    1c8a:	88 83       	st	Y, r24
    1c8c:	99 83       	std	Y+1, r25	; 0x01
    1c8e:	aa 83       	std	Y+2, r26	; 0x02
    1c90:	bb 83       	std	Y+3, r27	; 0x03
    1c92:	9f 77       	andi	r25, 0x7F	; 127
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	9f 90       	pop	r9
    1ca6:	8f 90       	pop	r8
    1ca8:	08 95       	ret

00001caa <rand_r>:
    1caa:	b9 cf       	rjmp	.-142    	; 0x1c1e <do_rand>

00001cac <rand>:
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	92 e0       	ldi	r25, 0x02	; 2
    1cb0:	b6 cf       	rjmp	.-148    	; 0x1c1e <do_rand>

00001cb2 <srand>:
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1cba:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1cbe:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1cc2:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1cc6:	08 95       	ret

00001cc8 <memcpy>:
    1cc8:	fb 01       	movw	r30, r22
    1cca:	dc 01       	movw	r26, r24
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <memcpy+0xa>
    1cce:	01 90       	ld	r0, Z+
    1cd0:	0d 92       	st	X+, r0
    1cd2:	41 50       	subi	r20, 0x01	; 1
    1cd4:	50 40       	sbci	r21, 0x00	; 0
    1cd6:	d8 f7       	brcc	.-10     	; 0x1cce <memcpy+0x6>
    1cd8:	08 95       	ret

00001cda <__divmodsi4>:
    1cda:	05 2e       	mov	r0, r21
    1cdc:	97 fb       	bst	r25, 7
    1cde:	16 f4       	brtc	.+4      	; 0x1ce4 <__divmodsi4+0xa>
    1ce0:	00 94       	com	r0
    1ce2:	0f d0       	rcall	.+30     	; 0x1d02 <__negsi2>
    1ce4:	57 fd       	sbrc	r21, 7
    1ce6:	05 d0       	rcall	.+10     	; 0x1cf2 <__divmodsi4_neg2>
    1ce8:	70 df       	rcall	.-288    	; 0x1bca <__udivmodsi4>
    1cea:	07 fc       	sbrc	r0, 7
    1cec:	02 d0       	rcall	.+4      	; 0x1cf2 <__divmodsi4_neg2>
    1cee:	46 f4       	brtc	.+16     	; 0x1d00 <__divmodsi4_exit>
    1cf0:	08 c0       	rjmp	.+16     	; 0x1d02 <__negsi2>

00001cf2 <__divmodsi4_neg2>:
    1cf2:	50 95       	com	r21
    1cf4:	40 95       	com	r20
    1cf6:	30 95       	com	r19
    1cf8:	21 95       	neg	r18
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	4f 4f       	sbci	r20, 0xFF	; 255
    1cfe:	5f 4f       	sbci	r21, 0xFF	; 255

00001d00 <__divmodsi4_exit>:
    1d00:	08 95       	ret

00001d02 <__negsi2>:
    1d02:	90 95       	com	r25
    1d04:	80 95       	com	r24
    1d06:	70 95       	com	r23
    1d08:	61 95       	neg	r22
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d10:	08 95       	ret

00001d12 <__muluhisi3>:
    1d12:	0f d0       	rcall	.+30     	; 0x1d32 <__umulhisi3>
    1d14:	a5 9f       	mul	r26, r21
    1d16:	90 0d       	add	r25, r0
    1d18:	b4 9f       	mul	r27, r20
    1d1a:	90 0d       	add	r25, r0
    1d1c:	a4 9f       	mul	r26, r20
    1d1e:	80 0d       	add	r24, r0
    1d20:	91 1d       	adc	r25, r1
    1d22:	11 24       	eor	r1, r1
    1d24:	08 95       	ret

00001d26 <__mulshisi3>:
    1d26:	b7 ff       	sbrs	r27, 7
    1d28:	f4 cf       	rjmp	.-24     	; 0x1d12 <__muluhisi3>

00001d2a <__mulohisi3>:
    1d2a:	f3 df       	rcall	.-26     	; 0x1d12 <__muluhisi3>
    1d2c:	82 1b       	sub	r24, r18
    1d2e:	93 0b       	sbc	r25, r19
    1d30:	08 95       	ret

00001d32 <__umulhisi3>:
    1d32:	a2 9f       	mul	r26, r18
    1d34:	b0 01       	movw	r22, r0
    1d36:	b3 9f       	mul	r27, r19
    1d38:	c0 01       	movw	r24, r0
    1d3a:	a3 9f       	mul	r26, r19
    1d3c:	70 0d       	add	r23, r0
    1d3e:	81 1d       	adc	r24, r1
    1d40:	11 24       	eor	r1, r1
    1d42:	91 1d       	adc	r25, r1
    1d44:	b2 9f       	mul	r27, r18
    1d46:	70 0d       	add	r23, r0
    1d48:	81 1d       	adc	r24, r1
    1d4a:	11 24       	eor	r1, r1
    1d4c:	91 1d       	adc	r25, r1
    1d4e:	08 95       	ret

00001d50 <_exit>:
    1d50:	f8 94       	cli

00001d52 <__stop_program>:
    1d52:	ff cf       	rjmp	.-2      	; 0x1d52 <__stop_program>

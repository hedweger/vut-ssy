
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  00001c92  00001d26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001d90  00800290  00800290  00001db6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a65  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d78  00000000  00000000  00008cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027e1  00000000  00000000  0000ba4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  0000e230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002021  00000000  00000000  0000ec64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002684  00000000  00000000  00010c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00013309  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c2       	rjmp	.+1466   	; 0x64c <__vector_36>
      92:	00 00       	nop
      94:	bf c2       	rjmp	.+1406   	; 0x614 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0b c2       	rjmp	.+1046   	; 0x4c0 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e2 e9       	ldi	r30, 0x92	; 146
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a0 39       	cpi	r26, 0x90	; 144
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	20 e2       	ldi	r18, 0x20	; 32
     160:	a0 e9       	ldi	r26, 0x90	; 144
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a0 32       	cpi	r26, 0x20	; 32
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	6c d1       	rcall	.+728    	; 0x448 <main>
     170:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <APP_dataConf>:
}

void APP_timerHandler(SYS_Timer_t *timer) {
  char test[] = "SYSLOG: timer is being reset";
  for (int i = 0; strlen(test); i++) {
    HAL_UartWriteByte(test[i]);
     176:	08 95       	ret

00000178 <HAL_UartBytesReceived>:
static RouteTable_t routeTable[ROUTE_TABLE_SIZE];
static uint8_t routeTablePtr = 0;
static uint16_t meAddr = APP_ADDR;
static uint16_t meEndpoint = APP_ENDPOINT;

void HAL_UartBytesReceived(uint16_t bytes) { HAL_UartWriteString(bytes); }
     178:	3f c2       	rjmp	.+1150   	; 0x5f8 <HAL_UartWriteString>
     17a:	08 95       	ret

0000017c <APP_dataSend>:

void APP_dataSend(AppMsgType_t msgType, uint8_t addr) {
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	1f 92       	push	r1
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	69 83       	std	Y+1, r22	; 0x01
  RouteTable_t route = routeTable[addr];
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	fb 01       	movw	r30, r22
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e6 0f       	add	r30, r22
     192:	f7 1f       	adc	r31, r23
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	ef 56       	subi	r30, 0x6F	; 111
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	20 81       	ld	r18, Z
     19e:	31 81       	ldd	r19, Z+1	; 0x01
     1a0:	92 81       	ldd	r25, Z+2	; 0x02
  switch (msgType) {
     1a2:	87 30       	cpi	r24, 0x07	; 7
     1a4:	61 f0       	breq	.+24     	; 0x1be <APP_dataSend+0x42>
     1a6:	89 30       	cpi	r24, 0x09	; 9
     1a8:	91 f4       	brne	.+36     	; 0x1ce <APP_dataSend+0x52>
  case OFFER:
    dataReq.data = &addr;
     1aa:	ee ef       	ldi	r30, 0xFE	; 254
     1ac:	f8 e0       	ldi	r31, 0x08	; 8
     1ae:	ae 01       	movw	r20, r28
     1b0:	4f 5f       	subi	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	53 87       	std	Z+11, r21	; 0x0b
     1b6:	42 87       	std	Z+10, r20	; 0x0a
    dataReq.size = sizeof(uint8_t);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	84 87       	std	Z+12, r24	; 0x0c
    break;
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <APP_dataSend+0x52>
  case APPDATA:
    dataReq.data = &"data";
     1be:	ee ef       	ldi	r30, 0xFE	; 254
     1c0:	f8 e0       	ldi	r31, 0x08	; 8
     1c2:	41 e2       	ldi	r20, 0x21	; 33
     1c4:	52 e0       	ldi	r21, 0x02	; 2
     1c6:	53 87       	std	Z+11, r21	; 0x0b
     1c8:	42 87       	std	Z+10, r20	; 0x0a
    dataReq.size = sizeof(dataReq.data);
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	84 87       	std	Z+12, r24	; 0x0c
    break;
  }

  dataReq.dstAddr = route.addr;
     1ce:	ee ef       	ldi	r30, 0xFE	; 254
     1d0:	f8 e0       	ldi	r31, 0x08	; 8
     1d2:	36 83       	std	Z+6, r19	; 0x06
     1d4:	25 83       	std	Z+5, r18	; 0x05
  //dataReq.dstAddr = 00;
  dataReq.dstEndpoint = route.endpoint;
     1d6:	97 83       	std	Z+7, r25	; 0x07
  //dataReq.dstEndpoint = meEndpoint;
  dataReq.srcEndpoint = meEndpoint;
     1d8:	83 e0       	ldi	r24, 0x03	; 3
     1da:	80 87       	std	Z+8, r24	; 0x08
  dataReq.options = NWK_OPT_ENABLE_SECURITY;
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	81 87       	std	Z+9, r24	; 0x09
  dataReq.confirm = APP_dataConf;
     1e0:	8b eb       	ldi	r24, 0xBB	; 187
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	96 87       	std	Z+14, r25	; 0x0e
     1e6:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&dataReq);
     1e8:	cf 01       	movw	r24, r30
     1ea:	22 d3       	rcall	.+1604   	; 0x830 <NWK_DataReq>

  uartBufferPtr = 0;
  dataReqBusy = true;
}
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <APP_pushAddr>:
 * Should only be called when the server offers the config,
 * on accept from client, the in_use flag needs to be set,
 * otherwise the server will rewrite the entry on next pass.
 * The route table has 65535 entries
 */
uint16_t APP_pushAddr(uint8_t endpoint, uint8_t *data) {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	48 2f       	mov	r20, r24
  if (routeTable[routeTablePtr].in_use) {
     1fa:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <__data_end>
     1fe:	29 2f       	mov	r18, r25
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	f9 01       	movw	r30, r18
     204:	ee 0f       	add	r30, r30
     206:	ff 1f       	adc	r31, r31
     208:	e2 0f       	add	r30, r18
     20a:	f3 1f       	adc	r31, r19
     20c:	ee 0f       	add	r30, r30
     20e:	ff 1f       	adc	r31, r31
     210:	ef 56       	subi	r30, 0x6F	; 111
     212:	fd 4f       	sbci	r31, 0xFD	; 253
     214:	85 81       	ldd	r24, Z+5	; 0x05
     216:	88 23       	and	r24, r24
     218:	31 f0       	breq	.+12     	; 0x226 <APP_pushAddr+0x32>
     21a:	84 2f       	mov	r24, r20
    routeTablePtr++;
     21c:	9f 5f       	subi	r25, 0xFF	; 255
     21e:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <__data_end>
    return APP_pushAddr(endpoint, data);
     222:	e8 df       	rcall	.-48     	; 0x1f4 <APP_pushAddr>
     224:	1c c0       	rjmp	.+56     	; 0x25e <APP_pushAddr+0x6a>
  }

  routeTable[routeTablePtr].addr = routeTablePtr;
     226:	89 2f       	mov	r24, r25
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	ee 0f       	add	r30, r30
     22e:	ff 1f       	adc	r31, r31
     230:	df 01       	movw	r26, r30
     232:	a2 0f       	add	r26, r18
     234:	b3 1f       	adc	r27, r19
     236:	aa 0f       	add	r26, r26
     238:	bb 1f       	adc	r27, r27
     23a:	af 56       	subi	r26, 0x6F	; 111
     23c:	bd 4f       	sbci	r27, 0xFD	; 253
     23e:	11 96       	adiw	r26, 0x01	; 1
     240:	9c 93       	st	X, r25
     242:	8e 93       	st	-X, r24
  routeTable[routeTablePtr].endpoint = endpoint;
     244:	12 96       	adiw	r26, 0x02	; 2
     246:	4c 93       	st	X, r20
     248:	12 97       	sbiw	r26, 0x02	; 2
  routeTable[routeTablePtr].sleeping = false;
     24a:	14 96       	adiw	r26, 0x04	; 4
     24c:	1c 92       	st	X, r1
     24e:	14 97       	sbiw	r26, 0x04	; 4
  routeTable[routeTablePtr].type = (SensorType_t)(*data);
     250:	eb 01       	movw	r28, r22
     252:	48 81       	ld	r20, Y
     254:	13 96       	adiw	r26, 0x03	; 3
     256:	4c 93       	st	X, r20
     258:	13 97       	sbiw	r26, 0x03	; 3
  // in_use only goes active on APP_ACK from client
  routeTable[routeTablePtr].in_use = false;
     25a:	fd 01       	movw	r30, r26
     25c:	15 82       	std	Z+5, r1	; 0x05
  return routeTablePtr;
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <APP_dataRecv>:

bool APP_dataRecv(NWK_DataInd_t *ind) {
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	8c 01       	movw	r16, r24
  AppMsg_t *recv = (AppMsg_t *)ind->appdata;
     272:	dc 01       	movw	r26, r24
     274:	17 96       	adiw	r26, 0x07	; 7
     276:	ed 90       	ld	r14, X+
     278:	fc 90       	ld	r15, X
     27a:	18 97       	sbiw	r26, 0x08	; 8
     */
    APP_dataSend(APPDATA, ind->srcAddr);
    break;
  }
#else
  switch (recv->msgType) {
     27c:	f7 01       	movw	r30, r14
     27e:	81 81       	ldd	r24, Z+1	; 0x01
     280:	84 30       	cpi	r24, 0x04	; 4
     282:	09 f4       	brne	.+2      	; 0x286 <APP_dataRecv+0x22>
     284:	5c c0       	rjmp	.+184    	; 0x33e <APP_dataRecv+0xda>
     286:	20 f4       	brcc	.+8      	; 0x290 <APP_dataRecv+0x2c>
     288:	82 30       	cpi	r24, 0x02	; 2
     28a:	08 f0       	brcs	.+2      	; 0x28e <APP_dataRecv+0x2a>
     28c:	4a c0       	rjmp	.+148    	; 0x322 <APP_dataRecv+0xbe>
     28e:	71 c0       	rjmp	.+226    	; 0x372 <APP_dataRecv+0x10e>
     290:	86 30       	cpi	r24, 0x06	; 6
     292:	c9 f1       	breq	.+114    	; 0x306 <APP_dataRecv+0xa2>
     294:	48 f1       	brcs	.+82     	; 0x2e8 <APP_dataRecv+0x84>
     296:	87 30       	cpi	r24, 0x07	; 7
     298:	09 f0       	breq	.+2      	; 0x29c <APP_dataRecv+0x38>
     29a:	6b c0       	rjmp	.+214    	; 0x372 <APP_dataRecv+0x10e>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
     29c:	d8 01       	movw	r26, r16
     29e:	8d 91       	ld	r24, X+
     2a0:	9c 91       	ld	r25, X
     2a2:	fc 01       	movw	r30, r24
     2a4:	ee 0f       	add	r30, r30
     2a6:	ff 1f       	adc	r31, r31
     2a8:	e8 0f       	add	r30, r24
     2aa:	f9 1f       	adc	r31, r25
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	ef 56       	subi	r30, 0x6F	; 111
     2b2:	fd 4f       	sbci	r31, 0xFD	; 253
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	84 83       	std	Z+4, r24	; 0x04
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < recv->size; i++) {
     2b8:	f7 01       	movw	r30, r14
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	09 f4       	brne	.+2      	; 0x2c2 <APP_dataRecv+0x5e>
     2c0:	5f c0       	rjmp	.+190    	; 0x380 <APP_dataRecv+0x11c>
     2c2:	c0 e0       	ldi	r28, 0x00	; 0
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
      HAL_UartWriteByte(recv->data[i]);
     2c6:	d7 01       	movw	r26, r14
     2c8:	13 96       	adiw	r26, 0x03	; 3
     2ca:	ed 91       	ld	r30, X+
     2cc:	fc 91       	ld	r31, X
     2ce:	14 97       	sbiw	r26, 0x04	; 4
     2d0:	ec 0f       	add	r30, r28
     2d2:	fd 1f       	adc	r31, r29
     2d4:	80 81       	ld	r24, Z
     2d6:	69 d1       	rcall	.+722    	; 0x5aa <HAL_UartWriteByte>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < recv->size; i++) {
     2d8:	21 96       	adiw	r28, 0x01	; 1
     2da:	f7 01       	movw	r30, r14
     2dc:	80 81       	ld	r24, Z
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	c8 17       	cp	r28, r24
     2e2:	d9 07       	cpc	r29, r25
     2e4:	84 f3       	brlt	.-32     	; 0x2c6 <APP_dataRecv+0x62>
     2e6:	4c c0       	rjmp	.+152    	; 0x380 <APP_dataRecv+0x11c>
      HAL_UartWriteByte(recv->data[i]);
    }
    break;
  case APP_SLEEP:
    routeTable[ind->srcAddr].sleeping = true;
     2e8:	d8 01       	movw	r26, r16
     2ea:	8d 91       	ld	r24, X+
     2ec:	9c 91       	ld	r25, X
     2ee:	fc 01       	movw	r30, r24
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	e8 0f       	add	r30, r24
     2f6:	f9 1f       	adc	r31, r25
     2f8:	ee 0f       	add	r30, r30
     2fa:	ff 1f       	adc	r31, r31
     2fc:	ef 56       	subi	r30, 0x6F	; 111
     2fe:	fd 4f       	sbci	r31, 0xFD	; 253
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	84 83       	std	Z+4, r24	; 0x04
    break;
     304:	3d c0       	rjmp	.+122    	; 0x380 <APP_dataRecv+0x11c>
  case RECONNECT:
    routeTable[ind->srcAddr].sleeping = false;
     306:	f8 01       	movw	r30, r16
     308:	80 81       	ld	r24, Z
     30a:	91 81       	ldd	r25, Z+1	; 0x01
     30c:	fc 01       	movw	r30, r24
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	e8 0f       	add	r30, r24
     314:	f9 1f       	adc	r31, r25
     316:	ee 0f       	add	r30, r30
     318:	ff 1f       	adc	r31, r31
     31a:	ef 56       	subi	r30, 0x6F	; 111
     31c:	fd 4f       	sbci	r31, 0xFD	; 253
     31e:	14 82       	std	Z+4, r1	; 0x04
    break;
     320:	2f c0       	rjmp	.+94     	; 0x380 <APP_dataRecv+0x11c>
     * not evil.
     * Also, I presume that clients will not
     * request new adresses once they receive
     * one.
     */
    routeTablePtr++;
     322:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>
    int16_t addr = APP_pushAddr(ind->srcEndpoint, ind->appdata);
     32c:	b7 01       	movw	r22, r14
     32e:	d8 01       	movw	r26, r16
     330:	14 96       	adiw	r26, 0x04	; 4
     332:	8c 91       	ld	r24, X
     334:	5f df       	rcall	.-322    	; 0x1f4 <APP_pushAddr>
    APP_dataSend(OFFER, addr);
     336:	68 2f       	mov	r22, r24
     338:	89 e0       	ldi	r24, 0x09	; 9
     33a:	20 df       	rcall	.-448    	; 0x17c <APP_dataSend>
    break;
     33c:	21 c0       	rjmp	.+66     	; 0x380 <APP_dataRecv+0x11c>
     * Therefore, it is presumed the REQUEST message
     * will be sent with the server-assigned adress,
     * so the server can set their adress as in use
     * in the routing table.
     */
    routeTable[ind->srcAddr].in_use = true;
     33e:	f8 01       	movw	r30, r16
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	fc 01       	movw	r30, r24
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	e8 0f       	add	r30, r24
     34c:	f9 1f       	adc	r31, r25
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	ef 56       	subi	r30, 0x6F	; 111
     354:	fd 4f       	sbci	r31, 0xFD	; 253
     356:	81 e0       	ldi	r24, 0x01	; 1
    HAL_UartWriteString("Accepted client on addr.: ");
     358:	85 83       	std	Z+5, r24	; 0x05
     35a:	86 e2       	ldi	r24, 0x26	; 38
     35c:	92 e0       	ldi	r25, 0x02	; 2
    HAL_UartWriteString(ind->srcAddr);
     35e:	4c d1       	rcall	.+664    	; 0x5f8 <HAL_UartWriteString>
     360:	d8 01       	movw	r26, r16
     362:	8d 91       	ld	r24, X+
     364:	9c 91       	ld	r25, X
    APP_dataSend(APP_ACK, ind->srcAddr);
     366:	48 d1       	rcall	.+656    	; 0x5f8 <HAL_UartWriteString>
     368:	f8 01       	movw	r30, r16
     36a:	60 81       	ld	r22, Z
     36c:	81 e0       	ldi	r24, 0x01	; 1
    break;
     36e:	06 df       	rcall	.-500    	; 0x17c <APP_dataSend>
  default:
    HAL_UartWriteString("Unknown msg type: ");
     370:	07 c0       	rjmp	.+14     	; 0x380 <APP_dataRecv+0x11c>
     372:	81 e4       	ldi	r24, 0x41	; 65
    HAL_UartWriteByte(recv->msgType);
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	40 d1       	rcall	.+640    	; 0x5f8 <HAL_UartWriteString>
     378:	d7 01       	movw	r26, r14
     37a:	11 96       	adiw	r26, 0x01	; 1
    break;
  }
#endif

#ifdef DEBUG_PRINT
  HAL_UartWriteByte('\n');
     37c:	8c 91       	ld	r24, X
     37e:	15 d1       	rcall	.+554    	; 0x5aa <HAL_UartWriteByte>
     380:	8a e0       	ldi	r24, 0x0A	; 10
  HAL_UartWriteString("To address: ");
     382:	13 d1       	rcall	.+550    	; 0x5aa <HAL_UartWriteByte>
     384:	84 e5       	ldi	r24, 0x54	; 84
  HAL_UartWriteByte(ind->dstAddr >> 8);
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	37 d1       	rcall	.+622    	; 0x5f8 <HAL_UartWriteString>
     38a:	f8 01       	movw	r30, r16
  HAL_UartWriteByte(ind->dstAddr);
     38c:	83 81       	ldd	r24, Z+3	; 0x03
     38e:	0d d1       	rcall	.+538    	; 0x5aa <HAL_UartWriteByte>
     390:	d8 01       	movw	r26, r16
  HAL_UartWriteByte('\n');
     392:	12 96       	adiw	r26, 0x02	; 2
     394:	8c 91       	ld	r24, X
  HAL_UartWriteString("From address: ");
     396:	09 d1       	rcall	.+530    	; 0x5aa <HAL_UartWriteByte>
     398:	8a e0       	ldi	r24, 0x0A	; 10
     39a:	07 d1       	rcall	.+526    	; 0x5aa <HAL_UartWriteByte>
  HAL_UartWriteByte(ind->srcAddr >> 8);
     39c:	81 e6       	ldi	r24, 0x61	; 97
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	2b d1       	rcall	.+598    	; 0x5f8 <HAL_UartWriteString>
  HAL_UartWriteByte(ind->srcAddr);
     3a2:	f8 01       	movw	r30, r16
     3a4:	81 81       	ldd	r24, Z+1	; 0x01
     3a6:	01 d1       	rcall	.+514    	; 0x5aa <HAL_UartWriteByte>
  HAL_UartWriteByte('\n');
     3a8:	d8 01       	movw	r26, r16
     3aa:	8c 91       	ld	r24, X
  HAL_UartWriteString("Message type: ");
     3ac:	fe d0       	rcall	.+508    	; 0x5aa <HAL_UartWriteByte>
     3ae:	8a e0       	ldi	r24, 0x0A	; 10
     3b0:	fc d0       	rcall	.+504    	; 0x5aa <HAL_UartWriteByte>
  HAL_UartWriteByte(recv->msgType);
     3b2:	80 e7       	ldi	r24, 0x70	; 112
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	20 d1       	rcall	.+576    	; 0x5f8 <HAL_UartWriteString>
     3b8:	f7 01       	movw	r30, r14
  HAL_UartWriteByte('\n');
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	f6 d0       	rcall	.+492    	; 0x5aa <HAL_UartWriteByte>
     3be:	8a e0       	ldi	r24, 0x0A	; 10
  HAL_UartWriteString("Size: ");
     3c0:	f4 d0       	rcall	.+488    	; 0x5aa <HAL_UartWriteByte>
     3c2:	8f e7       	ldi	r24, 0x7F	; 127
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	18 d1       	rcall	.+560    	; 0x5f8 <HAL_UartWriteString>
  HAL_UartWriteByte(ind->size);
     3c8:	d8 01       	movw	r26, r16
     3ca:	19 96       	adiw	r26, 0x09	; 9
     3cc:	8c 91       	ld	r24, X
     3ce:	ed d0       	rcall	.+474    	; 0x5aa <HAL_UartWriteByte>
  HAL_UartWriteByte('\n');
     3d0:	8a e0       	ldi	r24, 0x0A	; 10
     3d2:	eb d0       	rcall	.+470    	; 0x5aa <HAL_UartWriteByte>
     3d4:	86 e8       	ldi	r24, 0x86	; 134
  HAL_UartWriteString("Payload: ");
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	0f d1       	rcall	.+542    	; 0x5f8 <HAL_UartWriteString>
     3da:	f8 01       	movw	r30, r16
  for (int i = 0; i < ind->size; i++) {
     3dc:	81 85       	ldd	r24, Z+9	; 0x09
     3de:	88 23       	and	r24, r24
     3e0:	91 f0       	breq	.+36     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3e2:	c0 e0       	ldi	r28, 0x00	; 0
     3e4:	d0 e0       	ldi	r29, 0x00	; 0
     3e6:	d7 01       	movw	r26, r14
    HAL_UartWriteByte(recv->data[i]);
     3e8:	13 96       	adiw	r26, 0x03	; 3
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	14 97       	sbiw	r26, 0x04	; 4
     3f0:	ec 0f       	add	r30, r28
     3f2:	fd 1f       	adc	r31, r29
     3f4:	80 81       	ld	r24, Z
     3f6:	d9 d0       	rcall	.+434    	; 0x5aa <HAL_UartWriteByte>
     3f8:	21 96       	adiw	r28, 0x01	; 1
     3fa:	f8 01       	movw	r30, r16
  HAL_UartWriteByte('\n');
  HAL_UartWriteString("Size: ");
  HAL_UartWriteByte(ind->size);
  HAL_UartWriteByte('\n');
  HAL_UartWriteString("Payload: ");
  for (int i = 0; i < ind->size; i++) {
     3fc:	81 85       	ldd	r24, Z+9	; 0x09
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	c8 17       	cp	r28, r24
     402:	d9 07       	cpc	r29, r25
     404:	84 f3       	brlt	.-32     	; 0x3e6 <APP_dataRecv+0x182>
     406:	8a e0       	ldi	r24, 0x0A	; 10
     408:	d0 d0       	rcall	.+416    	; 0x5aa <HAL_UartWriteByte>
    HAL_UartWriteByte(recv->data[i]);
  }
  HAL_UartWriteByte('\n');
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
#endif

  return true;
}
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	08 95       	ret

0000041a <APP_init>:
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	c7 d1       	rcall	.+910    	; 0x7ae <NWK_SetAddr>
  (void)timer;
}

void APP_init(void) {
  NWK_SetAddr(APP_ADDR);
  NWK_SetPanId(APP_PANID);
     420:	80 e8       	ldi	r24, 0x80	; 128
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	ca d1       	rcall	.+916    	; 0x7ba <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     426:	8f e0       	ldi	r24, 0x0F	; 15
     428:	0e 94 b6 0b 	call	0x176c	; 0x176c <PHY_SetChannel>
  PHY_SetRxState(true);
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, APP_dataRecv);
     432:	62 e3       	ldi	r22, 0x32	; 50
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	c6 d1       	rcall	.+908    	; 0x7c6 <NWK_OpenEndpoint>
  HAL_BoardInit();

  timer.interval = APP_FLUSH_TIMER_INTERVAL;
  timer.mode = SYS_TIMER_INTERVAL_MODE;
  timer.handler = APP_timerHandler;
  dataReq.data = dataReqBuffer;
     43a:	81 e9       	ldi	r24, 0x91	; 145
     43c:	98 e0       	ldi	r25, 0x08	; 8
     43e:	90 93 09 09 	sts	0x0909, r25	; 0x800909 <dataReq+0xb>
     442:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <dataReq+0xa>
     446:	08 95       	ret

00000448 <main>:
		break;
	}
}

int main(void) {
	SYS_Init();
     448:	0e 94 87 0c 	call	0x190e	; 0x190e <SYS_Init>
	HAL_UartInit(38400);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	76 e9       	ldi	r23, 0x96	; 150
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	55 d0       	rcall	.+170    	; 0x500 <HAL_UartInit>

static void APP_TaskHandler(void) {
	switch (appState) {
		case INIT: {
			APP_init();
			appState = IDLE;
     456:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	SYS_Init();
	HAL_UartInit(38400);

	while (1) {
		SYS_TaskHandler();
     458:	0e 94 8e 0c 	call	0x191c	; 0x191c <SYS_TaskHandler>
		HAL_UartTaskHandler();
     45c:	4e d1       	rcall	.+668    	; 0x6fa <HAL_UartTaskHandler>
#include "sys.h"

static AppState_t appState;

static void APP_TaskHandler(void) {
	switch (appState) {
     45e:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <appState>
     462:	81 11       	cpse	r24, r1
		case INIT: {
			APP_init();
     464:	f9 cf       	rjmp	.-14     	; 0x458 <main+0x10>
     466:	d9 df       	rcall	.-78     	; 0x41a <APP_init>
			appState = IDLE;
     468:	c0 93 0f 09 	sts	0x090F, r28	; 0x80090f <appState>
     46c:	f5 cf       	rjmp	.-22     	; 0x458 <main+0x10>

0000046e <HAL_Init>:
     46e:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	a8 95       	wdr
     476:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     47a:	88 61       	ori	r24, 0x18	; 24
     47c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     480:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     484:	0f be       	out	0x3f, r0	; 63
     486:	e1 e6       	ldi	r30, 0x61	; 97
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 e8       	ldi	r24, 0x80	; 128
     48c:	80 83       	st	Z, r24
     48e:	10 82       	st	Z, r1
     490:	78 94       	sei
     492:	01 c0       	rjmp	.+2      	; 0x496 <HAL_TimerInit>
     494:	08 95       	ret

00000496 <HAL_TimerInit>:
     496:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <halTimerIrqCount>
     49a:	80 e1       	ldi	r24, 0x10	; 16
     49c:	97 e2       	ldi	r25, 0x27	; 39
     49e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     4a2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     4a6:	e1 ea       	ldi	r30, 0xA1	; 161
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	88 e0       	ldi	r24, 0x08	; 8
     4ac:	80 83       	st	Z, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	80 83       	st	Z, r24
     4b4:	e2 e7       	ldi	r30, 0x72	; 114
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	82 60       	ori	r24, 0x02	; 2
     4bc:	80 83       	st	Z, r24
     4be:	08 95       	ret

000004c0 <__vector_42>:
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	8f 93       	push	r24
     4cc:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <halTimerIrqCount>
     4d0:	8f 5f       	subi	r24, 0xFF	; 255
     4d2:	80 93 f7 1f 	sts	0x1FF7, r24	; 0x801ff7 <halTimerIrqCount>
     4d6:	8f 91       	pop	r24
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <__vector_13>:
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	8f 93       	push	r24
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <halSleepTimerEvent>
     4f4:	8f 91       	pop	r24
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <HAL_UartInit>:
    rxFifo.bytes--;
  ATOMIC_SECTION_LEAVE
  PRAGMA(diag_default=Pa082);

  return byte;
}
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	aa 1f       	adc	r26, r26
     50a:	bb 1f       	adc	r27, r27
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	aa 1f       	adc	r26, r26
     512:	bb 1f       	adc	r27, r27
     514:	9c 01       	movw	r18, r24
     516:	ad 01       	movw	r20, r26
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	44 1f       	adc	r20, r20
     51e:	55 1f       	adc	r21, r21
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	44 1f       	adc	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	74 e2       	ldi	r23, 0x24	; 36
     52c:	84 ef       	ldi	r24, 0xF4	; 244
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__udivmodsi4>
     534:	ba 01       	movw	r22, r20
     536:	a9 01       	movw	r20, r18
     538:	41 50       	subi	r20, 0x01	; 1
     53a:	51 09       	sbc	r21, r1
     53c:	61 09       	sbc	r22, r1
     53e:	71 09       	sbc	r23, r1
     540:	bb 27       	eor	r27, r27
     542:	a7 2f       	mov	r26, r23
     544:	96 2f       	mov	r25, r22
     546:	85 2f       	mov	r24, r21
     548:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     54c:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     556:	88 e9       	ldi	r24, 0x98	; 152
     558:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     562:	ef e3       	ldi	r30, 0x3F	; 63
     564:	fc e0       	ldi	r31, 0x0C	; 12
     566:	8e ea       	ldi	r24, 0xAE	; 174
     568:	9a e0       	ldi	r25, 0x0A	; 10
     56a:	91 87       	std	Z+9, r25	; 0x09
     56c:	80 87       	std	Z+8, r24	; 0x08
     56e:	80 e9       	ldi	r24, 0x90	; 144
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	95 83       	std	Z+5, r25	; 0x05
     574:	84 83       	std	Z+4, r24	; 0x04
     576:	17 82       	std	Z+7, r1	; 0x07
     578:	16 82       	std	Z+6, r1	; 0x06
     57a:	11 82       	std	Z+1, r1	; 0x01
     57c:	10 82       	st	Z, r1
     57e:	13 82       	std	Z+3, r1	; 0x03
     580:	12 82       	std	Z+2, r1	; 0x02
     582:	e4 ea       	ldi	r30, 0xA4	; 164
     584:	fa e0       	ldi	r31, 0x0A	; 10
     586:	23 e1       	ldi	r18, 0x13	; 19
     588:	39 e0       	ldi	r19, 0x09	; 9
     58a:	31 87       	std	Z+9, r19	; 0x09
     58c:	20 87       	std	Z+8, r18	; 0x08
     58e:	95 83       	std	Z+5, r25	; 0x05
     590:	84 83       	std	Z+4, r24	; 0x04
     592:	17 82       	std	Z+7, r1	; 0x07
     594:	16 82       	std	Z+6, r1	; 0x06
     596:	11 82       	std	Z+1, r1	; 0x01
     598:	10 82       	st	Z, r1
     59a:	13 82       	std	Z+3, r1	; 0x03
     59c:	12 82       	std	Z+2, r1	; 0x02
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <udrEmpty>
     5a4:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <newData>
     5a8:	08 95       	ret

000005aa <HAL_UartWriteByte>:
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ef e3       	ldi	r30, 0x3F	; 63
     5b0:	fc e0       	ldi	r31, 0x0C	; 12
     5b2:	26 81       	ldd	r18, Z+6	; 0x06
     5b4:	37 81       	ldd	r19, Z+7	; 0x07
     5b6:	64 81       	ldd	r22, Z+4	; 0x04
     5b8:	75 81       	ldd	r23, Z+5	; 0x05
     5ba:	26 17       	cp	r18, r22
     5bc:	37 07       	cpc	r19, r23
     5be:	c9 f0       	breq	.+50     	; 0x5f2 <HAL_UartWriteByte+0x48>
     5c0:	c0 85       	ldd	r28, Z+8	; 0x08
     5c2:	d1 85       	ldd	r29, Z+9	; 0x09
     5c4:	42 81       	ldd	r20, Z+2	; 0x02
     5c6:	53 81       	ldd	r21, Z+3	; 0x03
     5c8:	da 01       	movw	r26, r20
     5ca:	11 96       	adiw	r26, 0x01	; 1
     5cc:	b3 83       	std	Z+3, r27	; 0x03
     5ce:	a2 83       	std	Z+2, r26	; 0x02
     5d0:	fe 01       	movw	r30, r28
     5d2:	e4 0f       	add	r30, r20
     5d4:	f5 1f       	adc	r31, r21
     5d6:	80 83       	st	Z, r24
     5d8:	6a 17       	cp	r22, r26
     5da:	7b 07       	cpc	r23, r27
     5dc:	21 f4       	brne	.+8      	; 0x5e6 <HAL_UartWriteByte+0x3c>
     5de:	10 92 42 0c 	sts	0x0C42, r1	; 0x800c42 <txFifo+0x3>
     5e2:	10 92 41 0c 	sts	0x0C41, r1	; 0x800c41 <txFifo+0x2>
     5e6:	2f 5f       	subi	r18, 0xFF	; 255
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	30 93 46 0c 	sts	0x0C46, r19	; 0x800c46 <txFifo+0x7>
     5ee:	20 93 45 0c 	sts	0x0C45, r18	; 0x800c45 <txFifo+0x6>
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <HAL_UartWriteString>:
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
     5fe:	88 81       	ld	r24, Y
     600:	88 23       	and	r24, r24
     602:	29 f0       	breq	.+10     	; 0x60e <HAL_UartWriteString+0x16>
     604:	21 96       	adiw	r28, 0x01	; 1
     606:	d1 df       	rcall	.-94     	; 0x5aa <HAL_UartWriteByte>
     608:	89 91       	ld	r24, Y+
     60a:	81 11       	cpse	r24, r1
     60c:	fc cf       	rjmp	.-8      	; 0x606 <HAL_UartWriteString+0xe>
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	0b b6       	in	r0, 0x3b	; 59
     620:	0f 92       	push	r0
     622:	8f 93       	push	r24
     624:	ef 93       	push	r30
     626:	ff 93       	push	r31
  udrEmpty = true;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     62e:	e9 ec       	ldi	r30, 0xC9	; 201
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	8f 7d       	andi	r24, 0xDF	; 223
     636:	80 83       	st	Z, r24
}
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	8f 91       	pop	r24
     63e:	0f 90       	pop	r0
     640:	0b be       	out	0x3b, r0	; 59
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	0f 92       	push	r0
     654:	11 24       	eor	r1, r1
     656:	0b b6       	in	r0, 0x3b	; 59
     658:	0f 92       	push	r0
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	4f 93       	push	r20
     660:	5f 93       	push	r21
     662:	6f 93       	push	r22
     664:	7f 93       	push	r23
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27
     66e:	ef 93       	push	r30
     670:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     672:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     676:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     67a:	8c 71       	andi	r24, 0x1C	; 28
     67c:	59 f5       	brne	.+86     	; 0x6d4 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     67e:	e4 ea       	ldi	r30, 0xA4	; 164
     680:	fa e0       	ldi	r31, 0x0A	; 10
     682:	46 81       	ldd	r20, Z+6	; 0x06
     684:	57 81       	ldd	r21, Z+7	; 0x07
     686:	84 81       	ldd	r24, Z+4	; 0x04
     688:	95 81       	ldd	r25, Z+5	; 0x05
     68a:	48 17       	cp	r20, r24
     68c:	59 07       	cpc	r21, r25
     68e:	11 f1       	breq	.+68     	; 0x6d4 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     690:	40 85       	ldd	r20, Z+8	; 0x08
     692:	51 85       	ldd	r21, Z+9	; 0x09
     694:	82 81       	ldd	r24, Z+2	; 0x02
     696:	93 81       	ldd	r25, Z+3	; 0x03
     698:	bc 01       	movw	r22, r24
     69a:	6f 5f       	subi	r22, 0xFF	; 255
     69c:	7f 4f       	sbci	r23, 0xFF	; 255
     69e:	73 83       	std	Z+3, r23	; 0x03
     6a0:	62 83       	std	Z+2, r22	; 0x02
     6a2:	da 01       	movw	r26, r20
     6a4:	a8 0f       	add	r26, r24
     6a6:	b9 1f       	adc	r27, r25
     6a8:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     6aa:	22 81       	ldd	r18, Z+2	; 0x02
     6ac:	33 81       	ldd	r19, Z+3	; 0x03
     6ae:	84 81       	ldd	r24, Z+4	; 0x04
     6b0:	95 81       	ldd	r25, Z+5	; 0x05
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <__vector_36+0x74>
      rxFifo.tail = 0;
     6b8:	10 92 a7 0a 	sts	0x0AA7, r1	; 0x800aa7 <rxFifo+0x3>
     6bc:	10 92 a6 0a 	sts	0x0AA6, r1	; 0x800aa6 <rxFifo+0x2>
    rxFifo.bytes++;
     6c0:	e4 ea       	ldi	r30, 0xA4	; 164
     6c2:	fa e0       	ldi	r31, 0x0A	; 10
     6c4:	86 81       	ldd	r24, Z+6	; 0x06
     6c6:	97 81       	ldd	r25, Z+7	; 0x07
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	97 83       	std	Z+7, r25	; 0x07
     6cc:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0b be       	out	0x3b, r0	; 59
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     6fa:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <txFifo+0x6>
     6fe:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <txFifo+0x7>
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	69 f1       	breq	.+90     	; 0x760 <HAL_UartTaskHandler+0x66>
     706:	20 91 12 09 	lds	r18, 0x0912	; 0x800912 <udrEmpty>
     70a:	22 23       	and	r18, r18
     70c:	49 f1       	breq	.+82     	; 0x760 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     70e:	ef e3       	ldi	r30, 0x3F	; 63
     710:	fc e0       	ldi	r31, 0x0C	; 12
     712:	60 85       	ldd	r22, Z+8	; 0x08
     714:	71 85       	ldd	r23, Z+9	; 0x09
     716:	20 81       	ld	r18, Z
     718:	31 81       	ldd	r19, Z+1	; 0x01
     71a:	a9 01       	movw	r20, r18
     71c:	4f 5f       	subi	r20, 0xFF	; 255
     71e:	5f 4f       	sbci	r21, 0xFF	; 255
     720:	51 83       	std	Z+1, r21	; 0x01
     722:	40 83       	st	Z, r20
     724:	db 01       	movw	r26, r22
     726:	a2 0f       	add	r26, r18
     728:	b3 1f       	adc	r27, r19
     72a:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     72c:	64 81       	ldd	r22, Z+4	; 0x04
     72e:	75 81       	ldd	r23, Z+5	; 0x05
     730:	46 17       	cp	r20, r22
     732:	57 07       	cpc	r21, r23
     734:	21 f4       	brne	.+8      	; 0x73e <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     736:	10 92 40 0c 	sts	0x0C40, r1	; 0x800c40 <txFifo+0x1>
     73a:	10 92 3f 0c 	sts	0x0C3F, r1	; 0x800c3f <txFifo>
    txFifo.bytes--;
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <txFifo+0x7>
     744:	80 93 45 0c 	sts	0x0C45, r24	; 0x800c45 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     748:	9f b7       	in	r25, 0x3f	; 63
     74a:	f8 94       	cli
      UDRx = byte;
     74c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     750:	e9 ec       	ldi	r30, 0xC9	; 201
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	80 62       	ori	r24, 0x20	; 32
     758:	80 83       	st	Z, r24
      udrEmpty = false;
     75a:	10 92 12 09 	sts	0x0912, r1	; 0x800912 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     75e:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     760:	2f b7       	in	r18, 0x3f	; 63
     762:	f8 94       	cli
      new = newData;
     764:	90 91 11 09 	lds	r25, 0x0911	; 0x800911 <newData>
      newData = false;
     768:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <newData>
      bytes = rxFifo.bytes;
     76c:	40 91 aa 0a 	lds	r20, 0x0AAA	; 0x800aaa <rxFifo+0x6>
     770:	50 91 ab 0a 	lds	r21, 0x0AAB	; 0x800aab <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     774:	2f bf       	out	0x3f, r18	; 63

    if (new)
     776:	99 23       	and	r25, r25
     778:	11 f0       	breq	.+4      	; 0x77e <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     77a:	ca 01       	movw	r24, r20
     77c:	fd cc       	rjmp	.-1542   	; 0x178 <HAL_UartBytesReceived>
     77e:	08 95       	ret

00000780 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     780:	e8 ef       	ldi	r30, 0xF8	; 248
     782:	ff e1       	ldi	r31, 0x1F	; 31
     784:	14 82       	std	Z+4, r1	; 0x04
     786:	15 82       	std	Z+5, r1	; 0x05
     788:	11 82       	std	Z+1, r1	; 0x01
     78a:	10 82       	st	Z, r1
     78c:	17 a2       	std	Z+39, r1	; 0x27
     78e:	16 a2       	std	Z+38, r1	; 0x26
     790:	ee ef       	ldi	r30, 0xFE	; 254
     792:	ff e1       	ldi	r31, 0x1F	; 31
     794:	8e e1       	ldi	r24, 0x1E	; 30
     796:	90 e2       	ldi	r25, 0x20	; 32
     798:	11 92       	st	Z+, r1
     79a:	11 92       	st	Z+, r1
     79c:	e8 17       	cp	r30, r24
     79e:	f9 07       	cpc	r31, r25
     7a0:	d9 f7       	brne	.-10     	; 0x798 <NWK_Init+0x18>
     7a2:	1b d6       	rcall	.+3126   	; 0x13da <nwkTxInit>
     7a4:	39 d3       	rcall	.+1650   	; 0xe18 <nwkRxInit>
     7a6:	0b d1       	rcall	.+534    	; 0x9be <nwkFrameInit>
     7a8:	3e d0       	rcall	.+124    	; 0x826 <nwkDataReqInit>
     7aa:	90 c1       	rjmp	.+800    	; 0xacc <nwkRouteInit>
     7ac:	08 95       	ret

000007ae <NWK_SetAddr>:
     7ae:	90 93 f9 1f 	sts	0x1FF9, r25	; 0x801ff9 <nwkIb+0x1>
     7b2:	80 93 f8 1f 	sts	0x1FF8, r24	; 0x801ff8 <nwkIb>
     7b6:	f0 c7       	rjmp	.+4064   	; 0x1798 <PHY_SetShortAddr>
     7b8:	08 95       	ret

000007ba <NWK_SetPanId>:
     7ba:	90 93 fb 1f 	sts	0x1FFB, r25	; 0x801ffb <nwkIb+0x3>
     7be:	80 93 fa 1f 	sts	0x1FFA, r24	; 0x801ffa <nwkIb+0x2>
     7c2:	d8 c7       	rjmp	.+4016   	; 0x1774 <PHY_SetPanId>
     7c4:	08 95       	ret

000007c6 <NWK_OpenEndpoint>:
     7c6:	e8 2f       	mov	r30, r24
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e2 50       	subi	r30, 0x02	; 2
     7d0:	f0 4e       	sbci	r31, 0xE0	; 224
     7d2:	71 83       	std	Z+1, r23	; 0x01
     7d4:	60 83       	st	Z, r22
     7d6:	08 95       	ret

000007d8 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     7d8:	66 d3       	rcall	.+1740   	; 0xea6 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     7da:	d6 d6       	rcall	.+3500   	; 0x1588 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     7dc:	4d c0       	rjmp	.+154    	; 0x878 <nwkDataReqTaskHandler>
     7de:	08 95       	ret

000007e0 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7e0:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <nwkDataReqQueue>
     7e4:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <nwkDataReqQueue+0x1>
     7e8:	30 97       	sbiw	r30, 0x00	; 0
     7ea:	d9 f0       	breq	.+54     	; 0x822 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     7ec:	22 81       	ldd	r18, Z+2	; 0x02
     7ee:	33 81       	ldd	r19, Z+3	; 0x03
     7f0:	82 17       	cp	r24, r18
     7f2:	93 07       	cpc	r25, r19
     7f4:	89 f4       	brne	.+34     	; 0x818 <nwkDataReqTxConf+0x38>
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <nwkDataReqTxConf+0x22>
     7f8:	22 81       	ldd	r18, Z+2	; 0x02
     7fa:	33 81       	ldd	r19, Z+3	; 0x03
     7fc:	28 17       	cp	r18, r24
     7fe:	39 07       	cpc	r19, r25
     800:	59 f4       	brne	.+22     	; 0x818 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     802:	dc 01       	movw	r26, r24
     804:	ad 57       	subi	r26, 0x7D	; 125
     806:	bf 4f       	sbci	r27, 0xFF	; 255
     808:	2c 91       	ld	r18, X
     80a:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	2c 91       	ld	r18, X
     810:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     812:	22 e0       	ldi	r18, 0x02	; 2
     814:	24 83       	std	Z+4, r18	; 0x04
      break;
     816:	05 c0       	rjmp	.+10     	; 0x822 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     818:	01 90       	ld	r0, Z+
     81a:	f0 81       	ld	r31, Z
     81c:	e0 2d       	mov	r30, r0
     81e:	30 97       	sbiw	r30, 0x00	; 0
     820:	59 f7       	brne	.-42     	; 0x7f8 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     822:	11 c1       	rjmp	.+546    	; 0xa46 <nwkFrameFree>
     824:	08 95       	ret

00000826 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     826:	10 92 4a 0c 	sts	0x0C4A, r1	; 0x800c4a <nwkDataReqQueue+0x1>
     82a:	10 92 49 0c 	sts	0x0C49, r1	; 0x800c49 <nwkDataReqQueue>
     82e:	08 95       	ret

00000830 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     830:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     832:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     834:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     836:	13 82       	std	Z+3, r1	; 0x03
     838:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     83a:	a8 ef       	ldi	r26, 0xF8	; 248
     83c:	bf e1       	ldi	r27, 0x1F	; 31
     83e:	96 96       	adiw	r26, 0x26	; 38
     840:	8d 91       	ld	r24, X+
     842:	9c 91       	ld	r25, X
     844:	97 97       	sbiw	r26, 0x27	; 39
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	97 96       	adiw	r26, 0x27	; 39
     84a:	9c 93       	st	X, r25
     84c:	8e 93       	st	-X, r24
     84e:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     850:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <nwkDataReqQueue>
     854:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <nwkDataReqQueue+0x1>
     858:	00 97       	sbiw	r24, 0x00	; 0
     85a:	39 f4       	brne	.+14     	; 0x86a <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     85c:	11 82       	std	Z+1, r1	; 0x01
     85e:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     860:	f0 93 4a 0c 	sts	0x0C4A, r31	; 0x800c4a <nwkDataReqQueue+0x1>
     864:	e0 93 49 0c 	sts	0x0C49, r30	; 0x800c49 <nwkDataReqQueue>
     868:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     86a:	91 83       	std	Z+1, r25	; 0x01
     86c:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     86e:	f0 93 4a 0c 	sts	0x0C4A, r31	; 0x800c4a <nwkDataReqQueue+0x1>
     872:	e0 93 49 0c 	sts	0x0C49, r30	; 0x800c49 <nwkDataReqQueue>
     876:	08 95       	ret

00000878 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     880:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <nwkDataReqQueue>
     884:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <nwkDataReqQueue+0x1>
     888:	30 97       	sbiw	r30, 0x00	; 0
     88a:	09 f4       	brne	.+2      	; 0x88e <nwkDataReqTaskHandler+0x16>
     88c:	93 c0       	rjmp	.+294    	; 0x9b4 <nwkDataReqTaskHandler+0x13c>
     88e:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     890:	8c 81       	ldd	r24, Y+4	; 0x04
     892:	88 23       	and	r24, r24
     894:	21 f0       	breq	.+8      	; 0x89e <nwkDataReqTaskHandler+0x26>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	09 f4       	brne	.+2      	; 0x89c <nwkDataReqTaskHandler+0x24>
     89a:	66 c0       	rjmp	.+204    	; 0x968 <nwkDataReqTaskHandler+0xf0>
     89c:	85 c0       	rjmp	.+266    	; 0x9a8 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     89e:	9a d0       	rcall	.+308    	; 0x9d4 <nwkFrameAlloc>
     8a0:	8c 01       	movw	r16, r24
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	21 f4       	brne	.+8      	; 0x8ae <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     8aa:	8f 87       	std	Y+15, r24	; 0x0f
     8ac:	83 c0       	rjmp	.+262    	; 0x9b4 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     8ae:	9b 83       	std	Y+3, r25	; 0x03
     8b0:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     8b6:	f8 01       	movw	r30, r16
     8b8:	e9 57       	subi	r30, 0x79	; 121
     8ba:	ff 4f       	sbci	r31, 0xFF	; 255
     8bc:	80 ef       	ldi	r24, 0xF0	; 240
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	82 fb       	bst	r24, 2
     8ca:	88 27       	eor	r24, r24
     8cc:	80 f9       	bld	r24, 0
     8ce:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     8d0:	99 85       	ldd	r25, Y+9	; 0x09
     8d2:	d8 01       	movw	r26, r16
     8d4:	1b 96       	adiw	r26, 0x0b	; 11
     8d6:	8c 91       	ld	r24, X
     8d8:	1b 97       	sbiw	r26, 0x0b	; 11
     8da:	90 fb       	bst	r25, 0
     8dc:	80 f9       	bld	r24, 0
     8de:	1b 96       	adiw	r26, 0x0b	; 11
     8e0:	8c 93       	st	X, r24
     8e2:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     8e4:	99 85       	ldd	r25, Y+9	; 0x09
     8e6:	93 fb       	bst	r25, 3
     8e8:	99 27       	eor	r25, r25
     8ea:	90 f9       	bld	r25, 0
     8ec:	90 fb       	bst	r25, 0
     8ee:	82 f9       	bld	r24, 2
     8f0:	1b 96       	adiw	r26, 0x0b	; 11
     8f2:	8c 93       	st	X, r24
     8f4:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     8f6:	e8 ef       	ldi	r30, 0xF8	; 248
     8f8:	ff e1       	ldi	r31, 0x1F	; 31
     8fa:	84 81       	ldd	r24, Z+4	; 0x04
     8fc:	8f 5f       	subi	r24, 0xFF	; 255
     8fe:	84 83       	std	Z+4, r24	; 0x04
     900:	1c 96       	adiw	r26, 0x0c	; 12
     902:	8c 93       	st	X, r24
     904:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     906:	80 81       	ld	r24, Z
     908:	91 81       	ldd	r25, Z+1	; 0x01
     90a:	1e 96       	adiw	r26, 0x0e	; 14
     90c:	9c 93       	st	X, r25
     90e:	8e 93       	st	-X, r24
     910:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     912:	8d 81       	ldd	r24, Y+5	; 0x05
     914:	9e 81       	ldd	r25, Y+6	; 0x06
     916:	50 96       	adiw	r26, 0x10	; 16
     918:	9c 93       	st	X, r25
     91a:	8e 93       	st	-X, r24
     91c:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     91e:	88 85       	ldd	r24, Y+8	; 0x08
     920:	98 2f       	mov	r25, r24
     922:	9f 70       	andi	r25, 0x0F	; 15
     924:	51 96       	adiw	r26, 0x11	; 17
     926:	8c 91       	ld	r24, X
     928:	51 97       	sbiw	r26, 0x11	; 17
     92a:	80 7f       	andi	r24, 0xF0	; 240
     92c:	89 2b       	or	r24, r25
     92e:	51 96       	adiw	r26, 0x11	; 17
     930:	8c 93       	st	X, r24
     932:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     934:	9f 81       	ldd	r25, Y+7	; 0x07
     936:	92 95       	swap	r25
     938:	90 7f       	andi	r25, 0xF0	; 240
     93a:	8f 70       	andi	r24, 0x0F	; 15
     93c:	89 2b       	or	r24, r25
     93e:	51 96       	adiw	r26, 0x11	; 17
     940:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     942:	f8 01       	movw	r30, r16
     944:	ef 57       	subi	r30, 0x7F	; 127
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	4c 85       	ldd	r20, Y+12	; 0x0c
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	6a 85       	ldd	r22, Y+10	; 0x0a
     94e:	7b 85       	ldd	r23, Y+11	; 0x0b
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <memcpy>
  frame->size += req->size;
     958:	f8 01       	movw	r30, r16
     95a:	91 81       	ldd	r25, Z+1	; 0x01
     95c:	8c 85       	ldd	r24, Y+12	; 0x0c
     95e:	89 0f       	add	r24, r25
     960:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     962:	c8 01       	movw	r24, r16
     964:	5d d5       	rcall	.+2746   	; 0x1420 <nwkTxFrame>
     966:	26 c0       	rjmp	.+76     	; 0x9b4 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     968:	ec 17       	cp	r30, r28
     96a:	fd 07       	cpc	r31, r29
     96c:	41 f4       	brne	.+16     	; 0x97e <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <nwkDataReqQueue+0x1>
     976:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <nwkDataReqQueue>
     97a:	0a c0       	rjmp	.+20     	; 0x990 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     97c:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	8c 17       	cp	r24, r28
     984:	9d 07       	cpc	r25, r29
     986:	d1 f7       	brne	.-12     	; 0x97c <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     988:	88 81       	ld	r24, Y
     98a:	99 81       	ldd	r25, Y+1	; 0x01
     98c:	91 83       	std	Z+1, r25	; 0x01
     98e:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     990:	e8 ef       	ldi	r30, 0xF8	; 248
     992:	ff e1       	ldi	r31, 0x1F	; 31
     994:	86 a1       	ldd	r24, Z+38	; 0x26
     996:	97 a1       	ldd	r25, Z+39	; 0x27
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	97 a3       	std	Z+39, r25	; 0x27
     99c:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     99e:	ed 85       	ldd	r30, Y+13	; 0x0d
     9a0:	fe 85       	ldd	r31, Y+14	; 0x0e
     9a2:	ce 01       	movw	r24, r28
     9a4:	19 95       	eicall
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     9a8:	09 90       	ld	r0, Y+
     9aa:	d8 81       	ld	r29, Y
     9ac:	c0 2d       	mov	r28, r0
     9ae:	20 97       	sbiw	r28, 0x00	; 0
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <nwkDataReqTaskHandler+0x13c>
     9b2:	6e cf       	rjmp	.-292    	; 0x890 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     9be:	eb e4       	ldi	r30, 0x4B	; 75
     9c0:	fc e0       	ldi	r31, 0x0C	; 12
     9c2:	89 e5       	ldi	r24, 0x59	; 89
     9c4:	9c e1       	ldi	r25, 0x1C	; 28
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     9c6:	10 82       	st	Z, r1
     9c8:	e7 57       	subi	r30, 0x77	; 119
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9cc:	e8 17       	cp	r30, r24
     9ce:	f9 07       	cpc	r31, r25
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     9d2:	08 95       	ret

000009d4 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     9d4:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <nwkFrameFrames>
     9d8:	88 23       	and	r24, r24
     9da:	59 f0       	breq	.+22     	; 0x9f2 <nwkFrameAlloc+0x1e>
     9dc:	e4 ed       	ldi	r30, 0xD4	; 212
     9de:	fc e0       	ldi	r31, 0x0C	; 12
     9e0:	69 e5       	ldi	r22, 0x59	; 89
     9e2:	7c e1       	ldi	r23, 0x1C	; 28
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	ac 01       	movw	r20, r24
     9ea:	20 81       	ld	r18, Z
     9ec:	21 11       	cpse	r18, r1
     9ee:	22 c0       	rjmp	.+68     	; 0xa34 <nwkFrameAlloc+0x60>
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <nwkFrameAlloc+0x22>
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     9f6:	69 e8       	ldi	r22, 0x89	; 137
     9f8:	64 9f       	mul	r22, r20
     9fa:	90 01       	movw	r18, r0
     9fc:	65 9f       	mul	r22, r21
     9fe:	30 0d       	add	r19, r0
     a00:	11 24       	eor	r1, r1
     a02:	c9 01       	movw	r24, r18
     a04:	85 5b       	subi	r24, 0xB5	; 181
     a06:	93 4f       	sbci	r25, 0xF3	; 243
     a08:	fc 01       	movw	r30, r24
     a0a:	11 92       	st	Z+, r1
     a0c:	6a 95       	dec	r22
     a0e:	e9 f7       	brne	.-6      	; 0xa0a <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     a10:	40 e1       	ldi	r20, 0x10	; 16
     a12:	fc 01       	movw	r30, r24
     a14:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     a16:	ef 57       	subi	r30, 0x7F	; 127
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	23 5a       	subi	r18, 0xA3	; 163
     a1c:	33 4f       	sbci	r19, 0xF3	; 243
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
      nwkIb.lock++;
     a22:	e8 ef       	ldi	r30, 0xF8	; 248
     a24:	ff e1       	ldi	r31, 0x1F	; 31
     a26:	26 a1       	ldd	r18, Z+38	; 0x26
     a28:	37 a1       	ldd	r19, Z+39	; 0x27
     a2a:	2f 5f       	subi	r18, 0xFF	; 255
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	37 a3       	std	Z+39, r19	; 0x27
     a30:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     a32:	08 95       	ret
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	e7 57       	subi	r30, 0x77	; 119
     a38:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     a3a:	e6 17       	cp	r30, r22
     a3c:	f7 07       	cpc	r31, r23
     a3e:	a1 f6       	brne	.-88     	; 0x9e8 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
}
     a44:	08 95       	ret

00000a46 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     a46:	fc 01       	movw	r30, r24
     a48:	10 82       	st	Z, r1
  nwkIb.lock--;
     a4a:	e8 ef       	ldi	r30, 0xF8	; 248
     a4c:	ff e1       	ldi	r31, 0x1F	; 31
     a4e:	86 a1       	ldd	r24, Z+38	; 0x26
     a50:	97 a1       	ldd	r25, Z+39	; 0x27
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	97 a3       	std	Z+39, r25	; 0x27
     a56:	86 a3       	std	Z+38, r24	; 0x26
     a58:	08 95       	ret

00000a5a <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	41 f0       	breq	.+16     	; 0xa6e <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     a5e:	fc 01       	movw	r30, r24
     a60:	e7 57       	subi	r30, 0x77	; 119
     a62:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a64:	8c e1       	ldi	r24, 0x1C	; 28
     a66:	e9 35       	cpi	r30, 0x59	; 89
     a68:	f8 07       	cpc	r31, r24
     a6a:	18 f0       	brcs	.+6      	; 0xa72 <nwkFrameNext+0x18>
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     a6e:	eb e4       	ldi	r30, 0x4B	; 75
     a70:	fc e0       	ldi	r31, 0x0C	; 12
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a72:	80 81       	ld	r24, Z
     a74:	88 23       	and	r24, r24
     a76:	21 f0       	breq	.+8      	; 0xa80 <nwkFrameNext+0x26>
     a78:	0f c0       	rjmp	.+30     	; 0xa98 <nwkFrameNext+0x3e>
     a7a:	80 81       	ld	r24, Z
     a7c:	81 11       	cpse	r24, r1
     a7e:	0f c0       	rjmp	.+30     	; 0xa9e <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a80:	e7 57       	subi	r30, 0x77	; 119
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	8c e1       	ldi	r24, 0x1C	; 28
     a86:	e9 35       	cpi	r30, 0x59	; 89
     a88:	f8 07       	cpc	r31, r24
     a8a:	b8 f3       	brcs	.-18     	; 0xa7a <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	08 95       	ret
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a98:	8e 2f       	mov	r24, r30
     a9a:	9f 2f       	mov	r25, r31
     a9c:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a9e:	8e 2f       	mov	r24, r30
     aa0:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     aa2:	08 95       	ret

00000aa4 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     aa4:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     aa6:	dc 01       	movw	r26, r24
     aa8:	ad 57       	subi	r26, 0x7D	; 125
     aaa:	bf 4f       	sbci	r27, 0xFF	; 255
     aac:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     aae:	a8 ef       	ldi	r26, 0xF8	; 248
     ab0:	bf e1       	ldi	r27, 0x1F	; 31
     ab2:	14 96       	adiw	r26, 0x04	; 4
     ab4:	9c 91       	ld	r25, X
     ab6:	14 97       	sbiw	r26, 0x04	; 4
     ab8:	9f 5f       	subi	r25, 0xFF	; 255
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	9c 93       	st	X, r25
     abe:	14 97       	sbiw	r26, 0x04	; 4
     ac0:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     ac2:	8d 91       	ld	r24, X+
     ac4:	9c 91       	ld	r25, X
     ac6:	96 87       	std	Z+14, r25	; 0x0e
     ac8:	85 87       	std	Z+13, r24	; 0x0d
     aca:	08 95       	ret

00000acc <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     acc:	aa e5       	ldi	r26, 0x5A	; 90
     ace:	bc e1       	ldi	r27, 0x1C	; 28
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	4f ef       	ldi	r20, 0xFF	; 255
     ad6:	5f ef       	ldi	r21, 0xFF	; 255
     ad8:	11 96       	adiw	r26, 0x01	; 1
     ada:	5c 93       	st	X, r21
     adc:	4e 93       	st	-X, r20
     ade:	fc 01       	movw	r30, r24
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	e8 1b       	sub	r30, r24
     aee:	f9 0b       	sbc	r31, r25
     af0:	e7 5a       	subi	r30, 0xA7	; 167
     af2:	f3 4e       	sbci	r31, 0xE3	; 227
     af4:	20 81       	ld	r18, Z
     af6:	2e 7f       	andi	r18, 0xFE	; 254
     af8:	20 83       	st	Z, r18
     afa:	14 96       	adiw	r26, 0x04	; 4
     afc:	1c 92       	st	X, r1
     afe:	14 97       	sbiw	r26, 0x04	; 4
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	17 96       	adiw	r26, 0x07	; 7
     b04:	84 36       	cpi	r24, 0x64	; 100
     b06:	91 05       	cpc	r25, r1
     b08:	39 f7       	brne	.-50     	; 0xad8 <nwkRouteInit+0xc>
     b0a:	08 95       	ret

00000b0c <NWK_RouteFindEntry>:
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ea e5       	ldi	r30, 0x5A	; 90
     b16:	fc e1       	ldi	r31, 0x1C	; 28
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	06 2f       	mov	r16, r22
     b1e:	10 e0       	ldi	r17, 0x00	; 0
     b20:	40 81       	ld	r20, Z
     b22:	51 81       	ldd	r21, Z+1	; 0x01
     b24:	48 17       	cp	r20, r24
     b26:	59 07       	cpc	r21, r25
     b28:	b1 f4       	brne	.+44     	; 0xb56 <NWK_RouteFindEntry+0x4a>
     b2a:	d9 01       	movw	r26, r18
     b2c:	aa 0f       	add	r26, r26
     b2e:	bb 1f       	adc	r27, r27
     b30:	aa 0f       	add	r26, r26
     b32:	bb 1f       	adc	r27, r27
     b34:	aa 0f       	add	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	a2 1b       	sub	r26, r18
     b3a:	b3 0b       	sbc	r27, r19
     b3c:	a7 5a       	subi	r26, 0xA7	; 167
     b3e:	b3 4e       	sbci	r27, 0xE3	; 227
     b40:	4c 91       	ld	r20, X
     b42:	46 95       	lsr	r20
     b44:	41 70       	andi	r20, 0x01	; 1
     b46:	c4 2f       	mov	r28, r20
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	d4 2f       	mov	r29, r20
     b4c:	c0 17       	cp	r28, r16
     b4e:	d1 07       	cpc	r29, r17
     b50:	11 f4       	brne	.+4      	; 0xb56 <NWK_RouteFindEntry+0x4a>
     b52:	cd 01       	movw	r24, r26
     b54:	08 c0       	rjmp	.+16     	; 0xb66 <NWK_RouteFindEntry+0x5a>
     b56:	2f 5f       	subi	r18, 0xFF	; 255
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	37 96       	adiw	r30, 0x07	; 7
     b5c:	24 36       	cpi	r18, 0x64	; 100
     b5e:	31 05       	cpc	r19, r1
     b60:	f9 f6       	brne	.-66     	; 0xb20 <NWK_RouteFindEntry+0x14>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	08 95       	ret

00000b70 <NWK_RouteNewEntry>:
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e9 e5       	ldi	r30, 0x59	; 89
     b76:	fc e1       	ldi	r31, 0x1C	; 28
     b78:	80 81       	ld	r24, Z
     b7a:	80 fd       	sbrc	r24, 0
     b7c:	0d c0       	rjmp	.+26     	; 0xb98 <NWK_RouteNewEntry+0x28>
     b7e:	85 81       	ldd	r24, Z+5	; 0x05
     b80:	88 23       	and	r24, r24
     b82:	81 f0       	breq	.+32     	; 0xba4 <NWK_RouteNewEntry+0x34>
     b84:	10 97       	sbiw	r26, 0x00	; 0
     b86:	39 f0       	breq	.+14     	; 0xb96 <NWK_RouteNewEntry+0x26>
     b88:	15 96       	adiw	r26, 0x05	; 5
     b8a:	9c 91       	ld	r25, X
     b8c:	15 97       	sbiw	r26, 0x05	; 5
     b8e:	89 17       	cp	r24, r25
     b90:	18 f4       	brcc	.+6      	; 0xb98 <NWK_RouteNewEntry+0x28>
     b92:	df 01       	movw	r26, r30
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <NWK_RouteNewEntry+0x28>
     b96:	df 01       	movw	r26, r30
     b98:	37 96       	adiw	r30, 0x07	; 7
     b9a:	8f e1       	ldi	r24, 0x1F	; 31
     b9c:	e5 31       	cpi	r30, 0x15	; 21
     b9e:	f8 07       	cpc	r31, r24
     ba0:	59 f7       	brne	.-42     	; 0xb78 <NWK_RouteNewEntry+0x8>
     ba2:	fd 01       	movw	r30, r26
     ba4:	80 81       	ld	r24, Z
     ba6:	8d 70       	andi	r24, 0x0D	; 13
     ba8:	80 63       	ori	r24, 0x30	; 48
     baa:	80 83       	st	Z, r24
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	85 83       	std	Z+5, r24	; 0x05
     bb0:	cf 01       	movw	r24, r30
     bb2:	08 95       	ret

00000bb4 <NWK_RouteFreeEntry>:
     bb4:	fc 01       	movw	r30, r24
     bb6:	80 81       	ld	r24, Z
     bb8:	80 fd       	sbrc	r24, 0
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <NWK_RouteFreeEntry+0x12>
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	9f ef       	ldi	r25, 0xFF	; 255
     bc0:	92 83       	std	Z+2, r25	; 0x02
     bc2:	81 83       	std	Z+1, r24	; 0x01
     bc4:	15 82       	std	Z+5, r1	; 0x05
     bc6:	08 95       	ret

00000bc8 <NWK_RouteNextHop>:
     bc8:	a1 df       	rcall	.-190    	; 0xb0c <NWK_RouteFindEntry>
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <NWK_RouteNextHop+0xe>
     bce:	fc 01       	movw	r30, r24
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	94 81       	ldd	r25, Z+4	; 0x04
     bd4:	08 95       	ret
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	08 95       	ret

00000bdc <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     bdc:	97 df       	rcall	.-210    	; 0xb0c <NWK_RouteFindEntry>
  if (entry)
     bde:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     be0:	09 f0       	breq	.+2      	; 0xbe4 <nwkRouteRemove+0x8>
     be2:	e8 cf       	rjmp	.-48     	; 0xbb4 <NWK_RouteFreeEntry>
     be4:	08 95       	ret

00000be6 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     bf0:	01 85       	ldd	r16, Z+9	; 0x09
     bf2:	12 85       	ldd	r17, Z+10	; 0x0a
     bf4:	11 23       	and	r17, r17
     bf6:	2c f4       	brge	.+10     	; 0xc02 <nwkRouteFrameReceived+0x1c>
     bf8:	85 85       	ldd	r24, Z+13	; 0x0d
     bfa:	96 85       	ldd	r25, Z+14	; 0x0e
     bfc:	08 17       	cp	r16, r24
     bfe:	19 07       	cpc	r17, r25
     c00:	e1 f5       	brne	.+120    	; 0xc7a <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     c02:	85 81       	ldd	r24, Z+5	; 0x05
     c04:	96 81       	ldd	r25, Z+6	; 0x06
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	c1 f1       	breq	.+112    	; 0xc7a <nwkRouteFrameReceived+0x94>
     c0a:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	85 85       	ldd	r24, Z+13	; 0x0d
     c10:	96 85       	ldd	r25, Z+14	; 0x0e
     c12:	7c df       	rcall	.-264    	; 0xb0c <NWK_RouteFindEntry>
     c14:	fc 01       	movw	r30, r24

  if (entry)
     c16:	89 2b       	or	r24, r25
     c18:	a1 f0       	breq	.+40     	; 0xc42 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     c1a:	8f 81       	ldd	r24, Y+7	; 0x07
     c1c:	98 85       	ldd	r25, Y+8	; 0x08
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	f9 f4       	brne	.+62     	; 0xc60 <nwkRouteFrameReceived+0x7a>
     c22:	20 91 f8 1f 	lds	r18, 0x1FF8	; 0x801ff8 <nwkIb>
     c26:	30 91 f9 1f 	lds	r19, 0x1FF9	; 0x801ff9 <nwkIb+0x1>
     c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c2c:	98 89       	ldd	r25, Y+16	; 0x10
     c2e:	28 17       	cp	r18, r24
     c30:	39 07       	cpc	r19, r25
     c32:	b1 f4       	brne	.+44     	; 0xc60 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     c34:	14 83       	std	Z+4, r17	; 0x04
     c36:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c38:	80 81       	ld	r24, Z
     c3a:	8f 70       	andi	r24, 0x0F	; 15
     c3c:	80 63       	ori	r24, 0x30	; 48
     c3e:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     c40:	0a c0       	rjmp	.+20     	; 0xc56 <nwkRouteFrameReceived+0x70>
     c42:	96 df       	rcall	.-212    	; 0xb70 <NWK_RouteNewEntry>
     c44:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     c46:	8d 85       	ldd	r24, Y+13	; 0x0d
     c48:	9e 85       	ldd	r25, Y+14	; 0x0e
     c4a:	92 83       	std	Z+2, r25	; 0x02
     c4c:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     c4e:	89 85       	ldd	r24, Y+9	; 0x09
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	94 83       	std	Z+4, r25	; 0x04
     c54:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     c56:	cd 57       	subi	r28, 0x7D	; 125
     c58:	df 4f       	sbci	r29, 0xFF	; 255
     c5a:	88 81       	ld	r24, Y
     c5c:	86 83       	std	Z+6, r24	; 0x06
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     c60:	83 81       	ldd	r24, Z+3	; 0x03
     c62:	94 81       	ldd	r25, Z+4	; 0x04
     c64:	08 17       	cp	r16, r24
     c66:	19 07       	cpc	r17, r25
     c68:	b1 f3       	breq	.-20     	; 0xc56 <nwkRouteFrameReceived+0x70>
     c6a:	96 81       	ldd	r25, Z+6	; 0x06
     c6c:	de 01       	movw	r26, r28
     c6e:	ad 57       	subi	r26, 0x7D	; 125
     c70:	bf 4f       	sbci	r27, 0xFF	; 255
     c72:	8c 91       	ld	r24, X
     c74:	98 17       	cp	r25, r24
     c76:	f0 f2       	brcs	.-68     	; 0xc34 <nwkRouteFrameReceived+0x4e>
     c78:	ee cf       	rjmp	.-36     	; 0xc56 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     c8a:	87 85       	ldd	r24, Z+15	; 0x0f
     c8c:	90 89       	ldd	r25, Z+16	; 0x10
     c8e:	8f 3f       	cpi	r24, 0xFF	; 255
     c90:	2f ef       	ldi	r18, 0xFF	; 255
     c92:	92 07       	cpc	r25, r18
     c94:	d9 f1       	breq	.+118    	; 0xd0c <nwkRouteFrameSent+0x88>
     c96:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     c98:	63 85       	ldd	r22, Z+11	; 0x0b
     c9a:	63 fb       	bst	r22, 3
     c9c:	66 27       	eor	r22, r22
     c9e:	60 f9       	bld	r22, 0
     ca0:	35 df       	rcall	.-406    	; 0xb0c <NWK_RouteFindEntry>
     ca2:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     ca4:	89 2b       	or	r24, r25
     ca6:	91 f1       	breq	.+100    	; 0xd0c <nwkRouteFrameSent+0x88>
     ca8:	8c 91       	ld	r24, X
     caa:	80 fd       	sbrc	r24, 0
     cac:	2f c0       	rjmp	.+94     	; 0xd0c <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     cae:	fe 01       	movw	r30, r28
     cb0:	ed 57       	subi	r30, 0x7D	; 125
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	80 81       	ld	r24, Z
     cb6:	81 11       	cpse	r24, r1
     cb8:	19 c0       	rjmp	.+50     	; 0xcec <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     cba:	8c 91       	ld	r24, X
     cbc:	8f 70       	andi	r24, 0x0F	; 15
     cbe:	80 63       	ori	r24, 0x30	; 48
     cc0:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     cc2:	15 96       	adiw	r26, 0x05	; 5
     cc4:	8c 91       	ld	r24, X
     cc6:	15 97       	sbiw	r26, 0x05	; 5
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	15 96       	adiw	r26, 0x05	; 5
     ccc:	8c 93       	st	X, r24
     cce:	8f 3f       	cpi	r24, 0xFF	; 255
     cd0:	e9 f4       	brne	.+58     	; 0xd0c <nwkRouteFrameSent+0x88>
     cd2:	ee e5       	ldi	r30, 0x5E	; 94
     cd4:	fc e1       	ldi	r31, 0x1C	; 28
     cd6:	2a e1       	ldi	r18, 0x1A	; 26
     cd8:	3f e1       	ldi	r19, 0x1F	; 31
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     cda:	80 81       	ld	r24, Z
     cdc:	86 95       	lsr	r24
     cde:	8f 5f       	subi	r24, 0xFF	; 255
     ce0:	80 83       	st	Z, r24
     ce2:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     ce4:	e2 17       	cp	r30, r18
     ce6:	f3 07       	cpc	r31, r19
     ce8:	c1 f7       	brne	.-16     	; 0xcda <nwkRouteFrameSent+0x56>
     cea:	10 c0       	rjmp	.+32     	; 0xd0c <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     cec:	9c 91       	ld	r25, X
     cee:	89 2f       	mov	r24, r25
     cf0:	82 95       	swap	r24
     cf2:	8f 70       	andi	r24, 0x0F	; 15
     cf4:	81 5f       	subi	r24, 0xF1	; 241
     cf6:	8f 70       	andi	r24, 0x0F	; 15
     cf8:	28 2f       	mov	r18, r24
     cfa:	22 95       	swap	r18
     cfc:	20 7f       	andi	r18, 0xF0	; 240
     cfe:	9f 70       	andi	r25, 0x0F	; 15
     d00:	92 2b       	or	r25, r18
     d02:	9c 93       	st	X, r25
     d04:	81 11       	cpse	r24, r1
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     d08:	cd 01       	movw	r24, r26
     d0a:	54 df       	rcall	.-344    	; 0xbb4 <NWK_RouteFreeEntry>
  }
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     d18:	87 85       	ldd	r24, Z+15	; 0x0f
     d1a:	90 89       	ldd	r25, Z+16	; 0x10
     d1c:	8f 3f       	cpi	r24, 0xFF	; 255
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	92 07       	cpc	r25, r18
     d22:	29 f4       	brne	.+10     	; 0xd2e <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	9f ef       	ldi	r25, 0xFF	; 255
     d28:	90 87       	std	Z+8, r25	; 0x08
     d2a:	87 83       	std	Z+7, r24	; 0x07
     d2c:	0e c0       	rjmp	.+28     	; 0xd4a <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     d2e:	23 85       	ldd	r18, Z+11	; 0x0b
     d30:	22 ff       	sbrs	r18, 2
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     d34:	90 87       	std	Z+8, r25	; 0x08
     d36:	87 83       	std	Z+7, r24	; 0x07
     d38:	08 c0       	rjmp	.+16     	; 0xd4a <nwkRoutePrepareTx+0x38>
     d3a:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     d3c:	63 85       	ldd	r22, Z+11	; 0x0b
     d3e:	63 fb       	bst	r22, 3
     d40:	66 27       	eor	r22, r22
     d42:	60 f9       	bld	r22, 0
     d44:	41 df       	rcall	.-382    	; 0xbc8 <NWK_RouteNextHop>
     d46:	98 87       	std	Y+8, r25	; 0x08
     d48:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     d64:	1b 85       	ldd	r17, Y+11	; 0x0b
     d66:	13 fb       	bst	r17, 3
     d68:	11 27       	eor	r17, r17
     d6a:	10 f9       	bld	r17, 0
     d6c:	cf 84       	ldd	r12, Y+15	; 0x0f
     d6e:	d8 88       	ldd	r13, Y+16	; 0x10
     d70:	61 2f       	mov	r22, r17
     d72:	c6 01       	movw	r24, r12
     d74:	29 df       	rcall	.-430    	; 0xbc8 <NWK_RouteNextHop>
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	59 f0       	breq	.+22     	; 0xd90 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     d7a:	fe 01       	movw	r30, r28
     d7c:	e9 57       	subi	r30, 0x79	; 121
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	11 82       	std	Z+1, r1	; 0x01
     d82:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     d8a:	ce 01       	movw	r24, r28
     d8c:	49 d3       	rcall	.+1682   	; 0x1420 <nwkTxFrame>
     d8e:	22 c0       	rjmp	.+68     	; 0xdd4 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     d90:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     d92:	be 84       	ldd	r11, Y+14	; 0x0e
     d94:	1f de       	rcall	.-962    	; 0x9d4 <nwkFrameAlloc>
     d96:	7c 01       	movw	r14, r24
     d98:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     d9a:	d1 f0       	breq	.+52     	; 0xdd0 <nwkRouteFrame+0x80>
     d9c:	83 de       	rcall	.-762    	; 0xaa4 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     d9e:	f7 01       	movw	r30, r14
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	8a 5f       	subi	r24, 0xFA	; 250
     da4:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     da6:	e9 57       	subi	r30, 0x79	; 121
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	11 82       	std	Z+1, r1	; 0x01
     dac:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     dae:	f7 01       	movw	r30, r14
     db0:	b0 8a       	std	Z+16, r11	; 0x10
     db2:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     db4:	ef 57       	subi	r30, 0x7F	; 127
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	01 90       	ld	r0, Z+
     dba:	f0 81       	ld	r31, Z
     dbc:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 83       	st	Z, r24
  command->srcAddr = src;
     dc2:	b2 82       	std	Z+2, r11	; 0x02
     dc4:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     dc6:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     dc8:	c3 82       	std	Z+3, r12	; 0x03
     dca:	15 83       	std	Z+5, r17	; 0x05
     dcc:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     dce:	28 d3       	rcall	.+1616   	; 0x1420 <nwkTxFrame>
     dd0:	ce 01       	movw	r24, r28
     dd2:	39 de       	rcall	.-910    	; 0xa46 <nwkFrameFree>
  }
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	08 95       	ret

00000de8 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret

00000dec <nwkRxDuplicateRejectionTimerHandler>:
     dec:	bc 01       	movw	r22, r24
     dee:	e7 e2       	ldi	r30, 0x27	; 39
     df0:	ff e1       	ldi	r31, 0x1F	; 31
     df2:	29 e5       	ldi	r18, 0x59	; 89
     df4:	3f e1       	ldi	r19, 0x1F	; 31
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	51 e0       	ldi	r21, 0x01	; 1
     dfa:	90 81       	ld	r25, Z
     dfc:	99 23       	and	r25, r25
     dfe:	19 f0       	breq	.+6      	; 0xe06 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     e00:	91 50       	subi	r25, 0x01	; 1
     e02:	90 83       	st	Z, r25
     e04:	45 2f       	mov	r20, r21
     e06:	35 96       	adiw	r30, 0x05	; 5
     e08:	e2 17       	cp	r30, r18
     e0a:	f3 07       	cpc	r31, r19
     e0c:	b1 f7       	brne	.-20     	; 0xdfa <nwkRxDuplicateRejectionTimerHandler+0xe>
     e0e:	44 23       	and	r20, r20
     e10:	11 f0       	breq	.+4      	; 0xe16 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     e12:	cb 01       	movw	r24, r22
     e14:	0b c6       	rjmp	.+3094   	; 0x1a2c <SYS_TimerStart>
     e16:	08 95       	ret

00000e18 <nwkRxInit>:
     e18:	e7 e2       	ldi	r30, 0x27	; 39
     e1a:	ff e1       	ldi	r31, 0x1F	; 31
     e1c:	89 e5       	ldi	r24, 0x59	; 89
     e1e:	9f e1       	ldi	r25, 0x1F	; 31
     e20:	10 82       	st	Z, r1
     e22:	35 96       	adiw	r30, 0x05	; 5
     e24:	e8 17       	cp	r30, r24
     e26:	f9 07       	cpc	r31, r25
     e28:	d9 f7       	brne	.-10     	; 0xe20 <nwkRxInit+0x8>
     e2a:	e5 e1       	ldi	r30, 0x15	; 21
     e2c:	ff e1       	ldi	r31, 0x1F	; 31
     e2e:	84 e6       	ldi	r24, 0x64	; 100
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 e0       	ldi	r26, 0x00	; 0
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	86 83       	std	Z+6, r24	; 0x06
     e38:	97 83       	std	Z+7, r25	; 0x07
     e3a:	a0 87       	std	Z+8, r26	; 0x08
     e3c:	b1 87       	std	Z+9, r27	; 0x09
     e3e:	12 86       	std	Z+10, r1	; 0x0a
     e40:	86 ef       	ldi	r24, 0xF6	; 246
     e42:	96 e0       	ldi	r25, 0x06	; 6
     e44:	94 87       	std	Z+12, r25	; 0x0c
     e46:	83 87       	std	Z+11, r24	; 0x0b
     e48:	64 ef       	ldi	r22, 0xF4	; 244
     e4a:	76 e0       	ldi	r23, 0x06	; 6
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	bb cc       	rjmp	.-1674   	; 0x7c6 <NWK_OpenEndpoint>
     e50:	08 95       	ret

00000e52 <PHY_DataInd>:
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	dc 01       	movw	r26, r24
     e58:	ed 91       	ld	r30, X+
     e5a:	fc 91       	ld	r31, X
     e5c:	11 97       	sbiw	r26, 0x01	; 1
     e5e:	21 81       	ldd	r18, Z+1	; 0x01
     e60:	28 38       	cpi	r18, 0x88	; 136
     e62:	f1 f4       	brne	.+60     	; 0xea0 <PHY_DataInd+0x4e>
     e64:	20 81       	ld	r18, Z
     e66:	2f 7d       	andi	r18, 0xDF	; 223
     e68:	21 34       	cpi	r18, 0x41	; 65
     e6a:	d1 f4       	brne	.+52     	; 0xea0 <PHY_DataInd+0x4e>
     e6c:	12 96       	adiw	r26, 0x02	; 2
     e6e:	2c 91       	ld	r18, X
     e70:	20 31       	cpi	r18, 0x10	; 16
     e72:	b0 f0       	brcs	.+44     	; 0xea0 <PHY_DataInd+0x4e>
     e74:	ec 01       	movw	r28, r24
     e76:	ae dd       	rcall	.-1188   	; 0x9d4 <nwkFrameAlloc>
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	91 f0       	breq	.+36     	; 0xea0 <PHY_DataInd+0x4e>
     e7c:	20 e2       	ldi	r18, 0x20	; 32
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18
     e82:	2a 81       	ldd	r18, Y+2	; 0x02
     e84:	21 83       	std	Z+1, r18	; 0x01
     e86:	2b 81       	ldd	r18, Y+3	; 0x03
     e88:	ed 57       	subi	r30, 0x7D	; 125
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	20 83       	st	Z, r18
     e8e:	2c 81       	ldd	r18, Y+4	; 0x04
     e90:	31 96       	adiw	r30, 0x01	; 1
     e92:	20 83       	st	Z, r18
     e94:	4a 81       	ldd	r20, Y+2	; 0x02
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	68 81       	ld	r22, Y
     e9a:	79 81       	ldd	r23, Y+1	; 0x01
     e9c:	02 96       	adiw	r24, 0x02	; 2
     e9e:	b3 d6       	rcall	.+3430   	; 0x1c06 <memcpy>
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     ea6:	2f 92       	push	r2
     ea8:	3f 92       	push	r3
     eaa:	4f 92       	push	r4
     eac:	5f 92       	push	r5
     eae:	6f 92       	push	r6
     eb0:	7f 92       	push	r7
     eb2:	8f 92       	push	r8
     eb4:	9f 92       	push	r9
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	2c 97       	sbiw	r28, 0x0c	; 12
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     eda:	00 e0       	ldi	r16, 0x00	; 0
     edc:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     ede:	0f 2e       	mov	r0, r31
     ee0:	f4 e2       	ldi	r31, 0x24	; 36
     ee2:	bf 2e       	mov	r11, r31
     ee4:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f8 ef       	ldi	r31, 0xF8	; 248
     eea:	ef 2e       	mov	r14, r31
     eec:	ff e1       	ldi	r31, 0x1F	; 31
     eee:	ff 2e       	mov	r15, r31
     ef0:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     ef2:	55 24       	eor	r5, r5
     ef4:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     ef6:	68 94       	set
     ef8:	aa 24       	eor	r10, r10
     efa:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     efc:	68 94       	set
     efe:	77 24       	eor	r7, r7
     f00:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     f02:	68 94       	set
     f04:	66 24       	eor	r6, r6
     f06:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f08:	31 2c       	mov	r3, r1
     f0a:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     f0c:	0f 2e       	mov	r0, r31
     f0e:	ff e1       	ldi	r31, 0x1F	; 31
     f10:	4f 2e       	mov	r4, r31
     f12:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     f14:	cc 24       	eor	r12, r12
     f16:	c3 94       	inc	r12
     f18:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     f1a:	da c1       	rjmp	.+948    	; 0x12d0 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     f1c:	d8 01       	movw	r26, r16
     f1e:	8c 91       	ld	r24, X
     f20:	82 32       	cpi	r24, 0x22	; 34
     f22:	09 f4       	brne	.+2      	; 0xf26 <nwkRxTaskHandler+0x80>
     f24:	05 c1       	rjmp	.+522    	; 0x1130 <nwkRxTaskHandler+0x28a>
     f26:	18 f4       	brcc	.+6      	; 0xf2e <nwkRxTaskHandler+0x88>
     f28:	80 32       	cpi	r24, 0x20	; 32
     f2a:	41 f0       	breq	.+16     	; 0xf3c <nwkRxTaskHandler+0x96>
     f2c:	d1 c1       	rjmp	.+930    	; 0x12d0 <nwkRxTaskHandler+0x42a>
     f2e:	83 32       	cpi	r24, 0x23	; 35
     f30:	09 f4       	brne	.+2      	; 0xf34 <nwkRxTaskHandler+0x8e>
     f32:	c9 c1       	rjmp	.+914    	; 0x12c6 <nwkRxTaskHandler+0x420>
     f34:	84 32       	cpi	r24, 0x24	; 36
     f36:	09 f4       	brne	.+2      	; 0xf3a <nwkRxTaskHandler+0x94>
     f38:	c9 c1       	rjmp	.+914    	; 0x12cc <nwkRxTaskHandler+0x426>
     f3a:	ca c1       	rjmp	.+916    	; 0x12d0 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     f3c:	f8 01       	movw	r30, r16
     f3e:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     f40:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     f42:	98 2f       	mov	r25, r24
     f44:	9a 70       	andi	r25, 0x0A	; 10
     f46:	09 f0       	breq	.+2      	; 0xf4a <nwkRxTaskHandler+0xa4>
     f48:	c3 c1       	rjmp	.+902    	; 0x12d0 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     f4a:	25 81       	ldd	r18, Z+5	; 0x05
     f4c:	36 81       	ldd	r19, Z+6	; 0x06
     f4e:	2f 3f       	cpi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	91 f4       	brne	.+36     	; 0xf78 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     f54:	d8 01       	movw	r26, r16
     f56:	1f 96       	adiw	r26, 0x0f	; 15
     f58:	8d 91       	ld	r24, X+
     f5a:	9c 91       	ld	r25, X
     f5c:	50 97       	sbiw	r26, 0x10	; 16
     f5e:	f7 01       	movw	r30, r14
     f60:	20 81       	ld	r18, Z
     f62:	31 81       	ldd	r19, Z+1	; 0x01
     f64:	28 17       	cp	r18, r24
     f66:	39 07       	cpc	r19, r25
     f68:	19 f0       	breq	.+6      	; 0xf70 <nwkRxTaskHandler+0xca>
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <nwkRxTaskHandler+0xca>
     f6e:	b0 c1       	rjmp	.+864    	; 0x12d0 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     f70:	e2 e2       	ldi	r30, 0x22	; 34
     f72:	d8 01       	movw	r26, r16
     f74:	ec 93       	st	X, r30
     f76:	ac c1       	rjmp	.+856    	; 0x12d0 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     f78:	d8 01       	movw	r26, r16
     f7a:	1f 96       	adiw	r26, 0x0f	; 15
     f7c:	2d 91       	ld	r18, X+
     f7e:	3c 91       	ld	r19, X
     f80:	50 97       	sbiw	r26, 0x10	; 16
     f82:	2f 3f       	cpi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	11 f4       	brne	.+4      	; 0xf8c <nwkRxTaskHandler+0xe6>
     f88:	80 fd       	sbrc	r24, 0
     f8a:	a2 c1       	rjmp	.+836    	; 0x12d0 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f8c:	f7 01       	movw	r30, r14
     f8e:	20 81       	ld	r18, Z
     f90:	31 81       	ldd	r19, Z+1	; 0x01
     f92:	d8 01       	movw	r26, r16
     f94:	1d 96       	adiw	r26, 0x0d	; 13
     f96:	8d 91       	ld	r24, X+
     f98:	9c 91       	ld	r25, X
     f9a:	1e 97       	sbiw	r26, 0x0e	; 14
     f9c:	28 17       	cp	r18, r24
     f9e:	39 07       	cpc	r19, r25
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <nwkRxTaskHandler+0xfe>
     fa2:	96 c1       	rjmp	.+812    	; 0x12d0 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     fa4:	c8 01       	movw	r24, r16
     fa6:	1f de       	rcall	.-962    	; 0xbe6 <nwkRouteFrameReceived>
     fa8:	e3 e2       	ldi	r30, 0x23	; 35
     faa:	ff e1       	ldi	r31, 0x1F	; 31
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     fb0:	83 2c       	mov	r8, r3
     fb2:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     fb4:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     fb6:	44 81       	ldd	r20, Z+4	; 0x04
     fb8:	44 23       	and	r20, r20
     fba:	09 f4       	brne	.+2      	; 0xfbe <nwkRxTaskHandler+0x118>
     fbc:	74 c0       	rjmp	.+232    	; 0x10a6 <nwkRxTaskHandler+0x200>
     fbe:	d8 01       	movw	r26, r16
     fc0:	1d 96       	adiw	r26, 0x0d	; 13
     fc2:	6d 91       	ld	r22, X+
     fc4:	7c 91       	ld	r23, X
     fc6:	1e 97       	sbiw	r26, 0x0e	; 14
     fc8:	40 81       	ld	r20, Z
     fca:	51 81       	ldd	r21, Z+1	; 0x01
     fcc:	64 17       	cp	r22, r20
     fce:	75 07       	cpc	r23, r21
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <nwkRxTaskHandler+0x12e>
     fd2:	6a c0       	rjmp	.+212    	; 0x10a8 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     fd4:	1c 96       	adiw	r26, 0x0c	; 12
     fd6:	8c 91       	ld	r24, X
     fd8:	1c 97       	sbiw	r26, 0x0c	; 12
     fda:	f9 01       	movw	r30, r18
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	e2 0f       	add	r30, r18
     fe6:	f3 1f       	adc	r31, r19
     fe8:	ed 5d       	subi	r30, 0xDD	; 221
     fea:	f0 4e       	sbci	r31, 0xE0	; 224
     fec:	92 81       	ldd	r25, Z+2	; 0x02
     fee:	98 1b       	sub	r25, r24

      if (diff < 8)
     ff0:	98 30       	cpi	r25, 0x08	; 8
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <nwkRxTaskHandler+0x150>
     ff4:	3e c0       	rjmp	.+124    	; 0x1072 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     ff6:	f9 01       	movw	r30, r18
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	ed 5d       	subi	r30, 0xDD	; 221
    1006:	f0 4e       	sbci	r31, 0xE0	; 224
    1008:	83 81       	ldd	r24, Z+3	; 0x03
    100a:	48 2f       	mov	r20, r24
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	09 2e       	mov	r0, r25
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <nwkRxTaskHandler+0x170>
    1012:	55 95       	asr	r21
    1014:	47 95       	ror	r20
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <nwkRxTaskHandler+0x16c>
    101a:	40 ff       	sbrs	r20, 0
    101c:	17 c0       	rjmp	.+46     	; 0x104c <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    101e:	f7 01       	movw	r30, r14
    1020:	20 81       	ld	r18, Z
    1022:	31 81       	ldd	r19, Z+1	; 0x01
    1024:	17 96       	adiw	r26, 0x07	; 7
    1026:	8d 91       	ld	r24, X+
    1028:	9c 91       	ld	r25, X
    102a:	18 97       	sbiw	r26, 0x08	; 8
    102c:	28 17       	cp	r18, r24
    102e:	39 07       	cpc	r19, r25
    1030:	09 f0       	breq	.+2      	; 0x1034 <nwkRxTaskHandler+0x18e>
    1032:	4e c1       	rjmp	.+668    	; 0x12d0 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1034:	1b 96       	adiw	r26, 0x0b	; 11
    1036:	6c 91       	ld	r22, X
    1038:	1b 97       	sbiw	r26, 0x0b	; 11
    103a:	63 fb       	bst	r22, 3
    103c:	66 27       	eor	r22, r22
    103e:	60 f9       	bld	r22, 0
    1040:	1f 96       	adiw	r26, 0x0f	; 15
    1042:	8d 91       	ld	r24, X+
    1044:	9c 91       	ld	r25, X
    1046:	50 97       	sbiw	r26, 0x10	; 16
    1048:	c9 dd       	rcall	.-1134   	; 0xbdc <nwkRouteRemove>
    104a:	42 c1       	rjmp	.+644    	; 0x12d0 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    104c:	f9 01       	movw	r30, r18
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	2e 0f       	add	r18, r30
    1058:	3f 1f       	adc	r19, r31
    105a:	f9 01       	movw	r30, r18
    105c:	ed 5d       	subi	r30, 0xDD	; 221
    105e:	f0 4e       	sbci	r31, 0xE0	; 224
    1060:	96 01       	movw	r18, r12
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <nwkRxTaskHandler+0x1c2>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	9a 95       	dec	r25
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <nwkRxTaskHandler+0x1be>
    106c:	82 2b       	or	r24, r18
    106e:	83 83       	std	Z+3, r24	; 0x03
    1070:	36 c1       	rjmp	.+620    	; 0x12de <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1072:	f9 01       	movw	r30, r18
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	2e 0f       	add	r18, r30
    107e:	3f 1f       	adc	r19, r31
    1080:	f9 01       	movw	r30, r18
    1082:	ed 5d       	subi	r30, 0xDD	; 221
    1084:	f0 4e       	sbci	r31, 0xE0	; 224
    1086:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1088:	83 81       	ldd	r24, Z+3	; 0x03
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	91 95       	neg	r25
    1090:	a9 01       	movw	r20, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <nwkRxTaskHandler+0x1f2>
    1094:	44 0f       	add	r20, r20
    1096:	55 1f       	adc	r21, r21
    1098:	9a 95       	dec	r25
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <nwkRxTaskHandler+0x1ee>
    109c:	ca 01       	movw	r24, r20
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    10a2:	44 82       	std	Z+4, r4	; 0x04
    10a4:	1c c1       	rjmp	.+568    	; 0x12de <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    10a6:	4f 01       	movw	r8, r30
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    10ac:	8a 30       	cpi	r24, 0x0A	; 10
    10ae:	91 05       	cpc	r25, r1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <nwkRxTaskHandler+0x20e>
    10b2:	80 cf       	rjmp	.-256    	; 0xfb4 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    10b4:	81 14       	cp	r8, r1
    10b6:	91 04       	cpc	r9, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <nwkRxTaskHandler+0x216>
    10ba:	0a c1       	rjmp	.+532    	; 0x12d0 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    10bc:	d8 01       	movw	r26, r16
    10be:	1d 96       	adiw	r26, 0x0d	; 13
    10c0:	8d 91       	ld	r24, X+
    10c2:	9c 91       	ld	r25, X
    10c4:	1e 97       	sbiw	r26, 0x0e	; 14
    10c6:	f4 01       	movw	r30, r8
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    10cc:	1c 96       	adiw	r26, 0x0c	; 12
    10ce:	8c 91       	ld	r24, X
    10d0:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    10d2:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    10d4:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    10d6:	85 e1       	ldi	r24, 0x15	; 21
    10d8:	9f e1       	ldi	r25, 0x1F	; 31
    10da:	a8 d4       	rcall	.+2384   	; 0x1a2c <SYS_TimerStart>
    10dc:	00 c1       	rjmp	.+512    	; 0x12de <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    10de:	d7 01       	movw	r26, r14
    10e0:	2d 91       	ld	r18, X+
    10e2:	3c 91       	ld	r19, X
    10e4:	f8 01       	movw	r30, r16
    10e6:	87 85       	ldd	r24, Z+15	; 0x0f
    10e8:	90 89       	ldd	r25, Z+16	; 0x10
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	81 f0       	breq	.+32     	; 0x1110 <nwkRxTaskHandler+0x26a>
    10f0:	43 85       	ldd	r20, Z+11	; 0x0b
    10f2:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    10f4:	0b c0       	rjmp	.+22     	; 0x110c <nwkRxTaskHandler+0x266>
    10f6:	c8 01       	movw	r24, r16
    10f8:	e1 d1       	rcall	.+962    	; 0x14bc <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    10fa:	d7 01       	movw	r26, r14
    10fc:	2d 91       	ld	r18, X+
    10fe:	3c 91       	ld	r19, X
    1100:	f8 01       	movw	r30, r16
    1102:	87 85       	ldd	r24, Z+15	; 0x0f
    1104:	90 89       	ldd	r25, Z+16	; 0x10
    1106:	28 17       	cp	r18, r24
    1108:	39 07       	cpc	r19, r25
    110a:	11 f0       	breq	.+4      	; 0x1110 <nwkRxTaskHandler+0x26a>
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	21 f4       	brne	.+8      	; 0x1118 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1110:	e2 e2       	ldi	r30, 0x22	; 34
    1112:	d8 01       	movw	r26, r16
    1114:	ec 93       	st	X, r30
    1116:	dc c0       	rjmp	.+440    	; 0x12d0 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1118:	d8 01       	movw	r26, r16
    111a:	17 96       	adiw	r26, 0x07	; 7
    111c:	8d 91       	ld	r24, X+
    111e:	9c 91       	ld	r25, X
    1120:	18 97       	sbiw	r26, 0x08	; 8
    1122:	82 17       	cp	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	09 f0       	breq	.+2      	; 0x112a <nwkRxTaskHandler+0x284>
    1128:	d3 c0       	rjmp	.+422    	; 0x12d0 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    112a:	e3 e2       	ldi	r30, 0x23	; 35
    112c:	ec 93       	st	X, r30
    112e:	d0 c0       	rjmp	.+416    	; 0x12d0 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1130:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1134:	d8 01       	movw	r26, r16
    1136:	51 96       	adiw	r26, 0x11	; 17
    1138:	8c 91       	ld	r24, X
    113a:	51 97       	sbiw	r26, 0x11	; 17
    113c:	82 95       	swap	r24
    113e:	8f 70       	andi	r24, 0x0F	; 15
    1140:	e8 2f       	mov	r30, r24
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	e2 50       	subi	r30, 0x02	; 2
    114a:	f0 4e       	sbci	r31, 0xE0	; 224
    114c:	01 90       	ld	r0, Z+
    114e:	f0 81       	ld	r31, Z
    1150:	e0 2d       	mov	r30, r0
    1152:	30 97       	sbiw	r30, 0x00	; 0
    1154:	09 f4       	brne	.+2      	; 0x1158 <nwkRxTaskHandler+0x2b2>
    1156:	60 c0       	rjmp	.+192    	; 0x1218 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1158:	1d 96       	adiw	r26, 0x0d	; 13
    115a:	2d 91       	ld	r18, X+
    115c:	3c 91       	ld	r19, X
    115e:	1e 97       	sbiw	r26, 0x0e	; 14
    1160:	3a 83       	std	Y+2, r19	; 0x02
    1162:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1164:	1f 96       	adiw	r26, 0x0f	; 15
    1166:	4d 91       	ld	r20, X+
    1168:	5c 91       	ld	r21, X
    116a:	50 97       	sbiw	r26, 0x10	; 16
    116c:	5c 83       	std	Y+4, r21	; 0x04
    116e:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1170:	51 96       	adiw	r26, 0x11	; 17
    1172:	9c 91       	ld	r25, X
    1174:	51 97       	sbiw	r26, 0x11	; 17
    1176:	9f 70       	andi	r25, 0x0F	; 15
    1178:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    117a:	8e 83       	std	Y+6, r24	; 0x06
  ind.appdata = frame->payload;
    117c:	af 57       	subi	r26, 0x7F	; 127
    117e:	bf 4f       	sbci	r27, 0xFF	; 255
    1180:	8d 91       	ld	r24, X+
    1182:	9c 91       	ld	r25, X
    1184:	99 87       	std	Y+9, r25	; 0x09
    1186:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1188:	b8 01       	movw	r22, r16
    118a:	6e 5f       	subi	r22, 0xFE	; 254
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    118e:	86 1b       	sub	r24, r22
    1190:	97 0b       	sbc	r25, r23
    1192:	d8 01       	movw	r26, r16
    1194:	11 96       	adiw	r26, 0x01	; 1
    1196:	9c 91       	ld	r25, X
    1198:	11 97       	sbiw	r26, 0x01	; 1
    119a:	98 1b       	sub	r25, r24
    119c:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    119e:	ad 57       	subi	r26, 0x7D	; 125
    11a0:	bf 4f       	sbci	r27, 0xFF	; 255
    11a2:	8c 91       	ld	r24, X
    11a4:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	8c 91       	ld	r24, X
    11aa:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    11ac:	d8 01       	movw	r26, r16
    11ae:	1b 96       	adiw	r26, 0x0b	; 11
    11b0:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    11b2:	69 2f       	mov	r22, r25
    11b4:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    11b6:	92 fd       	sbrc	r25, 2
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <nwkRxTaskHandler+0x318>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <nwkRxTaskHandler+0x31a>
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    11c2:	93 fd       	sbrc	r25, 3
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <nwkRxTaskHandler+0x324>
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <nwkRxTaskHandler+0x326>
    11ca:	90 e4       	ldi	r25, 0x40	; 64
    11cc:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    11ce:	4f 3f       	cpi	r20, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <nwkRxTaskHandler+0x332>
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <nwkRxTaskHandler+0x334>
    11d8:	96 2d       	mov	r25, r6
    11da:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    11dc:	d8 01       	movw	r26, r16
    11de:	19 96       	adiw	r26, 0x09	; 9
    11e0:	4d 91       	ld	r20, X+
    11e2:	5c 91       	ld	r21, X
    11e4:	1a 97       	sbiw	r26, 0x0a	; 10
    11e6:	24 17       	cp	r18, r20
    11e8:	35 07       	cpc	r19, r21
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <nwkRxTaskHandler+0x34a>
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <nwkRxTaskHandler+0x34c>
    11f0:	97 2d       	mov	r25, r7
    11f2:	89 2b       	or	r24, r25
    11f4:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    11f6:	d8 01       	movw	r26, r16
    11f8:	15 96       	adiw	r26, 0x05	; 5
    11fa:	2d 91       	ld	r18, X+
    11fc:	3c 91       	ld	r19, X
    11fe:	16 97       	sbiw	r26, 0x06	; 6
    1200:	2f 3f       	cpi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	11 f0       	breq	.+4      	; 0x120a <nwkRxTaskHandler+0x364>
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	01 c0       	rjmp	.+2      	; 0x120c <nwkRxTaskHandler+0x366>
    120a:	9a 2d       	mov	r25, r10
    120c:	89 2b       	or	r24, r25
    120e:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1210:	ce 01       	movw	r24, r28
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	19 95       	eicall
    1216:	01 c0       	rjmp	.+2      	; 0x121a <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1218:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    121a:	f8 01       	movw	r30, r16
    121c:	93 85       	ldd	r25, Z+11	; 0x0b
    121e:	90 ff       	sbrs	r25, 0
    ack = false;
    1220:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1222:	d8 01       	movw	r26, r16
    1224:	17 96       	adiw	r26, 0x07	; 7
    1226:	2d 91       	ld	r18, X+
    1228:	3c 91       	ld	r19, X
    122a:	18 97       	sbiw	r26, 0x08	; 8
    122c:	2f 3f       	cpi	r18, 0xFF	; 255
    122e:	3f 4f       	sbci	r19, 0xFF	; 255
    1230:	69 f4       	brne	.+26     	; 0x124c <nwkRxTaskHandler+0x3a6>
    1232:	f7 01       	movw	r30, r14
    1234:	40 81       	ld	r20, Z
    1236:	51 81       	ldd	r21, Z+1	; 0x01
    1238:	d8 01       	movw	r26, r16
    123a:	1f 96       	adiw	r26, 0x0f	; 15
    123c:	2d 91       	ld	r18, X+
    123e:	3c 91       	ld	r19, X
    1240:	50 97       	sbiw	r26, 0x10	; 16
    1242:	42 17       	cp	r20, r18
    1244:	53 07       	cpc	r21, r19
    1246:	11 f4       	brne	.+4      	; 0x124c <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1248:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    124a:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    124c:	f8 01       	movw	r30, r16
    124e:	25 81       	ldd	r18, Z+5	; 0x05
    1250:	36 81       	ldd	r19, Z+6	; 0x06
    1252:	2f 3f       	cpi	r18, 0xFF	; 255
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	a1 f1       	breq	.+104    	; 0x12c0 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1258:	d7 01       	movw	r26, r14
    125a:	2d 91       	ld	r18, X+
    125c:	3c 91       	ld	r19, X
    125e:	2f 3f       	cpi	r18, 0xFF	; 255
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    1262:	71 f1       	breq	.+92     	; 0x12c0 <nwkRxTaskHandler+0x41a>
    1264:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1266:	61 f1       	breq	.+88     	; 0x12c0 <nwkRxTaskHandler+0x41a>
    1268:	b5 db       	rcall	.-2198   	; 0x9d4 <nwkFrameAlloc>
    126a:	4c 01       	movw	r8, r24
    126c:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    126e:	41 f1       	breq	.+80     	; 0x12c0 <nwkRxTaskHandler+0x41a>
    1270:	19 dc       	rcall	.-1998   	; 0xaa4 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1272:	f4 01       	movw	r30, r8
    1274:	81 81       	ldd	r24, Z+1	; 0x01
    1276:	8d 5f       	subi	r24, 0xFD	; 253
    1278:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    127a:	e9 57       	subi	r30, 0x79	; 121
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	11 82       	std	Z+1, r1	; 0x01
    1280:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1282:	d8 01       	movw	r26, r16
    1284:	1b 96       	adiw	r26, 0x0b	; 11
    1286:	8c 91       	ld	r24, X
    1288:	1b 97       	sbiw	r26, 0x0b	; 11
    128a:	86 95       	lsr	r24
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	f4 01       	movw	r30, r8
    1290:	93 85       	ldd	r25, Z+11	; 0x0b
    1292:	80 fb       	bst	r24, 0
    1294:	91 f9       	bld	r25, 1
    1296:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1298:	1d 96       	adiw	r26, 0x0d	; 13
    129a:	8d 91       	ld	r24, X+
    129c:	9c 91       	ld	r25, X
    129e:	1e 97       	sbiw	r26, 0x0e	; 14
    12a0:	90 8b       	std	Z+16, r25	; 0x10
    12a2:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    12a4:	ef 57       	subi	r30, 0x7F	; 127
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	01 90       	ld	r0, Z+
    12aa:	f0 81       	ld	r31, Z
    12ac:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    12ae:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    12b0:	80 91 22 1f 	lds	r24, 0x1F22	; 0x801f22 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    12b4:	82 83       	std	Z+2, r24	; 0x02
    12b6:	1c 96       	adiw	r26, 0x0c	; 12
    12b8:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    12ba:	81 83       	std	Z+1, r24	; 0x01
    12bc:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    12be:	b0 d0       	rcall	.+352    	; 0x1420 <nwkTxFrame>
    12c0:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    12c2:	bc 92       	st	X, r11
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <nwkRxTaskHandler+0x42a>
    12c6:	c8 01       	movw	r24, r16
      } break;
    12c8:	43 dd       	rcall	.-1402   	; 0xd50 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <nwkRxTaskHandler+0x42a>
    12cc:	c8 01       	movw	r24, r16
    12ce:	bb db       	rcall	.-2186   	; 0xa46 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    12d0:	c8 01       	movw	r24, r16
    12d2:	c3 db       	rcall	.-2170   	; 0xa5a <nwkFrameNext>
    12d4:	8c 01       	movw	r16, r24
    12d6:	89 2b       	or	r24, r25
    12d8:	09 f0       	breq	.+2      	; 0x12dc <nwkRxTaskHandler+0x436>
    12da:	20 ce       	rjmp	.-960    	; 0xf1c <nwkRxTaskHandler+0x76>
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <nwkRxTaskHandler+0x446>
    12de:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    12e0:	87 81       	ldd	r24, Z+7	; 0x07
    12e2:	90 85       	ldd	r25, Z+8	; 0x08
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <nwkRxTaskHandler+0x444>
    12e8:	08 cf       	rjmp	.-496    	; 0x10fa <nwkRxTaskHandler+0x254>
    12ea:	f9 ce       	rjmp	.-526    	; 0x10de <nwkRxTaskHandler+0x238>
    12ec:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	7f 90       	pop	r7
    1312:	6f 90       	pop	r6
    1314:	5f 90       	pop	r5
    1316:	4f 90       	pop	r4
    1318:	3f 90       	pop	r3
    131a:	2f 90       	pop	r2
    131c:	08 95       	ret

0000131e <nwkTxDelayTimerHandler>:
    131e:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	7c 01       	movw	r14, r24
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	01 e0       	ldi	r16, 0x01	; 1
    1332:	c3 e1       	ldi	r28, 0x13	; 19
    1334:	13 c0       	rjmp	.+38     	; 0x135c <nwkTxDelayTimerHandler+0x3e>
    1336:	fc 01       	movw	r30, r24
    1338:	20 81       	ld	r18, Z
    133a:	21 31       	cpi	r18, 0x11	; 17
    133c:	79 f4       	brne	.+30     	; 0x135c <nwkTxDelayTimerHandler+0x3e>
    133e:	ec 57       	subi	r30, 0x7C	; 124
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	20 81       	ld	r18, Z
    1344:	31 81       	ldd	r19, Z+1	; 0x01
    1346:	21 50       	subi	r18, 0x01	; 1
    1348:	31 09       	sbc	r19, r1
    134a:	31 83       	std	Z+1, r19	; 0x01
    134c:	20 83       	st	Z, r18
    134e:	23 2b       	or	r18, r19
    1350:	21 f4       	brne	.+8      	; 0x135a <nwkTxDelayTimerHandler+0x3c>
    1352:	fc 01       	movw	r30, r24
    1354:	c0 83       	st	Z, r28
    1356:	10 2f       	mov	r17, r16
    1358:	01 c0       	rjmp	.+2      	; 0x135c <nwkTxDelayTimerHandler+0x3e>
    135a:	10 2f       	mov	r17, r16
    135c:	7e db       	rcall	.-2308   	; 0xa5a <nwkFrameNext>
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	51 f7       	brne	.-44     	; 0x1336 <nwkTxDelayTimerHandler+0x18>
    1362:	11 23       	and	r17, r17
    1364:	11 f0       	breq	.+4      	; 0x136a <nwkTxDelayTimerHandler+0x4c>
    1366:	c7 01       	movw	r24, r14
    1368:	61 d3       	rcall	.+1730   	; 0x1a2c <SYS_TimerStart>
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	08 95       	ret

00001376 <nwkTxAckWaitTimerHandler>:
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	7c 01       	movw	r14, r24
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 e0       	ldi	r16, 0x01	; 1
    138c:	d7 e1       	ldi	r29, 0x17	; 23
    138e:	c0 e1       	ldi	r28, 0x10	; 16
    1390:	16 c0       	rjmp	.+44     	; 0x13be <nwkTxAckWaitTimerHandler+0x48>
    1392:	fc 01       	movw	r30, r24
    1394:	20 81       	ld	r18, Z
    1396:	26 31       	cpi	r18, 0x16	; 22
    1398:	91 f4       	brne	.+36     	; 0x13be <nwkTxAckWaitTimerHandler+0x48>
    139a:	ec 57       	subi	r30, 0x7C	; 124
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	20 81       	ld	r18, Z
    13a0:	31 81       	ldd	r19, Z+1	; 0x01
    13a2:	21 50       	subi	r18, 0x01	; 1
    13a4:	31 09       	sbc	r19, r1
    13a6:	31 83       	std	Z+1, r19	; 0x01
    13a8:	20 83       	st	Z, r18
    13aa:	23 2b       	or	r18, r19
    13ac:	39 f4       	brne	.+14     	; 0x13bc <nwkTxAckWaitTimerHandler+0x46>
    13ae:	fc 01       	movw	r30, r24
    13b0:	d0 83       	st	Z, r29
    13b2:	ed 57       	subi	r30, 0x7D	; 125
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	c0 83       	st	Z, r28
    13b8:	10 2f       	mov	r17, r16
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <nwkTxAckWaitTimerHandler+0x48>
    13bc:	10 2f       	mov	r17, r16
    13be:	4d db       	rcall	.-2406   	; 0xa5a <nwkFrameNext>
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	39 f7       	brne	.-50     	; 0x1392 <nwkTxAckWaitTimerHandler+0x1c>
    13c4:	11 23       	and	r17, r17
    13c6:	11 f0       	breq	.+4      	; 0x13cc <nwkTxAckWaitTimerHandler+0x56>
    13c8:	c7 01       	movw	r24, r14
    13ca:	30 d3       	rcall	.+1632   	; 0x1a2c <SYS_TimerStart>
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	08 95       	ret

000013da <nwkTxInit>:
    13da:	10 92 70 1f 	sts	0x1F70, r1	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    13de:	10 92 6f 1f 	sts	0x1F6F, r1	; 0x801f6f <nwkTxPhyActiveFrame>
    13e2:	e2 e6       	ldi	r30, 0x62	; 98
    13e4:	ff e1       	ldi	r31, 0x1F	; 31
    13e6:	82 e3       	ldi	r24, 0x32	; 50
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	86 83       	std	Z+6, r24	; 0x06
    13f0:	97 83       	std	Z+7, r25	; 0x07
    13f2:	a0 87       	std	Z+8, r26	; 0x08
    13f4:	b1 87       	std	Z+9, r27	; 0x09
    13f6:	12 86       	std	Z+10, r1	; 0x0a
    13f8:	8b eb       	ldi	r24, 0xBB	; 187
    13fa:	99 e0       	ldi	r25, 0x09	; 9
    13fc:	94 87       	std	Z+12, r25	; 0x0c
    13fe:	83 87       	std	Z+11, r24	; 0x0b
    1400:	e5 e5       	ldi	r30, 0x55	; 85
    1402:	ff e1       	ldi	r31, 0x1F	; 31
    1404:	8a e0       	ldi	r24, 0x0A	; 10
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e0       	ldi	r26, 0x00	; 0
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	86 83       	std	Z+6, r24	; 0x06
    140e:	97 83       	std	Z+7, r25	; 0x07
    1410:	a0 87       	std	Z+8, r26	; 0x08
    1412:	b1 87       	std	Z+9, r27	; 0x09
    1414:	12 86       	std	Z+10, r1	; 0x0a
    1416:	8f e8       	ldi	r24, 0x8F	; 143
    1418:	99 e0       	ldi	r25, 0x09	; 9
    141a:	94 87       	std	Z+12, r25	; 0x0c
    141c:	83 87       	std	Z+11, r24	; 0x0b
    141e:	08 95       	ret

00001420 <nwkTxFrame>:
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	ec 01       	movw	r28, r24
    1426:	fc 01       	movw	r30, r24
    1428:	ea 57       	subi	r30, 0x7A	; 122
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	80 81       	ld	r24, Z
    142e:	81 ff       	sbrs	r24, 1
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <nwkTxFrame+0x18>
    1432:	92 e1       	ldi	r25, 0x12	; 18
    1434:	98 83       	st	Y, r25
    1436:	02 c0       	rjmp	.+4      	; 0x143c <nwkTxFrame+0x1c>
    1438:	92 e1       	ldi	r25, 0x12	; 18
    143a:	98 83       	st	Y, r25
    143c:	fe 01       	movw	r30, r28
    143e:	ed 57       	subi	r30, 0x7D	; 125
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	10 82       	st	Z, r1
    1444:	80 ff       	sbrs	r24, 0
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <nwkTxFrame+0x32>
    1448:	2f ef       	ldi	r18, 0xFF	; 255
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	3e 83       	std	Y+6, r19	; 0x06
    144e:	2d 83       	std	Y+5, r18	; 0x05
    1450:	06 c0       	rjmp	.+12     	; 0x145e <nwkTxFrame+0x3e>
    1452:	20 91 fa 1f 	lds	r18, 0x1FFA	; 0x801ffa <nwkIb+0x2>
    1456:	30 91 fb 1f 	lds	r19, 0x1FFB	; 0x801ffb <nwkIb+0x3>
    145a:	3e 83       	std	Y+6, r19	; 0x06
    145c:	2d 83       	std	Y+5, r18	; 0x05
    145e:	85 70       	andi	r24, 0x05	; 5
    1460:	19 f4       	brne	.+6      	; 0x1468 <nwkTxFrame+0x48>
    1462:	ce 01       	movw	r24, r28
    1464:	56 dc       	rcall	.-1876   	; 0xd12 <nwkRoutePrepareTx>
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <nwkTxFrame+0x50>
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	98 89       	ldd	r25, Y+16	; 0x10
    146c:	98 87       	std	Y+8, r25	; 0x08
    146e:	8f 83       	std	Y+7, r24	; 0x07
    1470:	e8 ef       	ldi	r30, 0xF8	; 248
    1472:	ff e1       	ldi	r31, 0x1F	; 31
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	9a 87       	std	Y+10, r25	; 0x0a
    147a:	89 87       	std	Y+9, r24	; 0x09
    147c:	85 81       	ldd	r24, Z+5	; 0x05
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	85 83       	std	Z+5, r24	; 0x05
    1482:	8c 83       	std	Y+4, r24	; 0x04
    1484:	8f 81       	ldd	r24, Y+7	; 0x07
    1486:	98 85       	ldd	r25, Y+8	; 0x08
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	69 f4       	brne	.+26     	; 0x14a6 <nwkTxFrame+0x86>
    148c:	81 e4       	ldi	r24, 0x41	; 65
    148e:	98 e8       	ldi	r25, 0x88	; 136
    1490:	9b 83       	std	Y+3, r25	; 0x03
    1492:	8a 83       	std	Y+2, r24	; 0x02
    1494:	aa d3       	rcall	.+1876   	; 0x1bea <rand>
    1496:	cc 57       	subi	r28, 0x7C	; 124
    1498:	df 4f       	sbci	r29, 0xFF	; 255
    149a:	87 70       	andi	r24, 0x07	; 7
    149c:	99 27       	eor	r25, r25
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	99 83       	std	Y+1, r25	; 0x01
    14a2:	88 83       	st	Y, r24
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <nwkTxFrame+0x96>
    14a6:	81 e6       	ldi	r24, 0x61	; 97
    14a8:	98 e8       	ldi	r25, 0x88	; 136
    14aa:	9b 83       	std	Y+3, r25	; 0x03
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	cc 57       	subi	r28, 0x7C	; 124
    14b0:	df 4f       	sbci	r29, 0xFF	; 255
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	18 82       	st	Y, r1
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <nwkTxBroadcastFrame>:
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	8c 01       	movw	r16, r24
    14c6:	86 da       	rcall	.-2804   	; 0x9d4 <nwkFrameAlloc>
    14c8:	ec 01       	movw	r28, r24
    14ca:	89 2b       	or	r24, r25
    14cc:	a9 f1       	breq	.+106    	; 0x1538 <nwkTxBroadcastFrame+0x7c>
    14ce:	82 e1       	ldi	r24, 0x12	; 18
    14d0:	88 83       	st	Y, r24
    14d2:	f8 01       	movw	r30, r16
    14d4:	81 81       	ldd	r24, Z+1	; 0x01
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	fe 01       	movw	r30, r28
    14da:	ed 57       	subi	r30, 0x7D	; 125
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	10 82       	st	Z, r1
    14e0:	84 d3       	rcall	.+1800   	; 0x1bea <rand>
    14e2:	fe 01       	movw	r30, r28
    14e4:	ec 57       	subi	r30, 0x7C	; 124
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	87 70       	andi	r24, 0x07	; 7
    14ea:	99 27       	eor	r25, r25
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	33 96       	adiw	r30, 0x03	; 3
    14f4:	11 82       	std	Z+1, r1	; 0x01
    14f6:	10 82       	st	Z, r1
    14f8:	f8 01       	movw	r30, r16
    14fa:	41 81       	ldd	r20, Z+1	; 0x01
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	b8 01       	movw	r22, r16
    1500:	6e 5f       	subi	r22, 0xFE	; 254
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	ce 01       	movw	r24, r28
    1506:	02 96       	adiw	r24, 0x02	; 2
    1508:	7e d3       	rcall	.+1788   	; 0x1c06 <memcpy>
    150a:	81 e4       	ldi	r24, 0x41	; 65
    150c:	98 e8       	ldi	r25, 0x88	; 136
    150e:	9b 83       	std	Y+3, r25	; 0x03
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	9f ef       	ldi	r25, 0xFF	; 255
    1516:	98 87       	std	Y+8, r25	; 0x08
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	f8 01       	movw	r30, r16
    151c:	85 81       	ldd	r24, Z+5	; 0x05
    151e:	96 81       	ldd	r25, Z+6	; 0x06
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	e8 ef       	ldi	r30, 0xF8	; 248
    1526:	ff e1       	ldi	r31, 0x1F	; 31
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	9a 87       	std	Y+10, r25	; 0x0a
    152e:	89 87       	std	Y+9, r24	; 0x09
    1530:	85 81       	ldd	r24, Z+5	; 0x05
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	85 83       	std	Z+5, r24	; 0x05
    1536:	8c 83       	std	Y+4, r24	; 0x04
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1542:	e0 91 6f 1f 	lds	r30, 0x1F6F	; 0x801f6f <nwkTxPhyActiveFrame>
    1546:	f0 91 70 1f 	lds	r31, 0x1F70	; 0x801f70 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	21 f0       	breq	.+8      	; 0x1556 <PHY_DataConf+0x14>
    154e:	48 f0       	brcs	.+18     	; 0x1562 <PHY_DataConf+0x20>
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	19 f0       	breq	.+6      	; 0x155a <PHY_DataConf+0x18>
    1554:	04 c0       	rjmp	.+8      	; 0x155e <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1556:	80 e2       	ldi	r24, 0x20	; 32
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    155a:	81 e2       	ldi	r24, 0x21	; 33
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1562:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1564:	df 01       	movw	r26, r30
    1566:	ad 57       	subi	r26, 0x7D	; 125
    1568:	bf 4f       	sbci	r27, 0xFF	; 255
    156a:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    156c:	85 e1       	ldi	r24, 0x15	; 21
    156e:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1570:	10 92 70 1f 	sts	0x1F70, r1	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    1574:	10 92 6f 1f 	sts	0x1F6F, r1	; 0x801f6f <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1578:	e8 ef       	ldi	r30, 0xF8	; 248
    157a:	ff e1       	ldi	r31, 0x1F	; 31
    157c:	86 a1       	ldd	r24, Z+38	; 0x26
    157e:	97 a1       	ldd	r25, Z+39	; 0x27
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	97 a3       	std	Z+39, r25	; 0x27
    1584:	86 a3       	std	Z+38, r24	; 0x26
    1586:	08 95       	ret

00001588 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    159e:	c0 e0       	ldi	r28, 0x00	; 0
    15a0:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15a2:	0f 2e       	mov	r0, r31
    15a4:	f4 e1       	ldi	r31, 0x14	; 20
    15a6:	af 2e       	mov	r10, r31
    15a8:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    15aa:	08 ef       	ldi	r16, 0xF8	; 248
    15ac:	1f e1       	ldi	r17, 0x1F	; 31
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f7 e1       	ldi	r31, 0x17	; 23
    15b2:	df 2e       	mov	r13, r31
    15b4:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15b6:	0f 2e       	mov	r0, r31
    15b8:	f6 e1       	ldi	r31, 0x16	; 22
    15ba:	9f 2e       	mov	r9, r31
    15bc:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15be:	0f 2e       	mov	r0, r31
    15c0:	f9 e2       	ldi	r31, 0x29	; 41
    15c2:	ef 2e       	mov	r14, r31
    15c4:	f1 2c       	mov	r15, r1
    15c6:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15c8:	0f 2e       	mov	r0, r31
    15ca:	f3 e1       	ldi	r31, 0x13	; 19
    15cc:	cf 2e       	mov	r12, r31
    15ce:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15d0:	0f 2e       	mov	r0, r31
    15d2:	f1 e1       	ldi	r31, 0x11	; 17
    15d4:	bf 2e       	mov	r11, r31
    15d6:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    15d8:	60 c0       	rjmp	.+192    	; 0x169a <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    15da:	88 81       	ld	r24, Y
    15dc:	83 31       	cpi	r24, 0x13	; 19
    15de:	c1 f0       	breq	.+48     	; 0x1610 <nwkTxTaskHandler+0x88>
    15e0:	18 f4       	brcc	.+6      	; 0x15e8 <nwkTxTaskHandler+0x60>
    15e2:	82 31       	cpi	r24, 0x12	; 18
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <nwkTxTaskHandler+0x6c>
    15e6:	59 c0       	rjmp	.+178    	; 0x169a <nwkTxTaskHandler+0x112>
    15e8:	85 31       	cpi	r24, 0x15	; 21
    15ea:	49 f1       	breq	.+82     	; 0x163e <nwkTxTaskHandler+0xb6>
    15ec:	87 31       	cpi	r24, 0x17	; 23
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <nwkTxTaskHandler+0x6a>
    15f0:	45 c0       	rjmp	.+138    	; 0x167c <nwkTxTaskHandler+0xf4>
    15f2:	53 c0       	rjmp	.+166    	; 0x169a <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    15f4:	fe 01       	movw	r30, r28
    15f6:	ec 57       	subi	r30, 0x7C	; 124
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	89 2b       	or	r24, r25
    1600:	29 f0       	breq	.+10     	; 0x160c <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1602:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1604:	85 e5       	ldi	r24, 0x55	; 85
    1606:	9f e1       	ldi	r25, 0x1F	; 31
    1608:	11 d2       	rcall	.+1058   	; 0x1a2c <SYS_TimerStart>
    160a:	47 c0       	rjmp	.+142    	; 0x169a <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    160c:	c8 82       	st	Y, r12
    160e:	45 c0       	rjmp	.+138    	; 0x169a <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1610:	80 91 6f 1f 	lds	r24, 0x1F6F	; 0x801f6f <nwkTxPhyActiveFrame>
    1614:	90 91 70 1f 	lds	r25, 0x1F70	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    1618:	89 2b       	or	r24, r25
    161a:	09 f0       	breq	.+2      	; 0x161e <nwkTxTaskHandler+0x96>
    161c:	3e c0       	rjmp	.+124    	; 0x169a <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    161e:	d0 93 70 1f 	sts	0x1F70, r29	; 0x801f70 <nwkTxPhyActiveFrame+0x1>
    1622:	c0 93 6f 1f 	sts	0x1F6F, r28	; 0x801f6f <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1626:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1628:	69 81       	ldd	r22, Y+1	; 0x01
    162a:	ce 01       	movw	r24, r28
    162c:	02 96       	adiw	r24, 0x02	; 2
    162e:	cb d0       	rcall	.+406    	; 0x17c6 <PHY_DataReq>
          nwkIb.lock++;
    1630:	f8 01       	movw	r30, r16
    1632:	86 a1       	ldd	r24, Z+38	; 0x26
    1634:	97 a1       	ldd	r25, Z+39	; 0x27
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	97 a3       	std	Z+39, r25	; 0x27
    163a:	86 a3       	std	Z+38, r24	; 0x26
    163c:	2e c0       	rjmp	.+92     	; 0x169a <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    163e:	fe 01       	movw	r30, r28
    1640:	ed 57       	subi	r30, 0x7D	; 125
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	80 81       	ld	r24, Z
    1646:	81 11       	cpse	r24, r1
    1648:	17 c0       	rjmp	.+46     	; 0x1678 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    164a:	2d 85       	ldd	r18, Y+13	; 0x0d
    164c:	3e 85       	ldd	r19, Y+14	; 0x0e
    164e:	f8 01       	movw	r30, r16
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	28 17       	cp	r18, r24
    1656:	39 07       	cpc	r19, r25
    1658:	69 f4       	brne	.+26     	; 0x1674 <nwkTxTaskHandler+0xec>
    165a:	8b 85       	ldd	r24, Y+11	; 0x0b
    165c:	80 ff       	sbrs	r24, 0
    165e:	0a c0       	rjmp	.+20     	; 0x1674 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1660:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1662:	fe 01       	movw	r30, r28
    1664:	ec 57       	subi	r30, 0x7C	; 124
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	f1 82       	std	Z+1, r15	; 0x01
    166a:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    166c:	82 e6       	ldi	r24, 0x62	; 98
    166e:	9f e1       	ldi	r25, 0x1F	; 31
    1670:	dd d1       	rcall	.+954    	; 0x1a2c <SYS_TimerStart>
    1672:	13 c0       	rjmp	.+38     	; 0x169a <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1674:	d8 82       	st	Y, r13
    1676:	11 c0       	rjmp	.+34     	; 0x169a <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1678:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    167a:	0f c0       	rjmp	.+30     	; 0x169a <nwkTxTaskHandler+0x112>
    167c:	ce 01       	movw	r24, r28
    167e:	02 db       	rcall	.-2556   	; 0xc84 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1680:	fe 01       	movw	r30, r28
    1682:	e9 57       	subi	r30, 0x79	; 121
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	01 90       	ld	r0, Z+
    1688:	f0 81       	ld	r31, Z
    168a:	e0 2d       	mov	r30, r0
    168c:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    168e:	19 f4       	brne	.+6      	; 0x1696 <nwkTxTaskHandler+0x10e>
    1690:	ce 01       	movw	r24, r28
    1692:	d9 d9       	rcall	.-3150   	; 0xa46 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1694:	02 c0       	rjmp	.+4      	; 0x169a <nwkTxTaskHandler+0x112>
    1696:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1698:	19 95       	eicall
    169a:	ce 01       	movw	r24, r28
    169c:	de d9       	rcall	.-3140   	; 0xa5a <nwkFrameNext>
    169e:	ec 01       	movw	r28, r24
    16a0:	89 2b       	or	r24, r25
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <nwkTxTaskHandler+0x11e>
    16a4:	9a cf       	rjmp	.-204    	; 0x15da <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	bf 90       	pop	r11
    16b8:	af 90       	pop	r10
    16ba:	9f 90       	pop	r9
    16bc:	08 95       	ret

000016be <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    16be:	80 91 71 1f 	lds	r24, 0x1F71	; 0x801f71 <phyBand>
    16c2:	98 2f       	mov	r25, r24
    16c4:	9f 70       	andi	r25, 0x0F	; 15
    16c6:	e4 e5       	ldi	r30, 0x54	; 84
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	80 81       	ld	r24, Z
    16cc:	80 7f       	andi	r24, 0xF0	; 240
    16ce:	89 2b       	or	r24, r25
    16d0:	80 83       	st	Z, r24
    16d2:	80 91 71 1f 	lds	r24, 0x1F71	; 0x801f71 <phyBand>
    16d6:	88 23       	and	r24, r24
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <phySetChannel+0x26>
    16da:	80 91 72 1f 	lds	r24, 0x1F72	; 0x801f72 <phyChannel>
    16de:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    16e2:	08 95       	ret
    16e4:	80 91 72 1f 	lds	r24, 0x1F72	; 0x801f72 <phyChannel>
    16e8:	98 2f       	mov	r25, r24
    16ea:	9f 71       	andi	r25, 0x1F	; 31
    16ec:	e8 e4       	ldi	r30, 0x48	; 72
    16ee:	f1 e0       	ldi	r31, 0x01	; 1
    16f0:	80 81       	ld	r24, Z
    16f2:	80 7e       	andi	r24, 0xE0	; 224
    16f4:	89 2b       	or	r24, r25
    16f6:	80 83       	st	Z, r24
    16f8:	08 95       	ret

000016fa <phyTrxSetState>:
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1700:	e1 e4       	ldi	r30, 0x41	; 65
    1702:	f1 e0       	ldi	r31, 0x01	; 1
    1704:	90 81       	ld	r25, Z
    1706:	9f 71       	andi	r25, 0x1F	; 31
    1708:	98 30       	cpi	r25, 0x08	; 8
    170a:	e1 f7       	brne	.-8      	; 0x1704 <phyTrxSetState+0xa>
    170c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1710:	e1 e4       	ldi	r30, 0x41	; 65
    1712:	f1 e0       	ldi	r31, 0x01	; 1
    1714:	90 81       	ld	r25, Z
    1716:	9f 71       	andi	r25, 0x1F	; 31
    1718:	89 13       	cpse	r24, r25
    171a:	fc cf       	rjmp	.-8      	; 0x1714 <phyTrxSetState+0x1a>
    171c:	08 95       	ret

0000171e <phySetRxState>:
    171e:	88 e0       	ldi	r24, 0x08	; 8
    1720:	ec df       	rcall	.-40     	; 0x16fa <phyTrxSetState>
    1722:	8f ef       	ldi	r24, 0xFF	; 255
    1724:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1728:	80 91 73 1f 	lds	r24, 0x1F73	; 0x801f73 <phyRxState>
    172c:	88 23       	and	r24, r24
    172e:	11 f0       	breq	.+4      	; 0x1734 <phySetRxState+0x16>
    1730:	86 e1       	ldi	r24, 0x16	; 22
    1732:	e3 cf       	rjmp	.-58     	; 0x16fa <phyTrxSetState>
    1734:	08 95       	ret

00001736 <PHY_Init>:
    1736:	e9 e3       	ldi	r30, 0x39	; 57
    1738:	f1 e0       	ldi	r31, 0x01	; 1
    173a:	80 81       	ld	r24, Z
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	80 83       	st	Z, r24
    1740:	10 92 73 1f 	sts	0x1F73, r1	; 0x801f73 <phyRxState>
    1744:	10 92 71 1f 	sts	0x1F71, r1	; 0x801f71 <phyBand>
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <phyState>
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	d4 df       	rcall	.-88     	; 0x16fa <phyTrxSetState>
    1752:	8b ee       	ldi	r24, 0xEB	; 235
    1754:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    1758:	ec e4       	ldi	r30, 0x4C	; 76
    175a:	f1 e0       	ldi	r31, 0x01	; 1
    175c:	80 81       	ld	r24, Z
    175e:	80 68       	ori	r24, 0x80	; 128
    1760:	80 83       	st	Z, r24
    1762:	08 95       	ret

00001764 <PHY_SetRxState>:
    1764:	80 93 73 1f 	sts	0x1F73, r24	; 0x801f73 <phyRxState>
    1768:	da cf       	rjmp	.-76     	; 0x171e <phySetRxState>
    176a:	08 95       	ret

0000176c <PHY_SetChannel>:
    176c:	80 93 72 1f 	sts	0x1F72, r24	; 0x801f72 <phyChannel>
    1770:	a6 cf       	rjmp	.-180    	; 0x16be <phySetChannel>
    1772:	08 95       	ret

00001774 <PHY_SetPanId>:
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	1f 92       	push	r1
    177a:	1f 92       	push	r1
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <PHY_SetShortAddr>:
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	1f 92       	push	r1
    179e:	1f 92       	push	r1
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    17b2:	99 81       	ldd	r25, Y+1	; 0x01
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	89 0f       	add	r24, r25
    17b8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	18 2f       	mov	r17, r24
    17ce:	d9 2f       	mov	r29, r25
    17d0:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    17d2:	89 e1       	ldi	r24, 0x19	; 25
    17d4:	92 df       	rcall	.-220    	; 0x16fa <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	8c 0f       	add	r24, r28
    17e0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    17e4:	cc 23       	and	r28, r28
    17e6:	71 f0       	breq	.+28     	; 0x1804 <PHY_DataReq+0x3e>
    17e8:	a1 2f       	mov	r26, r17
    17ea:	bd 2f       	mov	r27, r29
    17ec:	c1 50       	subi	r28, 0x01	; 1
    17ee:	6c 2f       	mov	r22, r28
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	6e 57       	subi	r22, 0x7E	; 126
    17f4:	7e 4f       	sbci	r23, 0xFE	; 254
    17f6:	e1 e8       	ldi	r30, 0x81	; 129
    17f8:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    17fa:	8d 91       	ld	r24, X+
    17fc:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    17fe:	e6 17       	cp	r30, r22
    1800:	f7 07       	cpc	r31, r23
    1802:	d9 f7       	brne	.-10     	; 0x17fa <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	08 95       	ret

00001818 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	00 d0       	rcall	.+0      	; 0x1820 <PHY_TaskHandler+0x8>
    1820:	1f 92       	push	r1
    1822:	1f 92       	push	r1
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1828:	80 91 f4 1f 	lds	r24, 0x1FF4	; 0x801ff4 <phyState>
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	09 f4       	brne	.+2      	; 0x1832 <PHY_TaskHandler+0x1a>
    1830:	65 c0       	rjmp	.+202    	; 0x18fc <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1832:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1836:	83 ff       	sbrs	r24, 3
    1838:	3e c0       	rjmp	.+124    	; 0x18b6 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    183a:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    183e:	6a 2f       	mov	r22, r26
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	ab 01       	movw	r20, r22
    1844:	4f 5f       	subi	r20, 0xFF	; 255
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    184e:	fc 01       	movw	r30, r24
    1850:	e0 58       	subi	r30, 0x80	; 128
    1852:	fe 4f       	sbci	r31, 0xFE	; 254
    1854:	30 81       	ld	r19, Z
    1856:	fc 01       	movw	r30, r24
    1858:	ec 58       	subi	r30, 0x8C	; 140
    185a:	f0 4e       	sbci	r31, 0xE0	; 224
    185c:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	82 2f       	mov	r24, r18
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	84 17       	cp	r24, r20
    1866:	95 07       	cpc	r25, r21
    1868:	94 f3       	brlt	.-28     	; 0x184e <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    186a:	84 e7       	ldi	r24, 0x74	; 116
    186c:	9f e1       	ldi	r25, 0x1F	; 31
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1872:	a2 50       	subi	r26, 0x02	; 2
    1874:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1876:	fb 01       	movw	r30, r22
    1878:	ec 58       	subi	r30, 0x8C	; 140
    187a:	f0 4e       	sbci	r31, 0xE0	; 224
    187c:	80 81       	ld	r24, Z
    187e:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1880:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1884:	8a 55       	subi	r24, 0x5A	; 90
    1886:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	e2 da       	rcall	.-2620   	; 0xe52 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    188e:	e1 e4       	ldi	r30, 0x41	; 65
    1890:	f1 e0       	ldi	r31, 0x01	; 1
    1892:	80 81       	ld	r24, Z
    1894:	8f 71       	andi	r24, 0x1F	; 31
    1896:	86 31       	cpi	r24, 0x16	; 22
    1898:	e1 f7       	brne	.-8      	; 0x1892 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    189a:	ef e4       	ldi	r30, 0x4F	; 79
    189c:	f1 e0       	ldi	r31, 0x01	; 1
    189e:	80 81       	ld	r24, Z
    18a0:	88 60       	ori	r24, 0x08	; 8
    18a2:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    18a4:	ec e4       	ldi	r30, 0x4C	; 76
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 77       	andi	r24, 0x7F	; 127
    18ac:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    18ae:	80 81       	ld	r24, Z
    18b0:	80 68       	ori	r24, 0x80	; 128
    18b2:	80 83       	st	Z, r24
    18b4:	23 c0       	rjmp	.+70     	; 0x18fc <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    18b6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    18ba:	86 ff       	sbrs	r24, 6
    18bc:	1f c0       	rjmp	.+62     	; 0x18fc <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    18be:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    18c2:	8f 71       	andi	r24, 0x1F	; 31
    18c4:	89 31       	cpi	r24, 0x19	; 25
    18c6:	a9 f4       	brne	.+42     	; 0x18f2 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    18c8:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18cc:	12 95       	swap	r17
    18ce:	16 95       	lsr	r17
    18d0:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    18d2:	49 f0       	breq	.+18     	; 0x18e6 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    18d4:	13 30       	cpi	r17, 0x03	; 3
    18d6:	21 f0       	breq	.+8      	; 0x18e0 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    18d8:	15 30       	cpi	r17, 0x05	; 5
    18da:	21 f0       	breq	.+8      	; 0x18e4 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    18dc:	13 e0       	ldi	r17, 0x03	; 3
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    18e0:	11 e0       	ldi	r17, 0x01	; 1
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    18e4:	12 e0       	ldi	r17, 0x02	; 2
    18e6:	1b df       	rcall	.-458    	; 0x171e <phySetRxState>
      phyState = PHY_STATE_IDLE;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <phyState>

      PHY_DataConf(status);
    18ee:	81 2f       	mov	r24, r17
    18f0:	28 de       	rcall	.-944    	; 0x1542 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    18f2:	ef e4       	ldi	r30, 0x4F	; 79
    18f4:	f1 e0       	ldi	r31, 0x01	; 1
    18f6:	80 81       	ld	r24, Z
    18f8:	80 64       	ori	r24, 0x40	; 64
    18fa:	80 83       	st	Z, r24
  }
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	08 95       	ret

0000190e <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    190e:	0e 94 37 02 	call	0x46e	; 0x46e <HAL_Init>
  SYS_TimerInit();
    1912:	6d d0       	rcall	.+218    	; 0x19ee <SYS_TimerInit>
  PHY_Init();
    1914:	10 df       	rcall	.-480    	; 0x1736 <PHY_Init>
    1916:	0c 94 c0 03 	jmp	0x780	; 0x780 <NWK_Init>
  NWK_Init();
    191a:	08 95       	ret

0000191c <SYS_TaskHandler>:
    191c:	7d df       	rcall	.-262    	; 0x1818 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    191e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1922:	8f c0       	rjmp	.+286    	; 0x1a42 <SYS_TimerTaskHandler>
    1924:	08 95       	ret

00001926 <placeTimer>:
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	ec 01       	movw	r28, r24
    1930:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <timers>
    1934:	90 91 f6 1f 	lds	r25, 0x1FF6	; 0x801ff6 <timers+0x1>
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	09 f4       	brne	.+2      	; 0x193e <placeTimer+0x18>
    193c:	45 c0       	rjmp	.+138    	; 0x19c8 <placeTimer+0xa2>
    193e:	4e 81       	ldd	r20, Y+6	; 0x06
    1940:	5f 81       	ldd	r21, Y+7	; 0x07
    1942:	68 85       	ldd	r22, Y+8	; 0x08
    1944:	79 85       	ldd	r23, Y+9	; 0x09
    1946:	fc 01       	movw	r30, r24
    1948:	02 81       	ldd	r16, Z+2	; 0x02
    194a:	13 81       	ldd	r17, Z+3	; 0x03
    194c:	24 81       	ldd	r18, Z+4	; 0x04
    194e:	35 81       	ldd	r19, Z+5	; 0x05
    1950:	40 17       	cp	r20, r16
    1952:	51 07       	cpc	r21, r17
    1954:	62 07       	cpc	r22, r18
    1956:	73 07       	cpc	r23, r19
    1958:	60 f0       	brcs	.+24     	; 0x1972 <placeTimer+0x4c>
    195a:	dc 01       	movw	r26, r24
    195c:	17 c0       	rjmp	.+46     	; 0x198c <placeTimer+0x66>
    195e:	02 81       	ldd	r16, Z+2	; 0x02
    1960:	13 81       	ldd	r17, Z+3	; 0x03
    1962:	24 81       	ldd	r18, Z+4	; 0x04
    1964:	35 81       	ldd	r19, Z+5	; 0x05
    1966:	40 17       	cp	r20, r16
    1968:	51 07       	cpc	r21, r17
    196a:	62 07       	cpc	r22, r18
    196c:	73 07       	cpc	r23, r19
    196e:	68 f4       	brcc	.+26     	; 0x198a <placeTimer+0x64>
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <placeTimer+0x52>
    1972:	fc 01       	movw	r30, r24
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	04 1b       	sub	r16, r20
    197a:	15 0b       	sbc	r17, r21
    197c:	26 0b       	sbc	r18, r22
    197e:	37 0b       	sbc	r19, r23
    1980:	02 83       	std	Z+2, r16	; 0x02
    1982:	13 83       	std	Z+3, r17	; 0x03
    1984:	24 83       	std	Z+4, r18	; 0x04
    1986:	35 83       	std	Z+5, r19	; 0x05
    1988:	0a c0       	rjmp	.+20     	; 0x199e <placeTimer+0x78>
    198a:	df 01       	movw	r26, r30
    198c:	40 1b       	sub	r20, r16
    198e:	51 0b       	sbc	r21, r17
    1990:	62 0b       	sbc	r22, r18
    1992:	73 0b       	sbc	r23, r19
    1994:	ed 91       	ld	r30, X+
    1996:	fc 91       	ld	r31, X
    1998:	11 97       	sbiw	r26, 0x01	; 1
    199a:	30 97       	sbiw	r30, 0x00	; 0
    199c:	01 f7       	brne	.-64     	; 0x195e <placeTimer+0x38>
    199e:	4a 83       	std	Y+2, r20	; 0x02
    19a0:	5b 83       	std	Y+3, r21	; 0x03
    19a2:	6c 83       	std	Y+4, r22	; 0x04
    19a4:	7d 83       	std	Y+5, r23	; 0x05
    19a6:	10 97       	sbiw	r26, 0x00	; 0
    19a8:	41 f0       	breq	.+16     	; 0x19ba <placeTimer+0x94>
    19aa:	8d 91       	ld	r24, X+
    19ac:	9c 91       	ld	r25, X
    19ae:	11 97       	sbiw	r26, 0x01	; 1
    19b0:	99 83       	std	Y+1, r25	; 0x01
    19b2:	88 83       	st	Y, r24
    19b4:	cd 93       	st	X+, r28
    19b6:	dc 93       	st	X, r29
    19b8:	15 c0       	rjmp	.+42     	; 0x19e4 <placeTimer+0xbe>
    19ba:	99 83       	std	Y+1, r25	; 0x01
    19bc:	88 83       	st	Y, r24
    19be:	d0 93 f6 1f 	sts	0x1FF6, r29	; 0x801ff6 <timers+0x1>
    19c2:	c0 93 f5 1f 	sts	0x1FF5, r28	; 0x801ff5 <timers>
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <placeTimer+0xbe>
    19c8:	19 82       	std	Y+1, r1	; 0x01
    19ca:	18 82       	st	Y, r1
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	a8 85       	ldd	r26, Y+8	; 0x08
    19d2:	b9 85       	ldd	r27, Y+9	; 0x09
    19d4:	8a 83       	std	Y+2, r24	; 0x02
    19d6:	9b 83       	std	Y+3, r25	; 0x03
    19d8:	ac 83       	std	Y+4, r26	; 0x04
    19da:	bd 83       	std	Y+5, r27	; 0x05
    19dc:	d0 93 f6 1f 	sts	0x1FF6, r29	; 0x801ff6 <timers+0x1>
    19e0:	c0 93 f5 1f 	sts	0x1FF5, r28	; 0x801ff5 <timers>
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	08 95       	ret

000019ee <SYS_TimerInit>:
    19ee:	10 92 f6 1f 	sts	0x1FF6, r1	; 0x801ff6 <timers+0x1>
    19f2:	10 92 f5 1f 	sts	0x1FF5, r1	; 0x801ff5 <timers>
    19f6:	08 95       	ret

000019f8 <SYS_TimerStarted>:
    19f8:	e0 91 f5 1f 	lds	r30, 0x1FF5	; 0x801ff5 <timers>
    19fc:	f0 91 f6 1f 	lds	r31, 0x1FF6	; 0x801ff6 <timers+0x1>
    1a00:	30 97       	sbiw	r30, 0x00	; 0
    1a02:	71 f0       	breq	.+28     	; 0x1a20 <SYS_TimerStarted+0x28>
    1a04:	e8 17       	cp	r30, r24
    1a06:	f9 07       	cpc	r31, r25
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <SYS_TimerStarted+0x1a>
    1a0a:	0c c0       	rjmp	.+24     	; 0x1a24 <SYS_TimerStarted+0x2c>
    1a0c:	8e 17       	cp	r24, r30
    1a0e:	9f 07       	cpc	r25, r31
    1a10:	59 f0       	breq	.+22     	; 0x1a28 <SYS_TimerStarted+0x30>
    1a12:	01 90       	ld	r0, Z+
    1a14:	f0 81       	ld	r31, Z
    1a16:	e0 2d       	mov	r30, r0
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	c1 f7       	brne	.-16     	; 0x1a0c <SYS_TimerStarted+0x14>
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	08 95       	ret
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	08 95       	ret
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	08 95       	ret
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	08 95       	ret

00001a2c <SYS_TimerStart>:
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	ec 01       	movw	r28, r24
    1a32:	e2 df       	rcall	.-60     	; 0x19f8 <SYS_TimerStarted>
    1a34:	81 11       	cpse	r24, r1
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <SYS_TimerStart+0x10>
    1a38:	ce 01       	movw	r24, r28
    1a3a:	75 df       	rcall	.-278    	; 0x1926 <placeTimer>
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <SYS_TimerTaskHandler>:
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <halTimerIrqCount>
    1a52:	88 23       	and	r24, r24
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <SYS_TimerTaskHandler+0x16>
    1a56:	59 c0       	rjmp	.+178    	; 0x1b0a <SYS_TimerTaskHandler+0xc8>
    1a58:	8f b7       	in	r24, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	c0 90 f7 1f 	lds	r12, 0x1FF7	; 0x801ff7 <halTimerIrqCount>
    1a60:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <halTimerIrqCount>
    1a64:	8f bf       	out	0x3f, r24	; 63
    1a66:	d1 2c       	mov	r13, r1
    1a68:	e1 2c       	mov	r14, r1
    1a6a:	f1 2c       	mov	r15, r1
    1a6c:	cc 0c       	add	r12, r12
    1a6e:	dd 1c       	adc	r13, r13
    1a70:	ee 1c       	adc	r14, r14
    1a72:	ff 1c       	adc	r15, r15
    1a74:	d7 01       	movw	r26, r14
    1a76:	c6 01       	movw	r24, r12
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	aa 1f       	adc	r26, r26
    1a7e:	bb 1f       	adc	r27, r27
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	aa 1f       	adc	r26, r26
    1a86:	bb 1f       	adc	r27, r27
    1a88:	c8 0e       	add	r12, r24
    1a8a:	d9 1e       	adc	r13, r25
    1a8c:	ea 1e       	adc	r14, r26
    1a8e:	fb 1e       	adc	r15, r27
    1a90:	c0 91 f5 1f 	lds	r28, 0x1FF5	; 0x801ff5 <timers>
    1a94:	d0 91 f6 1f 	lds	r29, 0x1FF6	; 0x801ff6 <timers+0x1>
    1a98:	20 97       	sbiw	r28, 0x00	; 0
    1a9a:	b9 f1       	breq	.+110    	; 0x1b0a <SYS_TimerTaskHandler+0xc8>
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa0:	ac 81       	ldd	r26, Y+4	; 0x04
    1aa2:	bd 81       	ldd	r27, Y+5	; 0x05
    1aa4:	c8 16       	cp	r12, r24
    1aa6:	d9 06       	cpc	r13, r25
    1aa8:	ea 06       	cpc	r14, r26
    1aaa:	fb 06       	cpc	r15, r27
    1aac:	10 f1       	brcs	.+68     	; 0x1af2 <SYS_TimerTaskHandler+0xb0>
    1aae:	c8 1a       	sub	r12, r24
    1ab0:	d9 0a       	sbc	r13, r25
    1ab2:	ea 0a       	sbc	r14, r26
    1ab4:	fb 0a       	sbc	r15, r27
    1ab6:	88 81       	ld	r24, Y
    1ab8:	99 81       	ldd	r25, Y+1	; 0x01
    1aba:	90 93 f6 1f 	sts	0x1FF6, r25	; 0x801ff6 <timers+0x1>
    1abe:	80 93 f5 1f 	sts	0x1FF5, r24	; 0x801ff5 <timers>
    1ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	11 f4       	brne	.+4      	; 0x1acc <SYS_TimerTaskHandler+0x8a>
    1ac8:	ce 01       	movw	r24, r28
    1aca:	2d df       	rcall	.-422    	; 0x1926 <placeTimer>
    1acc:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ace:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	19 95       	eicall
    1ad4:	c0 91 f5 1f 	lds	r28, 0x1FF5	; 0x801ff5 <timers>
    1ad8:	d0 91 f6 1f 	lds	r29, 0x1FF6	; 0x801ff6 <timers+0x1>
    1adc:	20 97       	sbiw	r28, 0x00	; 0
    1ade:	a9 f0       	breq	.+42     	; 0x1b0a <SYS_TimerTaskHandler+0xc8>
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae4:	ac 81       	ldd	r26, Y+4	; 0x04
    1ae6:	bd 81       	ldd	r27, Y+5	; 0x05
    1ae8:	c8 16       	cp	r12, r24
    1aea:	d9 06       	cpc	r13, r25
    1aec:	ea 06       	cpc	r14, r26
    1aee:	fb 06       	cpc	r15, r27
    1af0:	f0 f6       	brcc	.-68     	; 0x1aae <SYS_TimerTaskHandler+0x6c>
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	ac 81       	ldd	r26, Y+4	; 0x04
    1af8:	bd 81       	ldd	r27, Y+5	; 0x05
    1afa:	8c 19       	sub	r24, r12
    1afc:	9d 09       	sbc	r25, r13
    1afe:	ae 09       	sbc	r26, r14
    1b00:	bf 09       	sbc	r27, r15
    1b02:	8a 83       	std	Y+2, r24	; 0x02
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	ac 83       	std	Y+4, r26	; 0x04
    1b08:	bd 83       	std	Y+5, r27	; 0x05
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	ff 90       	pop	r15
    1b10:	ef 90       	pop	r14
    1b12:	df 90       	pop	r13
    1b14:	cf 90       	pop	r12
    1b16:	08 95       	ret

00001b18 <__udivmodsi4>:
    1b18:	a1 e2       	ldi	r26, 0x21	; 33
    1b1a:	1a 2e       	mov	r1, r26
    1b1c:	aa 1b       	sub	r26, r26
    1b1e:	bb 1b       	sub	r27, r27
    1b20:	fd 01       	movw	r30, r26
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <__udivmodsi4_ep>

00001b24 <__udivmodsi4_loop>:
    1b24:	aa 1f       	adc	r26, r26
    1b26:	bb 1f       	adc	r27, r27
    1b28:	ee 1f       	adc	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	a2 17       	cp	r26, r18
    1b2e:	b3 07       	cpc	r27, r19
    1b30:	e4 07       	cpc	r30, r20
    1b32:	f5 07       	cpc	r31, r21
    1b34:	20 f0       	brcs	.+8      	; 0x1b3e <__udivmodsi4_ep>
    1b36:	a2 1b       	sub	r26, r18
    1b38:	b3 0b       	sbc	r27, r19
    1b3a:	e4 0b       	sbc	r30, r20
    1b3c:	f5 0b       	sbc	r31, r21

00001b3e <__udivmodsi4_ep>:
    1b3e:	66 1f       	adc	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	1a 94       	dec	r1
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <__udivmodsi4_loop>
    1b4a:	60 95       	com	r22
    1b4c:	70 95       	com	r23
    1b4e:	80 95       	com	r24
    1b50:	90 95       	com	r25
    1b52:	9b 01       	movw	r18, r22
    1b54:	ac 01       	movw	r20, r24
    1b56:	bd 01       	movw	r22, r26
    1b58:	cf 01       	movw	r24, r30
    1b5a:	08 95       	ret

00001b5c <do_rand>:
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	ec 01       	movw	r28, r24
    1b72:	68 81       	ld	r22, Y
    1b74:	79 81       	ldd	r23, Y+1	; 0x01
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7a:	61 15       	cp	r22, r1
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	81 05       	cpc	r24, r1
    1b80:	91 05       	cpc	r25, r1
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <do_rand+0x30>
    1b84:	64 e2       	ldi	r22, 0x24	; 36
    1b86:	79 ed       	ldi	r23, 0xD9	; 217
    1b88:	8b e5       	ldi	r24, 0x5B	; 91
    1b8a:	97 e0       	ldi	r25, 0x07	; 7
    1b8c:	2d e1       	ldi	r18, 0x1D	; 29
    1b8e:	33 ef       	ldi	r19, 0xF3	; 243
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	41 d0       	rcall	.+130    	; 0x1c18 <__divmodsi4>
    1b96:	49 01       	movw	r8, r18
    1b98:	5a 01       	movw	r10, r20
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	a7 ea       	ldi	r26, 0xA7	; 167
    1ba0:	b1 e4       	ldi	r27, 0x41	; 65
    1ba2:	56 d0       	rcall	.+172    	; 0x1c50 <__muluhisi3>
    1ba4:	6b 01       	movw	r12, r22
    1ba6:	7c 01       	movw	r14, r24
    1ba8:	ac ee       	ldi	r26, 0xEC	; 236
    1baa:	b4 ef       	ldi	r27, 0xF4	; 244
    1bac:	a5 01       	movw	r20, r10
    1bae:	94 01       	movw	r18, r8
    1bb0:	5b d0       	rcall	.+182    	; 0x1c68 <__mulohisi3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8c 0d       	add	r24, r12
    1bb8:	9d 1d       	adc	r25, r13
    1bba:	ae 1d       	adc	r26, r14
    1bbc:	bf 1d       	adc	r27, r15
    1bbe:	b7 ff       	sbrs	r27, 7
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <do_rand+0x6c>
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	a1 09       	sbc	r26, r1
    1bc6:	b0 48       	sbci	r27, 0x80	; 128
    1bc8:	88 83       	st	Y, r24
    1bca:	99 83       	std	Y+1, r25	; 0x01
    1bcc:	aa 83       	std	Y+2, r26	; 0x02
    1bce:	bb 83       	std	Y+3, r27	; 0x03
    1bd0:	9f 77       	andi	r25, 0x7F	; 127
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	08 95       	ret

00001be8 <rand_r>:
    1be8:	b9 cf       	rjmp	.-142    	; 0x1b5c <do_rand>

00001bea <rand>:
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	92 e0       	ldi	r25, 0x02	; 2
    1bee:	b6 cf       	rjmp	.-148    	; 0x1b5c <do_rand>

00001bf0 <srand>:
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1bf8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1bfc:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1c00:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1c04:	08 95       	ret

00001c06 <memcpy>:
    1c06:	fb 01       	movw	r30, r22
    1c08:	dc 01       	movw	r26, r24
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <memcpy+0xa>
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	0d 92       	st	X+, r0
    1c10:	41 50       	subi	r20, 0x01	; 1
    1c12:	50 40       	sbci	r21, 0x00	; 0
    1c14:	d8 f7       	brcc	.-10     	; 0x1c0c <memcpy+0x6>
    1c16:	08 95       	ret

00001c18 <__divmodsi4>:
    1c18:	05 2e       	mov	r0, r21
    1c1a:	97 fb       	bst	r25, 7
    1c1c:	16 f4       	brtc	.+4      	; 0x1c22 <__divmodsi4+0xa>
    1c1e:	00 94       	com	r0
    1c20:	0f d0       	rcall	.+30     	; 0x1c40 <__negsi2>
    1c22:	57 fd       	sbrc	r21, 7
    1c24:	05 d0       	rcall	.+10     	; 0x1c30 <__divmodsi4_neg2>
    1c26:	78 df       	rcall	.-272    	; 0x1b18 <__udivmodsi4>
    1c28:	07 fc       	sbrc	r0, 7
    1c2a:	02 d0       	rcall	.+4      	; 0x1c30 <__divmodsi4_neg2>
    1c2c:	46 f4       	brtc	.+16     	; 0x1c3e <__divmodsi4_exit>
    1c2e:	08 c0       	rjmp	.+16     	; 0x1c40 <__negsi2>

00001c30 <__divmodsi4_neg2>:
    1c30:	50 95       	com	r21
    1c32:	40 95       	com	r20
    1c34:	30 95       	com	r19
    1c36:	21 95       	neg	r18
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c3c:	5f 4f       	sbci	r21, 0xFF	; 255

00001c3e <__divmodsi4_exit>:
    1c3e:	08 95       	ret

00001c40 <__negsi2>:
    1c40:	90 95       	com	r25
    1c42:	80 95       	com	r24
    1c44:	70 95       	com	r23
    1c46:	61 95       	neg	r22
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	08 95       	ret

00001c50 <__muluhisi3>:
    1c50:	0f d0       	rcall	.+30     	; 0x1c70 <__umulhisi3>
    1c52:	a5 9f       	mul	r26, r21
    1c54:	90 0d       	add	r25, r0
    1c56:	b4 9f       	mul	r27, r20
    1c58:	90 0d       	add	r25, r0
    1c5a:	a4 9f       	mul	r26, r20
    1c5c:	80 0d       	add	r24, r0
    1c5e:	91 1d       	adc	r25, r1
    1c60:	11 24       	eor	r1, r1
    1c62:	08 95       	ret

00001c64 <__mulshisi3>:
    1c64:	b7 ff       	sbrs	r27, 7
    1c66:	f4 cf       	rjmp	.-24     	; 0x1c50 <__muluhisi3>

00001c68 <__mulohisi3>:
    1c68:	f3 df       	rcall	.-26     	; 0x1c50 <__muluhisi3>
    1c6a:	82 1b       	sub	r24, r18
    1c6c:	93 0b       	sbc	r25, r19
    1c6e:	08 95       	ret

00001c70 <__umulhisi3>:
    1c70:	a2 9f       	mul	r26, r18
    1c72:	b0 01       	movw	r22, r0
    1c74:	b3 9f       	mul	r27, r19
    1c76:	c0 01       	movw	r24, r0
    1c78:	a3 9f       	mul	r26, r19
    1c7a:	70 0d       	add	r23, r0
    1c7c:	81 1d       	adc	r24, r1
    1c7e:	11 24       	eor	r1, r1
    1c80:	91 1d       	adc	r25, r1
    1c82:	b2 9f       	mul	r27, r18
    1c84:	70 0d       	add	r23, r0
    1c86:	81 1d       	adc	r24, r1
    1c88:	11 24       	eor	r1, r1
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	08 95       	ret

00001c8e <_exit>:
    1c8e:	f8 94       	cli

00001c90 <__stop_program>:
    1c90:	ff cf       	rjmp	.-2      	; 0x1c90 <__stop_program>
